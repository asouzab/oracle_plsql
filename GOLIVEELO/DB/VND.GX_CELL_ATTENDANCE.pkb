CREATE OR REPLACE PACKAGE BODY VND."GX_CELL_ATTENDANCE" AS

/*
+-------------------------------------------------------------------------------+
+  TARGETS: CELL ATTENDANCE FORM, REFRESH, CLOSE ,CRUD                          +
+  LAST UPDATE: 2018.04.12 14:11  ADRIANO BAVIERA                               +
+  COMMENT:  2018.03.17 ADJUST ROTEIRO ENTREGA FROM CONTRATO WHEN IC_COOPERATIVE+
+  COMMENT:  2018.04.12 ADJUST cd_tipo_agendamento is not null to return screen +
+-------------------------------------------------------------------------------+
*/

  PROCEDURE PX_CELL_ATTENDANCE(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_CD_SALES_DISTRICT             IN VND.ELO_CARTEIRA.CD_SALES_DISTRICT%TYPE DEFAULT NULL,
        P_CD_SALES_OFFICE               IN VND.ELO_CARTEIRA.CD_SALES_OFFICE%TYPE DEFAULT NULL,
        P_CD_SALES_GROUP                IN VND.ELO_CARTEIRA.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR
    ) 

    
    AS
    
  BEGIN
        OPEN P_RETORNO FOR
        
        SELECT 
            RETORNO.TIPO_AGENDAMENTO CD_TIPO_AGENDAMENTO,
            RETORNO.NUM_CLIENTE, 
            RETORNO.CONTRATO,
            RETORNO.OV,
            RETORNO.NU_CONTRATO,
            RETORNO.PRODUTO, 
            RETORNO.DESCRICAO, 
            RETORNO.DATA, 
            RETORNO.PROGRAMADO, 
            RETORNO.CENTRO, 
            RETORNO.MODALIDADE, 
            RETORNO.GERENTE, 
            RETORNO.SUPERVISOR, 
            RETORNO.CLIENTE,
            RETORNO.CONTA_ORDEM,
            RETORNO.PROTOCOLO,
            RETORNO.QTD_PROTOCOLO,
            RETORNO.FA,
            RETORNO.EXPORTACAO,
            RETORNO.ROTEIRO,
            RETORNO.COMERCIAL,
            RETORNO.COBRANCA,
            RETORNO.CREDITO,
            RETORNO.CONTRATO_MAE,
            RETORNO.ORDEM_VENDAS,
            RETORNO.STATUS,
            RETORNO.OBSERVACAO,
            RETORNO.RECEBEDOR,
            RETORNO.PAGADOR,
            RETORNO.CD_SALES_GROUP,
            RETORNO.CD_CLIENTE,
            RETORNO.CD_PRODUTO_SAP,
            RETORNO.CD_INCOTERMS,
            RETORNO.CD_CENTRO_EXPEDIDOR,
            RETORNO.CD_CLIENTE_RECEBEDOR,
            RETORNO.CD_CLIENTE_PAGADOR,
            RETORNO.CD_ITEM_PEDIDO,
            RETORNO.CD_ELO_CARTEIRA,
            RETORNO.CD_WEEK,
            RETORNO.IC_PERMITIR_ALTERAR

            FROM (       
        
          WITH BLCK AS (SELECT DISTINCT CD_BLOCKING_TYPE_COLUMN, EB.CD_BLOCKING_REASON, CD_BLOCKING_LEVEL
           FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB       
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            )  
             SELECT DISTINCT
            NVL(ST2.DS_STATUS, 'Original') "TIPO_AGENDAMENTO",
            EC.CD_CLIENTE "NUM_CLIENTE", 
            EC.NU_CONTRATO_SAP "CONTRATO",
            NVL(EC.NU_ORDEM_VENDA,'-') "OV",
            EC.NU_CONTRATO,
            EC.CD_PRODUTO_SAP "PRODUTO", 
            EC.NO_PRODUTO_SAP "DESCRICAO", 
            EC.DH_CARTEIRA "DATA", 
            NVL(EC.QT_AGENDADA_CONFIRMADA,0) "PROGRAMADO", 
            EC.DS_CENTRO_EXPEDIDOR "CENTRO", 
            EC.CD_INCOTERMS "MODALIDADE", 
            EC.NO_SALES_OFFICE "GERENTE", 
            EC.CD_SALES_GROUP || ' - ' || EC.NO_SALES_GROUP "SUPERVISOR", 
            EC.NO_CLIENTE "CLIENTE",
            CASE
                WHEN EC.IC_COOPERATIVE = 'S' THEN 'SIM'
                WHEN EC.IC_COOPERATIVE = 'N' THEN 'NÃO'
                ELSE 'NÃO'
            END "CONTA_ORDEM",
           -- GX_CELL_ATTENDANCE.FX_GET_NR_PROTOCOLO(EC.NU_CONTRATO_SAP) "PROTOCOLO",
           -- GX_CELL_ATTENDANCE.FX_GET_QT_PROTOCOLO(EC.NU_CONTRATO_SAP) "QTD_PROTOCOLO",
           --EC.NU_PROTOCOLO "PROTOCOLO",
           VND.GX_CELL_ATTENDANCE.FX_GET_NR_PROTOCOLO_VB(EC.CD_ELO_CARTEIRA )"PROTOCOLO",
           
           (SELECT SUM(VBPROT.QT_AGENDADA_PROTOCOLO ) SOMM
           FROM VND.ELO_VBAK_PROTOCOLO VBPROT
           WHERE VBPROT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA AND VBPROT.IC_ATIVO='S') "QTD_PROTOCOLO",
           
            CASE
                WHEN EC.IC_FA = 'S' THEN 'SIM'
                WHEN EC.IC_FA = 'N' THEN 'NÃO'
                ELSE 'NÃO'
            END "FA",
            CASE
                WHEN EC.IC_EXPORT = 'S' THEN 'SIM'
                WHEN EC.IC_EXPORT = 'N' THEN 'NÃO'
                ELSE 'NÃO'
            END "EXPORTACAO",
            CASE
                WHEN EC.CD_INCOTERMS = 'FOB' THEN 'FOB'
                WHEN EC.CD_INCOTERMS = 'CIF' THEN EC.DS_ROTEIRO_ENTREGA
                
            END "ROTEIRO",
  
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'
       ELSE '-' END COMERCIAL,
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END COBRANCA,
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END CREDITO, 
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END CONTRATO_MAE,
          CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
               WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
               WHEN BF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
               WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
               WHEN BC.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END ORDEM_VENDAS,
            COALESCE 
            ((SELECT EC.DS_CREDIT_BLOCK_REASON  
            FROM VND.ELO_STATUS ST_CELL 
            WHERE ST_CELL.CD_ELO_STATUS = EC.CD_STATUS_CEL_FINAL AND ST_CELL.SG_STATUS = 'CLREA' ),
            (SELECT ST_CELL.DS_STATUS 
            FROM VND.ELO_STATUS ST_CELL 
            WHERE ST_CELL.CD_ELO_STATUS = NVL( EC.CD_STATUS_CEL_FINAL, EC.CD_STATUS_CEL_INITIAL)
            )) "STATUS",
           
            
             EC.DS_OBSERVACAO_ADVEN "OBSERVACAO"
            , EC.NO_CLIENTE_RECEBEDOR "RECEBEDOR"
            , EC.NO_CLIENTE_PAGADOR "PAGADOR"
            , EC.CD_SALES_GROUP
            , EC.CD_CLIENTE
            , EC.CD_PRODUTO_SAP
            , EC.CD_INCOTERMS
            , EC.CD_CENTRO_EXPEDIDOR
            , EC.CD_CLIENTE_RECEBEDOR
            , EC.CD_CLIENTE_PAGADOR
            , EC.CD_ITEM_PEDIDO
            , EC.CD_ELO_CARTEIRA
            , EA.CD_WEEK
            , CASE 
                WHEN EC.IC_PERMITIR_CS = 'S' AND NOT(E_AG_ST.SG_STATUS ='AGENC') THEN 'S'
                WHEN NOT(E_AG_ST.SG_STATUS ='AGENC') AND ((EC.DH_LIBERACAO_TORRE_FRETES IS NULL 
                OR EC.CD_TIPO_AGENDAMENTO = 25)) THEN 'S'  
                ELSE 'N' END IC_PERMITIR_ALTERAR
         
       FROM VND.ELO_CARTEIRA EC INNER JOIN vnd.elo_agendamento EA ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
                                INNER JOIN VND.ELO_STATUS E_AG_ST ON EA.CD_ELO_STATUS = E_AG_ST.CD_ELO_STATUS
                                LEFT JOIN VND.ELO_STATUS ST2 ON EC.CD_TIPO_AGENDAMENTO = ST2.CD_ELO_STATUS
                                INNER JOIN VND.ELO_TIPO_STATUS E_AG_TP ON E_AG_ST.CD_ELO_TIPO_STATUS = E_AG_TP.CD_ELO_TIPO_STATUS
        AND  E_AG_TP.SG_TIPO_STATUS = 'AGEND'
       LEFT JOIN BLCK BR ON BR.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA 
                                LEFT JOIN BLCK BRI ON BRI.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA_ITEM
                                LEFT JOIN BLCK BF ON BF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO
                                LEFT JOIN BLCK BFI ON BFI.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO_ITEM       
                                LEFT JOIN BLCK BC ON BC.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_CREDITO 
       WHERE EA.CD_WEEK = P_CD_WEEK
        AND EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL --AND EC.CD_TIPO_AGENDAMENTO IS NOT NULL
        AND (P_CD_POLO IS NULL OR EA.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EA.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR EA.CD_MACHINE = P_CD_MACHINE)
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)
        
        ) RETORNO
        ORDER BY 
        
        RETORNO.CD_CENTRO_EXPEDIDOR ASC,
        RETORNO.GERENTE ASC,
        RETORNO.CD_SALES_GROUP ASC,
        RETORNO.CONTRATO ASC,
        RETORNO.OV ASC,
        RETORNO.CD_ELO_CARTEIRA ASC

        ;

  END PX_CELL_ATTENDANCE;

       PROCEDURE PU_CELL_ATTENDANCE_UPDATE(
        P_CD_ELO_CARTEIRA               IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE DEFAULT NULL,
        P_DS_OBSERVACAO_ADVEN           IN VND.ELO_CARTEIRA.DS_OBSERVACAO_ADVEN%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)
    IS
    V_TRAVA VARCHAR2(1):='S';

    BEGIN

    BEGIN
    UPDATE VND.ELO_CARTEIRA
    SET DS_OBSERVACAO_ADVEN = P_DS_OBSERVACAO_ADVEN,
    DH_MODIFICACAO_CELL_ATT = CURRENT_DATE,
    CD_USUARIO_MODIF_CELL_ATT = 4198,
    NU_PROTOCOLO_ENTREGA = 'GXCT_PU_CELL_ATT_UPDATE_OB'
    WHERE CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;
    COMMIT;
    V_TRAVA:='N';
    EXCEPTION 
    WHEN OTHERS THEN 
        BEGIN
        V_TRAVA:='S';
        ROLLBACK;
        END;
    END;

    OPEN P_RETORNO FOR
    SELECT CASE WHEN V_TRAVA = 'N' THEN '1' ELSE '0' END AS P_SUCESSO
    FROM DUAL;

    END PU_CELL_ATTENDANCE_UPDATE;


    PROCEDURE PU_CELL_ATTENDANCE_UPDATE_LAST(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_CD_SALES_DISTRICT             IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_DISTRICT%TYPE DEFAULT NULL,
        P_CD_SALES_OFFICE               IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_OFFICE%TYPE DEFAULT NULL,
        P_CD_SALES_GROUP                IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)
    IS

        V_CD_ITEM_PEDIDO                        VND.PEDIDO.CD_ITEM_PEDIDO%TYPE;
        V_DS_ROTEIRO_ENTREGA                    VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;
        V_NU_QUANTIDADE                         VND.PEDIDO.NU_QUANTIDADE%TYPE;
        V_NU_QUANTIDADE_ENTREGUE                VND.PEDIDO.NU_QUANTIDADE_ENTREGUE%TYPE;
        V_NU_QUANTIDADE_SALDO                   VND.PEDIDO.NU_QUANTIDADE_SALDO%TYPE;
        V_CD_MOTIVO_RECUSA                      VND.ITEM_CONTRATO.CD_MOTIVO_RECUSA%TYPE;
        V_CD_BLOQUEIO_REMESSA                   VND.PEDIDO.CD_BLOQUEIO_REMESSA%TYPE;
        V_CD_BLOQUEIO_REMESSA_ITEM              VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
        V_CD_BLOQUEIO_FATURAMENTO               VND.PEDIDO.CD_BLOQUEIO_FATURAMENTO%TYPE;
        V_CD_BLOQUEIO_FATURAMENTO_ITEM          VND.ITEM_CONTRATO.CD_BLOQUEIO_FATURAMENTO_ITEM%TYPE;
        V_CD_BLOQUEIO_CREDITO                   VND.PEDIDO.CD_BLOQUEIO_CREDITO%TYPE;
        V_DS_CREDIT_BLOCK_REASON                VND.PEDIDO.DS_CREDIT_BLOCK_REASON%TYPE;
        V_CD_USUARIO_REFRESH                    VND.ELO_CARTEIRA.CD_USUARIO_REFRESH%TYPE;
        V_NU_ORDEM_VENDA                        VND.PEDIDO.NU_ORDEM_VENDA%TYPE;
        V_CD_CONTRATO                           VND.CONTRATO.CD_CONTRATO%TYPE;
        V_CONFIRM                               T_CURSOR;
        
        V_NU_ORDEM_VENDA_FR_CART                        VND.ELO_CARTEIRA.NU_ORDEM_VENDA%TYPE;
        V_CD_ITEM_PEDIDO_FR_CART                        VND.ELO_CARTEIRA.CD_ITEM_PEDIDO%TYPE;
        

        v_count                 NUMBER;
        iConta                  NUMBER;
        iContaItem              NUMBER;
        v_status                VARCHAR2(10);
        V_QT_AG_CONFIRMADA      VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE;
        V_TRAVA                 VARCHAR2(1):='N';
        V_ACHEI_OV_ERA_BRANCO   VARCHAR2(10):='CARTEIRA';
        
        V_RET_CD_ELO_STATUS                 VND.ELO_STATUS.CD_ELO_STATUS%TYPE;
        V_RET_SG_STATUS                      VND.ELO_STATUS.SG_STATUS%TYPE;
        V_RET_ERRO                           VARCHAR2(1);
        V_RET_RETORNO                        T_CURSOR;
        
        V_ST_CS_CAFIN  VND.ELO_CARTEIRA.CD_STATUS_CUSTOMER_SERVICE%TYPE; 
        V_ST_TF_CANEW  VND.ELO_CARTEIRA.CD_STATUS_TORRE_FRETES%TYPE;
        V_ST_CS_CAPRO  VND.ELO_CARTEIRA.CD_STATUS_CUSTOMER_SERVICE%TYPE; 
        V_CD_GROUPINGNLIBERADO VND.ELO_CARTEIRA.CD_ELO_CARTEIRA_GROUPING%TYPE;
        V_QT_CD_STATUS_CEL  NUMBER;
        V_ST_REPLAN    VND.ELO_STATUS.CD_ELO_STATUS%TYPE:=VND.GX_ELO_COMMON.fx_elo_status('TIPAG', 'REPLAN');  --25 DEV
        V_QUANTIDADE_AGENDADA_REPLAN VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE;
        V_ESCOLHER_MELHOR_ROTEIRO_ENT        VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;
        V_DS_ROTEIRO_CONTRATO    VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;
        V_DS_ROTEIRO_PROTOCOLO    VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;

        V_ESCOLHER_MELHOR_BLOQ_REMESSA        VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
        V_DS_BLOQUEIO_REMESSA_CONTRATO    VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
        V_DS_BLOQUEIO_REMESSA_PEDIDO    VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;


        CURSOR C_CARTEIRA IS
        
        WITH CTE_AGENDAMENTO AS 
        (
        SELECT AGE.CD_ELO_AGENDAMENTO , AGE.CD_ELO_STATUS
        FROM VND.ELO_AGENDAMENTO AGE
        WHERE 
        AGE.CD_ELO_STATUS NOT IN (VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGENC'))
        AND (P_CD_WEEK IS NULL OR AGE.CD_WEEK = P_CD_WEEK)
        AND (P_CD_POLO IS NULL OR AGE.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR AGE.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR AGE.CD_MACHINE = P_CD_MACHINE)
        
        )
        
        
        SELECT DISTINCT
            CD_ELO_CARTEIRA
            ,EC.NU_ORDEM_VENDA
            ,CD_ITEM_PEDIDO
            ,IC_FA
            ,IC_EXPORT
            ,QT_SALDO_REFRESH
            ,CD_MOTIVO_RECUSA
            ,CD_BLOQUEIO_ENTREGA
            ,DH_VENCIMENTO_PEDIDO 
            ,DS_CREDIT_BLOCK_REASON 
            ,CD_INCOTERMS 
            ,IC_COOPERATIVE
            ,DS_ROTEIRO_ENTREGA
            ,NU_CONTRATO_SAP
            ,QT_AGENDADA_CONFIRMADA
            ,CD_BLOQUEIO_REMESSA
            ,CD_BLOQUEIO_REMESSA_ITEM
            ,CD_BLOQUEIO_FATURAMENTO
            ,CD_BLOQUEIO_FATURAMENTO_ITEM
            ,CD_BLOQUEIO_CREDITO
            ,CD_ITEM_CONTRATO
            ,NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0)  QT_AGENDADA_PROTOCOLO
            ,EC.CD_PRODUTO_SAP
            ,EC.CD_TIPO_AGENDAMENTO
            ,EC.QT_AGENDADA
            ,EC.QT_PROGRAMADA
        FROM VND.ELO_CARTEIRA EC
        INNER JOIN CTE_AGENDAMENTO EA 
        ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        WHERE
        (((EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL OR EC.QT_AGENDADA_CONFIRMADA >= 0)))                                   -- SOLICITACAO RONIE 2018-01-12
        --(EC.QT_AGENDADA_CONFIRMADA IS NOT NULL AND EC.QT_AGENDADA_CONFIRMADA > 0) -- SOLICITACAO RONIE 2018-01-12
        AND (
        (EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG') FROM DUAL) OR
                EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE') FROM DUAL))
                OR EC.CD_TIPO_AGENDAMENTO = VND.GX_ELO_COMMON.fx_elo_status('TIPAG', 'REPLAN')
                )
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)
        
        UNION 
        SELECT DISTINCT
            CD_ELO_CARTEIRA
            ,EC.NU_ORDEM_VENDA
            ,CD_ITEM_PEDIDO
            ,IC_FA
            ,IC_EXPORT
            ,QT_SALDO_REFRESH
            ,CD_MOTIVO_RECUSA
            ,CD_BLOQUEIO_ENTREGA
            ,DH_VENCIMENTO_PEDIDO 
            ,DS_CREDIT_BLOCK_REASON 
            ,EC.CD_INCOTERMS 
            ,IC_COOPERATIVE
            ,DS_ROTEIRO_ENTREGA
            ,NU_CONTRATO_SAP
            ,QT_AGENDADA_CONFIRMADA
            ,CD_BLOQUEIO_REMESSA
            ,CD_BLOQUEIO_REMESSA_ITEM
            ,CD_BLOQUEIO_FATURAMENTO
            ,CD_BLOQUEIO_FATURAMENTO_ITEM
            ,CD_BLOQUEIO_CREDITO
            ,CD_ITEM_CONTRATO
            ,NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0)  QT_AGENDADA_PROTOCOLO
            ,EC.CD_PRODUTO_SAP
            ,EC.CD_TIPO_AGENDAMENTO
            ,EC.QT_AGENDADA
            ,EC.QT_PROGRAMADA
        FROM VND.ELO_CARTEIRA EC
        INNER JOIN CTE_AGENDAMENTO EA 
        ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_ITEM ITEM ON EAS.CD_ELO_AGENDAMENTO_SUPERVISOR = ITEM.CD_ELO_AGENDAMENTO_SUPERVISOR
        WHERE
        NVL(EC.QT_AGENDADA_CONFIRMADA,0) >= 0 
        AND EC.CD_TIPO_AGENDAMENTO IN (22,23,24)
        AND ITEM.IC_ADICAO = 'S'
        AND (EA.CD_ELO_STATUS IN (6)) 
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)        
        
        ;

        -- LINHA DO CURSOR DA CARTEIRA
        C_LINHA C_CARTEIRA%ROWTYPE;

        BEGIN
        
            V_ST_CS_CAFIN:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN');
            V_ST_TF_CANEW:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW');
            V_ST_CS_CAPRO:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO'); 

/*            
            BEGIN

            PU_ULTIMA_PARA_CEL_STATUS(        
            P_CD_POLO ,
            P_CD_CENTRO_EXPEDIDOR,
            P_CD_MACHINE ,
            P_CD_WEEK ,
            P_RETORNO  );

            EXCEPTION 

            WHEN OTHERS THEN 
                BEGIN
                v_status:=NULL;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 088'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END;            
*/            
        
        
            BEGIN
            UPDATE VND.ELO_CARTEIRA EC
            SET EC.CD_STATUS_CUSTOMER_SERVICE = V_ST_TF_CANEW,
            NU_PROTOCOLO = 'TOCUST' || TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH:MI')
            WHERE 
            EC.QT_AGENDADA_CONFIRMADA > 0 
            AND EC.CD_STATUS_CUSTOMER_SERVICE IS NULL
            AND EXISTS (SELECT 1  
                    FROM VND.ELO_AGENDAMENTO AGE
                    WHERE 
                    AGE.CD_ELO_STATUS  IN (VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG'),VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE'))
                    AND AGE.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
                    AND (P_CD_WEEK IS NULL OR AGE.CD_WEEK = P_CD_WEEK)
                    AND (P_CD_POLO IS NULL OR AGE.CD_POLO = P_CD_POLO)
                    AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR AGE.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
                    AND (P_CD_MACHINE IS NULL OR AGE.CD_MACHINE = P_CD_MACHINE)
                    );
             
            COMMIT;

            EXCEPTION 
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 001b - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                --V_TRAVA:='S';
                END; 
            END;
        

        IF C_CARTEIRA%ISOPEN THEN
            CLOSE C_CARTEIRA;
        END IF;
        


        OPEN C_CARTEIRA;
        LOOP
        BEGIN
        FETCH C_CARTEIRA into C_LINHA;
            EXIT WHEN C_CARTEIRA%notfound;

            V_CD_ITEM_PEDIDO_FR_CART := C_LINHA.CD_ITEM_PEDIDO;
            V_NU_ORDEM_VENDA_FR_CART := C_LINHA.NU_ORDEM_VENDA;
            V_NU_ORDEM_VENDA:=V_NU_ORDEM_VENDA_FR_CART;
            V_CD_ITEM_PEDIDO:=V_CD_ITEM_PEDIDO_FR_CART;
            V_ACHEI_OV_ERA_BRANCO:='CARTEIRA';
            V_ESCOLHER_MELHOR_ROTEIRO_ENT:=C_LINHA.DS_ROTEIRO_ENTREGA;
            V_ESCOLHER_MELHOR_BLOQ_REMESSA:=NULL;
            
            V_TRAVA:= 'N';
            
            BEGIN
            UPDATE VND.ELO_CARTEIRA
            SET NU_PROTOCOLO = 'INICI' || TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH:MI')
            WHERE 
            CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
            COMMIT;

            EXCEPTION 
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 001 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END; 
            END;
            
-- #############################################################################################
-- SE A ORDEM DE VENDA NA CARTEIRA ESTIVER VAZIA, ATUALIZA ESSA INFORMAÇÃO TRAZENDO DO CONTRATO.
IF (C_LINHA.NU_ORDEM_VENDA IS NULL 
OR TRIM(C_LINHA.NU_ORDEM_VENDA) = '0' 
OR TRIM(C_LINHA.NU_ORDEM_VENDA) IS NULL ) THEN
	BEGIN

		-- VERIFICAR SE EXISTE A ORDEM DE VENDA NA TABELA PEDIDO
		BEGIN 
		SELECT NVL(COUNT(PE.NU_ORDEM_VENDA), 0) INTO iConta
		FROM VND.PEDIDO PE
		WHERE PE.NU_CONTRATO_SAP = C_LINHA.NU_CONTRATO_SAP
		AND PE.CD_ITEM_CONTRATO = C_LINHA.CD_ITEM_CONTRATO
        AND PE.CD_PRODUTO_SAP = C_LINHA.CD_PRODUTO_SAP;

		EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
			BEGIN
			iConta:=0;
			--RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 002 - '
			-- || SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END; 
		WHEN OTHERS THEN 

			BEGIN
			iConta:=0;
			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 003 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;                
		END;

		-- SE EXISTIR A ORDEM DE VENDA NA PEDIDO, ATUALIZA A CARTEIRA
		IF iConta > 0 THEN
		BEGIN
			BEGIN
			SELECT 
			PE.NU_ORDEM_VENDA, PE.CD_ITEM_PEDIDO
			INTO V_NU_ORDEM_VENDA, V_CD_ITEM_PEDIDO
			FROM VND.PEDIDO PE
			WHERE   
			PE.NU_CONTRATO_SAP = C_LINHA.NU_CONTRATO_SAP
			AND  PE.CD_ITEM_CONTRATO = C_LINHA.CD_ITEM_CONTRATO 
            AND PE.CD_PRODUTO_SAP = C_LINHA.CD_PRODUTO_SAP
			AND ROWNUM=1;
			V_ACHEI_OV_ERA_BRANCO:='VEMPEDIDO';
			EXCEPTION 
			WHEN NO_DATA_FOUND THEN 
				BEGIN
				-- RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 004 - '
				--  || SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				V_ACHEI_OV_ERA_BRANCO:='SEMPEDIDO';
				END;
			WHEN OTHERS THEN 
				BEGIN
				RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO GROUPING - '
				|| SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				V_ACHEI_OV_ERA_BRANCO:='SEMPEDIDO';
				END;
			END;
		
               BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET NU_ORDEM_VENDA = V_NU_ORDEM_VENDA,
                CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
    
                WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA
             ;

            COMMIT;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 029 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

            WHEN OTHERS THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 030 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
            
        END;
        
        
        
        END;
		
        
        ELSE
			V_ACHEI_OV_ERA_BRANCO:='SEMPEDIDO';

		END IF;
	END;
		
END IF;    


IF  V_ACHEI_OV_ERA_BRANCO IS NOT NULL THEN  --= 'SEMPEDIDO'  THEN 
-- SE 'NAO' EXISTIR A ORDEM DE VENDA NA PEDIDO, ATUALIZA A CARTEIRA COM OS DADOS DE BLOQUEIO DA CONTRATO
-- ATUALIZA NA CARTEIRA A ORDEM SE ESTIVER EM BRANCO E OS VALORES DE BLOQUEIO, VINDOS DO CONTRATO
	BEGIN 
	SELECT 
	CD_CONTRATO
	, DS_ROTEIRO_ENTREGA
	, CD_BLOQUEIO_REMESSA
	, CD_BLOQUEIO_FATURAMENTO
	, CD_BLOQUEIO_CREDITO
	, DS_CREDIT_BLOCK_REASON
	INTO 
	V_CD_CONTRATO
	, V_DS_ROTEIRO_ENTREGA
	, V_CD_BLOQUEIO_REMESSA
	, V_CD_BLOQUEIO_FATURAMENTO
	, V_CD_BLOQUEIO_CREDITO
	, V_DS_CREDIT_BLOCK_REASON
	FROM 
	VND.CONTRATO PE
	WHERE 
	PE.NU_CONTRATO_SAP = C_LINHA.NU_CONTRATO_SAP 
	AND EXISTS (SELECT 1 
	FROM VND.ITEM_CONTRATO IC 
	WHERE IC.CD_CONTRATO = PE.CD_CONTRATO 
	AND IC.CD_ITEM_CONTRATO = C_LINHA.CD_ITEM_CONTRATO )
	AND ROWNUM=1;
	EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		BEGIN
			UPDATE VND.ELO_CARTEIRA SET CD_STATUS_CEL_FINAL = 60 
			WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
			COMMIT;
			--RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 007 - '
			--|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
		END;
	WHEN OTHERS THEN 
		BEGIN
			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO GROUPING - 007 B'
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
		END;

	END;	                        

	IF V_TRAVA = 'N' THEN 
    
        V_ESCOLHER_MELHOR_ROTEIRO_ENT:=NVL(V_DS_ROTEIRO_ENTREGA, V_ESCOLHER_MELHOR_ROTEIRO_ENT);
        --V_ESCOLHER_MELHOR_BLOQ_REMESSA:=NVL(V_CD_BLOQUEIO_REMESSA, V_ESCOLHER_MELHOR_BLOQ_REMESSA);
        
		BEGIN
		UPDATE VND.ELO_CARTEIRA
		SET --DS_ROTEIRO_ENTREGA = V_DS_ROTEIRO_ENTREGA, 
		CD_BLOQUEIO_REMESSA = V_CD_BLOQUEIO_REMESSA,  
		CD_BLOQUEIO_FATURAMENTO = V_CD_BLOQUEIO_FATURAMENTO, 
		CD_BLOQUEIO_CREDITO = V_CD_BLOQUEIO_CREDITO, 
		DS_CREDIT_BLOCK_REASON = V_DS_CREDIT_BLOCK_REASON
		WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
		COMMIT;
        V_ACHEI_OV_ERA_BRANCO:='ATCONTRATO';
		EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 008 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;
		WHEN OTHERS THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 009 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;

		END;

	END IF;
			--BUSCA DA ITEM_PRODUTO O BLOQUEIO_REMESSA_ITEM E O MOTIVO RECUSA

	BEGIN 
	SELECT COUNT(IC.CD_CONTRATO) INTO iContaItem
	FROM VND.ITEM_CONTRATO IC
	WHERE IC.CD_CONTRATO = V_CD_CONTRATO
	AND IC.CD_ITEM_CONTRATO = C_LINHA.CD_ITEM_CONTRATO;

	EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
		BEGIN
		iContaItem:=0;
		-- RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 010 - '
		--  || SQLCODE || ' -ERROR- ' || SQLERRM );
		V_TRAVA:='S';
		END;
	WHEN OTHERS THEN 
		BEGIN
		iContaItem:=0;
		RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 011 - '
		|| SQLCODE || ' -ERROR- ' || SQLERRM );
		V_TRAVA:='S';
		END;

	END;                    


	IF iContaItem > 0 THEN
		BEGIN 
		SELECT VND.ITEM_CONTRATO.CD_BLOQUEIO_FATURAMENTO_ITEM, VND.ITEM_CONTRATO.CD_MOTIVO_RECUSA
		INTO V_CD_BLOQUEIO_FATURAMENTO_ITEM, V_CD_MOTIVO_RECUSA
		FROM VND.ITEM_CONTRATO
		WHERE CD_CONTRATO = V_CD_CONTRATO
		AND CD_ITEM_CONTRATO = C_LINHA.CD_ITEM_CONTRATO AND ROWNUM=1;
		EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 012 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;
		WHEN OTHERS THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 013 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;
		END;

		IF V_TRAVA = 'N' THEN 
		-- UPDATE ELO_CARTEIRA
			BEGIN
			UPDATE VND.ELO_CARTEIRA SET
			CD_MOTIVO_RECUSA = V_CD_MOTIVO_RECUSA
			,CD_BLOQUEIO_FATURAMENTO_ITEM = V_CD_BLOQUEIO_FATURAMENTO_ITEM
			WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
			COMMIT;
			EXCEPTION 
			WHEN NO_DATA_FOUND THEN 
				BEGIN

				RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 014 - '
				|| SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				END;
			WHEN OTHERS THEN 
				BEGIN

				RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 015 - '
				|| SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				END;

			END;
		END IF;

	END IF;

END IF;

    -- #############################################################################################

    IF V_ACHEI_OV_ERA_BRANCO = 'VEMPEDIDO' OR V_ACHEI_OV_ERA_BRANCO = 'CARTEIRA' THEN 
    BEGIN
            BEGIN    
            SELECT NVL(count(cd_pedido),0) 
            INTO v_count
            FROM VND.PEDIDO 
            WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
            NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
            AND CD_PRODUTO_SAP = C_LINHA.CD_PRODUTO_SAP;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
                BEGIN
                v_count:=0;
                --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 022 - '
                --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            WHEN OTHERS THEN 
           
                BEGIN
                v_count:=0;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 023 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
           
            END;    
            

            IF v_count > 0 THEN
                BEGIN 
                SELECT 
                 PED.DS_ROTEIRO_ENTREGA 
                , PED.NU_QUANTIDADE
                , PED.NU_QUANTIDADE_ENTREGUE
                , PED.NU_QUANTIDADE_SALDO 
                , PED.CD_MOTIVO_RECUSA
                , PED.CD_BLOQUEIO_REMESSA 
                , PED.CD_BLOQUEIO_REMESSA_ITEM
                , PED.CD_BLOQUEIO_FATURAMENTO
                , PED.CD_BLOQUEIO_FATURAMENTO_ITEM
                , PED.CD_BLOQUEIO_CREDITO
                , PED.DS_CREDIT_BLOCK_REASON
                , 0
                INTO
                  V_DS_ROTEIRO_ENTREGA 
                , V_NU_QUANTIDADE
                , V_NU_QUANTIDADE_ENTREGUE
                , V_NU_QUANTIDADE_SALDO 
                , V_CD_MOTIVO_RECUSA
                , V_CD_BLOQUEIO_REMESSA 
                , V_CD_BLOQUEIO_REMESSA_ITEM
                , V_CD_BLOQUEIO_FATURAMENTO
                , V_CD_BLOQUEIO_FATURAMENTO_ITEM
                , V_CD_BLOQUEIO_CREDITO
                , V_DS_CREDIT_BLOCK_REASON
                , V_CD_USUARIO_REFRESH
                FROM VND.PEDIDO PED
                WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
                PED.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
                AND PED.CD_PRODUTO_SAP = C_LINHA.CD_PRODUTO_SAP
                AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
                FROM VND.PEDIDO PIT 
                WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
                AND PIT.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)
                AND ROWNUM=1;
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                    BEGIN
                    
                    --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 024 - '
                    --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                WHEN OTHERS THEN 
                    BEGIN
                    
                    RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 025 - '
                    || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                
                END;

                IF V_TRAVA = 'N' THEN 
                -- UPDATE ELO_CARTEIRA
                V_ESCOLHER_MELHOR_ROTEIRO_ENT:=NVL(V_DS_ROTEIRO_ENTREGA, V_ESCOLHER_MELHOR_ROTEIRO_ENT);
                V_ESCOLHER_MELHOR_BLOQ_REMESSA:=NVL(V_CD_BLOQUEIO_REMESSA_ITEM, V_ESCOLHER_MELHOR_BLOQ_REMESSA);
                BEGIN
                UPDATE VND.ELO_CARTEIRA SET
                     --DS_ROTEIRO_ENTREGA = V_DS_ROTEIRO_ENTREGA
                    QT_PROGRAMADA_REFRESH = V_NU_QUANTIDADE
                    ,QT_ENTREGUE_REFRESH = V_NU_QUANTIDADE_ENTREGUE
                    ,QT_SALDO_REFRESH = V_NU_QUANTIDADE_SALDO
                    ,CD_MOTIVO_RECUSA = V_CD_MOTIVO_RECUSA
                    ,CD_BLOQUEIO_REMESSA = V_CD_BLOQUEIO_REMESSA
                    ,CD_BLOQUEIO_REMESSA_ITEM = V_CD_BLOQUEIO_REMESSA_ITEM
                    ,CD_BLOQUEIO_FATURAMENTO = V_CD_BLOQUEIO_FATURAMENTO
                    ,CD_BLOQUEIO_FATURAMENTO_ITEM = V_CD_BLOQUEIO_FATURAMENTO_ITEM
                    ,CD_BLOQUEIO_CREDITO = V_CD_BLOQUEIO_CREDITO
                    ,DS_CREDIT_BLOCK_REASON = V_DS_CREDIT_BLOCK_REASON
                    ,CD_USUARIO_REFRESH = V_CD_USUARIO_REFRESH
                    ,DH_REFRESH = CURRENT_DATE
                    ,CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
                    ,NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
                WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
                COMMIT;
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                    BEGIN
                    
                    --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 026 - '
                    --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                WHEN OTHERS THEN 
                    BEGIN
                    
                    RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 027 - '
                    || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                
                END;
                
                END IF;

            END IF;
         
     END;       
    END IF;

    -- ############# RULES FOR UPDATE STATUS ON ELO_CARTEIRA

    IF  V_TRAVA =  'N' and C_LINHA.QT_AGENDADA_PROTOCOLO > 0 THEN  
    
        BEGIN
    
            BEGIN
            V_DS_ROTEIRO_PROTOCOLO:=FX_GET_ROTEIRO_ENTREGA(C_LINHA.CD_ELO_CARTEIRA);
             
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            V_DS_ROTEIRO_PROTOCOLO:=NULL;
            
            WHEN OTHERS THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 028 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                V_DS_ROTEIRO_PROTOCOLO:=NULL;
                END;
            
            END;
            
            V_DS_ROTEIRO_ENTREGA:=NVL(V_DS_ROTEIRO_PROTOCOLO,V_ESCOLHER_MELHOR_ROTEIRO_ENT);
            
        END;
    
    END IF;            
    
    
    IF C_LINHA.IC_COOPERATIVE = 'N' THEN 
    BEGIN
        BEGIN 
        SELECT 
        DS_ROTEIRO_ENTREGA 	INTO 	 V_DS_ROTEIRO_CONTRATO
        FROM 
        VND.CONTRATO PE
        WHERE 
        PE.NU_CONTRATO_SAP = C_LINHA.NU_CONTRATO_SAP 
        AND EXISTS (SELECT 1 
        FROM VND.ITEM_CONTRATO IC 
        WHERE IC.CD_CONTRATO = PE.CD_CONTRATO 
        AND IC.CD_ITEM_CONTRATO = C_LINHA.CD_ITEM_CONTRATO )
        AND ROWNUM=1;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            V_DS_ROTEIRO_CONTRATO:=NULL;
        WHEN OTHERS THEN 
            V_DS_ROTEIRO_CONTRATO:=NULL;
    
        END;	                        
    
        V_DS_ROTEIRO_ENTREGA:=NVL(V_DS_ROTEIRO_CONTRATO, V_ESCOLHER_MELHOR_ROTEIRO_ENT);
    END;
    END IF;    
    


        IF V_NU_ORDEM_VENDA IS NULL 
        OR V_NU_ORDEM_VENDA = '0' 
        OR V_NU_ORDEM_VENDA = '0         ' 
        OR V_NU_ORDEM_VENDA = '          '
        OR V_NU_ORDEM_VENDA = '' 
        OR V_NU_ORDEM_VENDA = ' ' THEN 
 
        V_CD_BLOQUEIO_REMESSA:=NULL;
        V_CD_BLOQUEIO_REMESSA_ITEM:=NULL;
        
        ELSE 
        
        BEGIN 
            SELECT 
             CD_BLOQUEIO_REMESSA, CD_BLOQUEIO_REMESSA_ITEM        
            INTO  V_CD_BLOQUEIO_REMESSA, V_CD_BLOQUEIO_REMESSA_ITEM
            FROM (
        
            SELECT 
             PED.CD_BLOQUEIO_REMESSA 
            , PED.CD_BLOQUEIO_REMESSA_ITEM

            FROM VND.PEDIDO PED
            WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
            PED.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
            AND PED.CD_PRODUTO_SAP = C_LINHA.CD_PRODUTO_SAP
            AND PED.CD_BLOQUEIO_REMESSA_ITEM IS NOT NULL
               AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
                FROM VND.PEDIDO PIT 
                WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
                AND PIT.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)            
            
            AND ROWNUM=1
            UNION 
            SELECT 
             PED.CD_BLOQUEIO_REMESSA 
            , PED.CD_BLOQUEIO_REMESSA_ITEM

            FROM VND.PEDIDO PED
            WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
            PED.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
            AND PED.CD_PRODUTO_SAP = C_LINHA.CD_PRODUTO_SAP
            AND PED.CD_BLOQUEIO_REMESSA_ITEM IS NULL
                AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
                FROM VND.PEDIDO PIT 
                WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
                AND PIT.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)
            AND ROWNUM=1 
            )
            WHERE ROWNUM=1
            ORDER BY CD_BLOQUEIO_REMESSA_ITEM
            ;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
                BEGIN
               V_CD_BLOQUEIO_REMESSA:=NULL;
               V_CD_BLOQUEIO_REMESSA_ITEM:=NULL;
               
                END;
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 027B - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END;                
    
        END IF;

        V_ESCOLHER_MELHOR_BLOQ_REMESSA:=V_CD_BLOQUEIO_REMESSA_ITEM;
         
         
    
        BEGIN
        UPDATE VND.ELO_CARTEIRA SET
             DS_ROTEIRO_ENTREGA = NVL(V_DS_ROTEIRO_ENTREGA, DS_ROTEIRO_ENTREGA)
            ,CD_USUARIO_REFRESH = V_CD_USUARIO_REFRESH
            ,CD_BLOQUEIO_REMESSA_ITEM =  V_ESCOLHER_MELHOR_BLOQ_REMESSA
            ,DH_REFRESH = CURRENT_DATE
        WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
        COMMIT;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 026 - '
            --|| SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

        WHEN OTHERS THEN 
            BEGIN
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 027 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
       
        END;

        
    /*      
            
    BEGIN
        PD_CELL_ATT_UNDO_UPROT(C_LINHA.CD_ELO_CARTEIRA);
    COMMIT;
    EXCEPTION 
    
    WHEN OTHERS THEN 
        BEGIN
        --v_status:=NULL;
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 028'
        || SQLCODE || ' -ERROR- ' || SQLERRM );
        V_TRAVA:='S';
        END;
    END;           
            
    */
            
    BEGIN
    
    PU_CHECK_STATUS_CELL(
            C_LINHA.CD_ELO_CARTEIRA,
            V_RET_CD_ELO_STATUS,
            V_RET_SG_STATUS,
            V_RET_ERRO,
            V_RET_RETORNO);
    COMMIT;
    v_status:=V_RET_SG_STATUS;
    
    EXCEPTION 
    
    WHEN OTHERS THEN 
        BEGIN
        v_status:=NULL;
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 028'
        || SQLCODE || ' -ERROR- ' || SQLERRM );
        V_TRAVA:='S';
        END;
    END;
            
    
    
    BEGIN


    -- ###
    IF v_status = 'CLOOK' AND C_LINHA.QT_AGENDADA_CONFIRMADA > 0 THEN
    
--        IF C_LINHA.CD_TIPO_AGENDAMENTO = V_ST_REPLAN THEN 
--            V_QUANTIDADE_AGENDADA_REPLAN:= C_LINHA.QT_PROGRAMADA;
--        ELSE
            V_QUANTIDADE_AGENDADA_REPLAN:= C_LINHA.QT_AGENDADA_CONFIRMADA;
--        END IF;
        
    
        IF C_LINHA.CD_INCOTERMS = 'CIF' THEN 
        BEGIN
            UPDATE VND.ELO_CARTEIRA
            SET 
                CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAFIN--,-- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN'),
                --CD_STATUS_TORRE_FRETES = NVL(CD_STATUS_TORRE_FRETES, V_ST_TF_CANEW), --VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW'),
                --DH_LIBERACAO_TORRE_FRETES = NVL(DH_LIBERACAO_TORRE_FRETES, CURRENT_DATE),
                --SG_DESTINO_BACKLOG_CIF = NVL(SG_DESTINO_BACKLOG_CIF, 'CSHIP'),
                --QT_AGENDADA_CONFIRMADA = V_QUANTIDADE_AGENDADA_REPLAN
            WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA
            AND CD_TIPO_AGENDAMENTO IN (22, 23, 24)
             ;
            -- ##
--                    UPDATE VND.ELO_CARTEIRA  
--                    SET CD_STATUS_TORRE_FRETES = VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW')
--                    WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;

            COMMIT;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 029 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

            WHEN OTHERS THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 030 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
            
        END;
        
        ELSE
        
        BEGIN
            UPDATE VND.ELO_CARTEIRA
            SET 
                CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAFIN--,-- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN'),
                --CD_STATUS_TORRE_FRETES = NULL, --VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW'),
                --DH_LIBERACAO_TORRE_FRETES = NULL,
                --SG_DESTINO_BACKLOG_CIF = NULL,
                --QT_AGENDADA_CONFIRMADA = V_QUANTIDADE_AGENDADA_REPLAN
            WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA
            AND CD_TIPO_AGENDAMENTO IN (22,23,24);
            -- ##
--                    UPDATE VND.ELO_CARTEIRA  
--                    SET CD_STATUS_TORRE_FRETES = VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW')
--                    WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;

            COMMIT;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 029B - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

            WHEN OTHERS THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 030B - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
            
        END;
        
        
        END IF;
        
    ELSE
    
        IF (C_LINHA.CD_TIPO_AGENDAMENTO =  V_ST_REPLAN) THEN 
                    --START TREATMENT LIKE REPLAN
            BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO-- , -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                --CD_STATUS_TORRE_FRETES = NULL,
                --DH_LIBERACAO_TORRE_FRETES = NULL,
                --SG_DESTINO_BACKLOG_CIF = NULL,
                --QT_AGENDADA_CONFIRMADA = NULL, --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                --QT_AGENDADA_CELULA = NULL --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
                COMMIT;
                
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 031REPL - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

                WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 032REPL - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

            END;
        ELSE
        
            BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO --, -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                --CD_STATUS_TORRE_FRETES = NULL,
                --DH_LIBERACAO_TORRE_FRETES = NULL,
                --SG_DESTINO_BACKLOG_CIF = NULL
                WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
                COMMIT;
                
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 031 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

                WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 032 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

            END;
        
        
        
        END IF;
        
        
        
        
        
        
    END IF;
    -- ##
    END;

    IF C_LINHA.CD_INCOTERMS = 'CIF' THEN --INSERIR AQUI 
    BEGIN                                   --INSERIR AQUI
    
    ---HERE ADDING THE GROUPING 
    BEGIN
    PU_CARTEIRA_GROUPING(
    C_LINHA.CD_ELO_CARTEIRA,
    V_CONFIRM
    );
    COMMIT;
    EXCEPTION 
    
    WHEN OTHERS THEN 
        BEGIN
        
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 033 - '
        || SQLCODE || ' -ERROR- ' || SQLERRM );
        V_TRAVA:='S';
        END;        
    
    END;

    --BIG EXCEPTION IN CASE OF THE GROUPING HAVE SOME CELL STATUS NOT CLOOK
    
    --IF NOT(v_status = 'CLOOK') THEN
        BEGIN 
            SELECT CD_ELO_CARTEIRA_GROUPING INTO V_CD_GROUPINGNLIBERADO 
            FROM VND.ELO_CARTEIRA 
            WHERE 
            CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA 
            AND ROWNUM =1 ;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
        V_CD_GROUPINGNLIBERADO:=NULL;
        WHEN OTHERS THEN 
        V_CD_GROUPINGNLIBERADO:=NULL;
        END;
        
        IF V_CD_GROUPINGNLIBERADO IS NOT NULL THEN 
        
            BEGIN 
                 
                SELECT COUNT(1) INTO V_QT_CD_STATUS_CEL
                FROM 
                    (
                    SELECT NVL(CD_STATUS_CEL_FINAL, 0) --INTO V_QT_CD_STATUS_CEL 
                    FROM VND.ELO_CARTEIRA 
                    WHERE 
                    CD_ELO_CARTEIRA_GROUPING = V_CD_GROUPINGNLIBERADO
                    GROUP BY  NVL(CD_STATUS_CEL_FINAL,0)
                    );
                
                
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            V_CD_GROUPINGNLIBERADO:=NULL;
            WHEN OTHERS THEN 
            V_CD_GROUPINGNLIBERADO:=NULL;
            END;

        
            IF V_QT_CD_STATUS_CEL > 1 THEN
            
                IF (C_LINHA.CD_TIPO_AGENDAMENTO =  V_ST_REPLAN) THEN 
       
                    BEGIN
                    UPDATE VND.ELO_CARTEIRA
                    SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO--,  -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                    --CD_STATUS_TORRE_FRETES = NULL,
                    --DH_LIBERACAO_TORRE_FRETES = NULL,
                    --SG_DESTINO_BACKLOG_CIF = NULL,
                   --QT_AGENDADA_CONFIRMADA = NULL--, --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                   -- QT_AGENDADA_CELULA = NULL  --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                    WHERE CD_ELO_CARTEIRA_GROUPING = V_CD_GROUPINGNLIBERADO;
                    COMMIT;
                    EXCEPTION 
                        WHEN NO_DATA_FOUND THEN 
                        BEGIN
                        V_TRAVA:='S';
                        END;
                    WHEN OTHERS THEN 
                        BEGIN
                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;                   
                    
                    END;
                ELSE 
                
                BEGIN
                    UPDATE VND.ELO_CARTEIRA
                    SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO--,  -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                    --CD_STATUS_TORRE_FRETES = NULL,
                    --DH_LIBERACAO_TORRE_FRETES = NULL,
                    --SG_DESTINO_BACKLOG_CIF = NULL
                    WHERE CD_ELO_CARTEIRA_GROUPING = V_CD_GROUPINGNLIBERADO;
                    COMMIT;
                    EXCEPTION 
                        WHEN NO_DATA_FOUND THEN 
                        BEGIN
                        V_TRAVA:='S';
                        END;
                    WHEN OTHERS THEN 
                        BEGIN
                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;                   
                    
                    END;
                
                END IF;
                
                
                
                
            END IF;    
            
        END IF;
    
        END;    --INSERIR AQUI 
        END IF;  -- INSERIR AQUI
    
        --END IF;
            

        END;
        END LOOP;

        CLOSE C_CARTEIRA;

        OPEN P_RETORNO FOR
        SELECT '1' AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
            
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;

    END PU_CELL_ATTENDANCE_UPDATE_LAST;

    PROCEDURE PU_CELL_ATTENDANCE_UPDATE(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_CD_SALES_DISTRICT             IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_DISTRICT%TYPE DEFAULT NULL,
        P_CD_SALES_OFFICE               IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_OFFICE%TYPE DEFAULT NULL,
        P_CD_SALES_GROUP                IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)
    IS

        V_CD_ITEM_PEDIDO                        VND.PEDIDO.CD_ITEM_PEDIDO%TYPE;
        V_DS_ROTEIRO_ENTREGA                    VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;
        V_NU_QUANTIDADE                         VND.PEDIDO.NU_QUANTIDADE%TYPE;
        V_NU_QUANTIDADE_ENTREGUE                VND.PEDIDO.NU_QUANTIDADE_ENTREGUE%TYPE;
        V_NU_QUANTIDADE_SALDO                   VND.PEDIDO.NU_QUANTIDADE_SALDO%TYPE;
        V_CD_MOTIVO_RECUSA                      VND.ITEM_CONTRATO.CD_MOTIVO_RECUSA%TYPE;
        V_CD_BLOQUEIO_REMESSA                   VND.PEDIDO.CD_BLOQUEIO_REMESSA%TYPE;
        V_CD_BLOQUEIO_REMESSA_ITEM              VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
        V_CD_BLOQUEIO_FATURAMENTO               VND.PEDIDO.CD_BLOQUEIO_FATURAMENTO%TYPE;
        V_CD_BLOQUEIO_FATURAMENTO_ITEM          VND.ITEM_CONTRATO.CD_BLOQUEIO_FATURAMENTO_ITEM%TYPE;
        V_CD_BLOQUEIO_CREDITO                   VND.PEDIDO.CD_BLOQUEIO_CREDITO%TYPE;
        V_DS_CREDIT_BLOCK_REASON                VND.PEDIDO.DS_CREDIT_BLOCK_REASON%TYPE;
        V_CD_USUARIO_REFRESH                    VND.ELO_CARTEIRA.CD_USUARIO_REFRESH%TYPE;
        V_NU_ORDEM_VENDA                        VND.PEDIDO.NU_ORDEM_VENDA%TYPE;
        V_CD_CONTRATO                           VND.CONTRATO.CD_CONTRATO%TYPE;
        V_CONFIRM                               T_CURSOR;
        
        V_NU_ORDEM_VENDA_FR_CART                        VND.ELO_CARTEIRA.NU_ORDEM_VENDA%TYPE;
        V_CD_ITEM_PEDIDO_FR_CART                        VND.ELO_CARTEIRA.CD_ITEM_PEDIDO%TYPE;
        

        v_count                 NUMBER;
        iConta                  NUMBER;
        iContaItem              NUMBER;
        v_status                VARCHAR2(10);
        V_QT_AG_CONFIRMADA      VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE;
        V_TRAVA                 VARCHAR2(1):='N';
        V_ACHEI_OV_ERA_BRANCO   VARCHAR2(10):='CARTEIRA';
        
        V_RET_CD_ELO_STATUS                 VND.ELO_STATUS.CD_ELO_STATUS%TYPE;
        V_RET_SG_STATUS                      VND.ELO_STATUS.SG_STATUS%TYPE;
        V_RET_ERRO                           VARCHAR2(1);
        V_RET_RETORNO                        T_CURSOR;
        
        V_ST_CS_CAFIN  VND.ELO_CARTEIRA.CD_STATUS_CUSTOMER_SERVICE%TYPE; 
        V_ST_TF_CANEW  VND.ELO_CARTEIRA.CD_STATUS_TORRE_FRETES%TYPE;
        V_ST_CS_CAPRO  VND.ELO_CARTEIRA.CD_STATUS_CUSTOMER_SERVICE%TYPE; 
        V_CD_GROUPINGNLIBERADO VND.ELO_CARTEIRA.CD_ELO_CARTEIRA_GROUPING%TYPE;
        V_QT_CD_STATUS_CEL  NUMBER;
        V_ST_REPLAN    VND.ELO_STATUS.CD_ELO_STATUS%TYPE:=VND.GX_ELO_COMMON.fx_elo_status('TIPAG', 'REPLAN');  --25 DEV
        V_QUANTIDADE_AGENDADA_REPLAN VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE;
        V_ESCOLHER_MELHOR_ROTEIRO_ENT        VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;
        V_DS_ROTEIRO_CONTRATO    VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;
        V_DS_ROTEIRO_PROTOCOLO    VND.PEDIDO.DS_ROTEIRO_ENTREGA%TYPE;

        V_ESCOLHER_MELHOR_BLOQ_REMESSA        VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
        V_DS_BLOQUEIO_REMESSA_CONTRATO    VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
        V_DS_BLOQUEIO_REMESSA_PEDIDO    VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;




        CURSOR C_CARTEIRA IS
        
        WITH CTE_AGENDAMENTO AS 
        (
        SELECT AGE.CD_ELO_AGENDAMENTO , AGE.CD_ELO_STATUS
        FROM VND.ELO_AGENDAMENTO AGE
        WHERE 
        AGE.CD_ELO_STATUS NOT IN (VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGENC'))
        AND (P_CD_WEEK IS NULL OR AGE.CD_WEEK = P_CD_WEEK)
        AND (P_CD_POLO IS NULL OR AGE.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR AGE.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR AGE.CD_MACHINE = P_CD_MACHINE)
        
        )
        
        
        SELECT DISTINCT
            CD_ELO_CARTEIRA
            ,EC.NU_ORDEM_VENDA
            ,CD_ITEM_PEDIDO
            ,IC_FA
            ,IC_EXPORT
            ,QT_SALDO_REFRESH
            ,CD_MOTIVO_RECUSA
            ,CD_BLOQUEIO_ENTREGA
            ,DH_VENCIMENTO_PEDIDO 
            ,DS_CREDIT_BLOCK_REASON 
            ,CD_INCOTERMS 
            ,IC_COOPERATIVE
            ,DS_ROTEIRO_ENTREGA
            ,NU_CONTRATO_SAP
            ,QT_AGENDADA_CONFIRMADA
            ,CD_BLOQUEIO_REMESSA
            ,CD_BLOQUEIO_REMESSA_ITEM
            ,CD_BLOQUEIO_FATURAMENTO
            ,CD_BLOQUEIO_FATURAMENTO_ITEM
            ,CD_BLOQUEIO_CREDITO
            ,CD_ITEM_CONTRATO
            ,NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0)  QT_AGENDADA_PROTOCOLO
            ,EC.CD_PRODUTO_SAP
            ,EC.CD_TIPO_AGENDAMENTO
            ,EC.QT_AGENDADA
            ,EC.QT_PROGRAMADA
        FROM VND.ELO_CARTEIRA EC
        INNER JOIN CTE_AGENDAMENTO EA 
        ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        WHERE
        (((EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL OR EC.QT_AGENDADA_CONFIRMADA >= 0)))                                   -- SOLICITACAO RONIE 2018-01-12
        --(EC.QT_AGENDADA_CONFIRMADA IS NOT NULL AND EC.QT_AGENDADA_CONFIRMADA > 0) -- SOLICITACAO RONIE 2018-01-12
        AND (
        (EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG') FROM DUAL) OR
                EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE') FROM DUAL))
                OR EC.CD_TIPO_AGENDAMENTO = VND.GX_ELO_COMMON.fx_elo_status('TIPAG', 'REPLAN')
                )
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)
        
        UNION 
        SELECT DISTINCT
            CD_ELO_CARTEIRA
            ,EC.NU_ORDEM_VENDA
            ,CD_ITEM_PEDIDO
            ,IC_FA
            ,IC_EXPORT
            ,QT_SALDO_REFRESH
            ,CD_MOTIVO_RECUSA
            ,CD_BLOQUEIO_ENTREGA
            ,DH_VENCIMENTO_PEDIDO 
            ,DS_CREDIT_BLOCK_REASON 
            ,EC.CD_INCOTERMS 
            ,IC_COOPERATIVE
            ,DS_ROTEIRO_ENTREGA
            ,NU_CONTRATO_SAP
            ,QT_AGENDADA_CONFIRMADA
            ,CD_BLOQUEIO_REMESSA
            ,CD_BLOQUEIO_REMESSA_ITEM
            ,CD_BLOQUEIO_FATURAMENTO
            ,CD_BLOQUEIO_FATURAMENTO_ITEM
            ,CD_BLOQUEIO_CREDITO
            ,CD_ITEM_CONTRATO
            ,NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0)  QT_AGENDADA_PROTOCOLO
            ,EC.CD_PRODUTO_SAP
            ,EC.CD_TIPO_AGENDAMENTO
            ,EC.QT_AGENDADA
            ,EC.QT_PROGRAMADA
        FROM VND.ELO_CARTEIRA EC
        INNER JOIN CTE_AGENDAMENTO EA 
        ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_ITEM ITEM ON EAS.CD_ELO_AGENDAMENTO_SUPERVISOR = ITEM.CD_ELO_AGENDAMENTO_SUPERVISOR
        WHERE
        NVL(EC.QT_AGENDADA_CONFIRMADA,0) >= 0 
        AND EC.CD_TIPO_AGENDAMENTO IN (22,23,24)
        AND ITEM.IC_ADICAO = 'S'
        AND (EA.CD_ELO_STATUS IN (6)) 
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)        
        
        ;

        TYPE carteira_r IS RECORD
        (

            CD_ELO_CARTEIRA         VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
            NU_ORDEM_VENDA          VND.ELO_CARTEIRA.NU_ORDEM_VENDA%TYPE,
            CD_ITEM_PEDIDO          VND.ELO_CARTEIRA.CD_ITEM_PEDIDO%TYPE,
            IC_FA                   VND.ELO_CARTEIRA.IC_FA%TYPE,
            IC_EXPORT               VND.ELO_CARTEIRA.IC_EXPORT%TYPE,
            QT_SALDO_REFRESH        VND.ELO_CARTEIRA.QT_SALDO_REFRESH%TYPE,
            CD_MOTIVO_RECUSA        VND.ELO_CARTEIRA.CD_MOTIVO_RECUSA%TYPE,
            CD_BLOQUEIO_ENTREGA     VND.ELO_CARTEIRA.CD_BLOQUEIO_ENTREGA%TYPE,
            DH_VENCIMENTO_PEDIDO    VND.ELO_CARTEIRA.DH_VENCIMENTO_PEDIDO%TYPE,
            DS_CREDIT_BLOCK_REASON  VND.ELO_CARTEIRA.DS_CREDIT_BLOCK_REASON%TYPE,
            CD_INCOTERMS            VND.ELO_CARTEIRA.CD_INCOTERMS%TYPE,
            IC_COOPERATIVE          VND.ELO_CARTEIRA.IC_COOPERATIVE%TYPE,
            DS_ROTEIRO_ENTREGA      VND.ELO_CARTEIRA.DS_ROTEIRO_ENTREGA%TYPE,
            NU_CONTRATO_SAP         VND.ELO_CARTEIRA.NU_CONTRATO_SAP%TYPE,
            QT_AGENDADA_CONFIRMADA  VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE,
            CD_BLOQUEIO_REMESSA     VND.ELO_CARTEIRA.CD_BLOQUEIO_REMESSA%TYPE,
            CD_BLOQUEIO_REMESSA_ITEM VND.ELO_CARTEIRA.CD_BLOQUEIO_REMESSA_ITEM%TYPE,
            CD_BLOQUEIO_FATURAMENTO VND.ELO_CARTEIRA.CD_BLOQUEIO_FATURAMENTO%TYPE,
            CD_BLOQUEIO_FATURAMENTO_ITEM VND.ELO_CARTEIRA.CD_BLOQUEIO_FATURAMENTO_ITEM%TYPE,
            CD_BLOQUEIO_CREDITO     VND.ELO_CARTEIRA.CD_BLOQUEIO_CREDITO%TYPE,
            CD_ITEM_CONTRATO        VND.ELO_CARTEIRA.CD_ITEM_CONTRATO%TYPE,
            QT_AGENDADA_PROTOCOLO   VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE,
            CD_PRODUTO_SAP          VND.ELO_CARTEIRA.CD_PRODUTO_SAP%TYPE,
            CD_TIPO_AGENDAMENTO     VND.ELO_CARTEIRA.CD_TIPO_AGENDAMENTO%TYPE,
            QT_AGENDADA             VND.ELO_CARTEIRA.QT_AGENDADA%TYPE,
            QT_PROGRAMADA           VND.ELO_CARTEIRA.QT_PROGRAMADA%TYPE
        );

    TYPE carteira_t IS TABLE OF carteira_r;
    C_LINHA carteira_t;

    v_limit                     NUMBER := 10000;
    v_count_linha                     NUMBER := 0;

    V_CART_QT_LINHAS      NUMBER; 
    V_LINHA                 PLS_INTEGER;
    V_PEDEXIST NUMBER;       
    
    --V_TEM_GROUP NUMBER:=0;
    


        -- LINHA DO CURSOR DA CARTEIRA
        --C_LINHA C_CARTEIRA%ROWTYPE;

        BEGIN
        
            V_ST_CS_CAFIN:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN');
            V_ST_TF_CANEW:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW');
            V_ST_CS_CAPRO:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO'); 

/*            
            BEGIN

            PU_ULTIMA_PARA_CEL_STATUS(        
            P_CD_POLO ,
            P_CD_CENTRO_EXPEDIDOR,
            P_CD_MACHINE ,
            P_CD_WEEK ,
            P_RETORNO  );

            EXCEPTION 

            WHEN OTHERS THEN 
                BEGIN
                v_status:=NULL;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 088'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END;            
*/            
        
        
            BEGIN
            UPDATE VND.ELO_CARTEIRA EC
            SET EC.CD_STATUS_CUSTOMER_SERVICE = V_ST_TF_CANEW,
            NU_PROTOCOLO = 'TOCUST' || TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH:MI')
            WHERE 
            EC.QT_AGENDADA_CONFIRMADA > 0 
            AND EC.CD_STATUS_CUSTOMER_SERVICE IS NULL
            AND EXISTS (SELECT 1  
                    FROM VND.ELO_AGENDAMENTO AGE
                    WHERE 
                    AGE.CD_ELO_STATUS  IN (VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG'),VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE'))
                    AND AGE.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
                    AND (P_CD_WEEK IS NULL OR AGE.CD_WEEK = P_CD_WEEK)
                    AND (P_CD_POLO IS NULL OR AGE.CD_POLO = P_CD_POLO)
                    AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR AGE.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
                    AND (P_CD_MACHINE IS NULL OR AGE.CD_MACHINE = P_CD_MACHINE)
                    );
             
            COMMIT;

            EXCEPTION 
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 001b - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                --V_TRAVA:='S';
                END; 
            END;
        

        OPEN    C_CARTEIRA;                               
        FETCH   C_CARTEIRA BULK COLLECT INTO C_LINHA LIMIT v_limit;
        CLOSE   C_CARTEIRA;

        V_CART_QT_LINHAS:=C_LINHA.COUNT;
        V_LINHA:=1;


        --OPEN C_CARTEIRA;
        LOOP
        BEGIN
        --FETCH C_CARTEIRA into C_LINHA;
        --    EXIT WHEN C_CARTEIRA%notfound;
        
        EXIT WHEN v_count_linha >= V_CART_QT_LINHAS;

            V_CD_ITEM_PEDIDO_FR_CART := C_LINHA(V_LINHA).CD_ITEM_PEDIDO;
            V_NU_ORDEM_VENDA_FR_CART := C_LINHA(V_LINHA).NU_ORDEM_VENDA;
            V_NU_ORDEM_VENDA:=V_NU_ORDEM_VENDA_FR_CART;
            V_CD_ITEM_PEDIDO:=V_CD_ITEM_PEDIDO_FR_CART;
            V_ACHEI_OV_ERA_BRANCO:='CARTEIRA';
            V_ESCOLHER_MELHOR_ROTEIRO_ENT:=C_LINHA(V_LINHA).DS_ROTEIRO_ENTREGA;
            V_ESCOLHER_MELHOR_BLOQ_REMESSA:=NULL;
            
            V_TRAVA:= 'N';
            
            BEGIN
            UPDATE VND.ELO_CARTEIRA
            SET NU_PROTOCOLO = 'INICI' || TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH:MI')
            WHERE 
            CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
            COMMIT;

            EXCEPTION 
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 001 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END; 
            END;
            
    BEGIN
    SELECT COUNT(1) INTO V_PEDEXIST 
    FROM VND.PEDIDO PED 
    WHERE NU_ORDEM_VENDA = C_LINHA(V_LINHA).NU_ORDEM_VENDA;
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
    BEGIN
    V_PEDEXIST:=0;
    C_LINHA(V_LINHA).NU_ORDEM_VENDA:=NULL;
    END;
    WHEN OTHERS THEN 
    BEGIN
    V_PEDEXIST:=0;
    C_LINHA(V_LINHA).NU_ORDEM_VENDA:=NULL;
    END;
     
    END;
    
    
    BEGIN
    SELECT COUNT(1) INTO V_PEDEXIST 
    FROM VND.ELO_AGENDAMENTO_WEEK PED
    INNER JOIN VND.ELO_CARTEIRA EXC 
    ON PED.CD_ELO_AGENDAMENTO_ITEM = EXC.CD_ELO_AGENDAMENTO_ITEM 
    WHERE EXC.CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
    BEGIN
        V_PEDEXIST:=0;
    END;
    WHEN OTHERS THEN 
    BEGIN
        V_PEDEXIST:=0;
    END;
     
    END;
    
    IF V_PEDEXIST = 0 THEN 
        BEGIN 
        UPDATE VND.ELO_CARTEIRA 
        SET CD_STATUS_CEL_FINAL = 63
        WHERE 
        CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA AND NVL(QT_AGENDADA_CONFIRMADA,0) = 0 ;
        COMMIT;
        EXCEPTION 
        WHEN OTHERS THEN 
                    RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 003A - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
        
        END;
    END IF;
    
            
            
-- #############################################################################################
-- SE A ORDEM DE VENDA NA CARTEIRA ESTIVER VAZIA, ATUALIZA ESSA INFORMAÇÃO TRAZENDO DO CONTRATO.
IF (C_LINHA(V_LINHA).NU_ORDEM_VENDA IS NULL 
OR TRIM(C_LINHA(V_LINHA).NU_ORDEM_VENDA) = '0' 
OR TRIM(C_LINHA(V_LINHA).NU_ORDEM_VENDA) IS NULL ) THEN
	BEGIN

		-- VERIFICAR SE EXISTE A ORDEM DE VENDA NA TABELA PEDIDO
		BEGIN 
		SELECT NVL(COUNT(PE.NU_ORDEM_VENDA), 0) INTO iConta
		FROM VND.PEDIDO PE
		WHERE PE.NU_CONTRATO_SAP = C_LINHA(V_LINHA).NU_CONTRATO_SAP
		AND PE.CD_ITEM_CONTRATO = C_LINHA(V_LINHA).CD_ITEM_CONTRATO
        AND PE.CD_PRODUTO_SAP = C_LINHA(V_LINHA).CD_PRODUTO_SAP;

		EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
			BEGIN
			iConta:=0;
			--RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 002 - '
			-- || SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END; 
		WHEN OTHERS THEN 

			BEGIN
			iConta:=0;
			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 003 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;                
		END;

		-- SE EXISTIR A ORDEM DE VENDA NA PEDIDO, ATUALIZA A CARTEIRA
		IF iConta > 0 THEN
		BEGIN
			BEGIN
			SELECT 
			PE.NU_ORDEM_VENDA, PE.CD_ITEM_PEDIDO
			INTO V_NU_ORDEM_VENDA, V_CD_ITEM_PEDIDO
			FROM VND.PEDIDO PE
			WHERE   
			PE.NU_CONTRATO_SAP = C_LINHA(V_LINHA).NU_CONTRATO_SAP
			AND  PE.CD_ITEM_CONTRATO = C_LINHA(V_LINHA).CD_ITEM_CONTRATO 
            AND PE.CD_PRODUTO_SAP = C_LINHA(V_LINHA).CD_PRODUTO_SAP
			AND ROWNUM=1;
			V_ACHEI_OV_ERA_BRANCO:='VEMPEDIDO';
			EXCEPTION 
			WHEN NO_DATA_FOUND THEN 
				BEGIN
				-- RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 004 - '
				--  || SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				V_ACHEI_OV_ERA_BRANCO:='SEMPEDIDO';
				END;
			WHEN OTHERS THEN 
				BEGIN
				RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO GROUPING - '
				|| SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				V_ACHEI_OV_ERA_BRANCO:='SEMPEDIDO';
				END;
			END;
		
               BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET NU_ORDEM_VENDA = V_NU_ORDEM_VENDA,
                CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
    
                WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA
             ;

            COMMIT;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 029 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

            WHEN OTHERS THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 030 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
            
        END;
        
        
        
        END;
		
        
        ELSE
			V_ACHEI_OV_ERA_BRANCO:='SEMPEDIDO';

		END IF;
	END;
		
END IF;    


IF  V_ACHEI_OV_ERA_BRANCO IS NOT NULL THEN  --= 'SEMPEDIDO'  THEN 
-- SE 'NAO' EXISTIR A ORDEM DE VENDA NA PEDIDO, ATUALIZA A CARTEIRA COM OS DADOS DE BLOQUEIO DA CONTRATO
-- ATUALIZA NA CARTEIRA A ORDEM SE ESTIVER EM BRANCO E OS VALORES DE BLOQUEIO, VINDOS DO CONTRATO
	BEGIN 
	SELECT 
	CD_CONTRATO
	, DS_ROTEIRO_ENTREGA
	, CD_BLOQUEIO_REMESSA
	, CD_BLOQUEIO_FATURAMENTO
	, CD_BLOQUEIO_CREDITO
	, DS_CREDIT_BLOCK_REASON
	INTO 
	V_CD_CONTRATO
	, V_DS_ROTEIRO_ENTREGA
	, V_CD_BLOQUEIO_REMESSA
	, V_CD_BLOQUEIO_FATURAMENTO
	, V_CD_BLOQUEIO_CREDITO
	, V_DS_CREDIT_BLOCK_REASON
	FROM 
	VND.CONTRATO PE
	WHERE 
	PE.NU_CONTRATO_SAP = C_LINHA(V_LINHA).NU_CONTRATO_SAP 
	AND EXISTS (SELECT 1 
	FROM VND.ITEM_CONTRATO IC 
	WHERE IC.CD_CONTRATO = PE.CD_CONTRATO 
	AND IC.CD_ITEM_CONTRATO = C_LINHA(V_LINHA).CD_ITEM_CONTRATO )
	AND ROWNUM=1;
	EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		BEGIN
			UPDATE VND.ELO_CARTEIRA SET CD_STATUS_CEL_FINAL = 60 
			WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
			COMMIT;
			--RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 007 - '
			--|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
		END;
	WHEN OTHERS THEN 
		BEGIN
			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO GROUPING - 007 B'
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
		END;

	END;	                        

	IF V_TRAVA = 'N' THEN 
    
        V_ESCOLHER_MELHOR_ROTEIRO_ENT:=NVL(V_DS_ROTEIRO_ENTREGA, V_ESCOLHER_MELHOR_ROTEIRO_ENT);
        --V_ESCOLHER_MELHOR_BLOQ_REMESSA:=NVL(V_CD_BLOQUEIO_REMESSA, V_ESCOLHER_MELHOR_BLOQ_REMESSA);
        
		BEGIN
		UPDATE VND.ELO_CARTEIRA
		SET --DS_ROTEIRO_ENTREGA = V_DS_ROTEIRO_ENTREGA, 
		CD_BLOQUEIO_REMESSA = V_CD_BLOQUEIO_REMESSA,  
		CD_BLOQUEIO_FATURAMENTO = V_CD_BLOQUEIO_FATURAMENTO, 
		CD_BLOQUEIO_CREDITO = V_CD_BLOQUEIO_CREDITO, 
		DS_CREDIT_BLOCK_REASON = V_DS_CREDIT_BLOCK_REASON
		WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
		COMMIT;
        V_ACHEI_OV_ERA_BRANCO:='ATCONTRATO';
		EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 008 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;
		WHEN OTHERS THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 009 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;

		END;

	END IF;
			--BUSCA DA ITEM_PRODUTO O BLOQUEIO_REMESSA_ITEM E O MOTIVO RECUSA

	BEGIN 
	SELECT COUNT(IC.CD_CONTRATO) INTO iContaItem
	FROM VND.ITEM_CONTRATO IC
	WHERE IC.CD_CONTRATO = V_CD_CONTRATO
	AND IC.CD_ITEM_CONTRATO = C_LINHA(V_LINHA).CD_ITEM_CONTRATO;

	EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
		BEGIN
		iContaItem:=0;
		-- RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 010 - '
		--  || SQLCODE || ' -ERROR- ' || SQLERRM );
		V_TRAVA:='S';
		END;
	WHEN OTHERS THEN 
		BEGIN
		iContaItem:=0;
		RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 011 - '
		|| SQLCODE || ' -ERROR- ' || SQLERRM );
		V_TRAVA:='S';
		END;

	END;                    


	IF iContaItem > 0 THEN
		BEGIN 
		SELECT VND.ITEM_CONTRATO.CD_BLOQUEIO_FATURAMENTO_ITEM, VND.ITEM_CONTRATO.CD_MOTIVO_RECUSA
		INTO V_CD_BLOQUEIO_FATURAMENTO_ITEM, V_CD_MOTIVO_RECUSA
		FROM VND.ITEM_CONTRATO
		WHERE CD_CONTRATO = V_CD_CONTRATO
		AND CD_ITEM_CONTRATO = C_LINHA(V_LINHA).CD_ITEM_CONTRATO AND ROWNUM=1;
		EXCEPTION 
		WHEN NO_DATA_FOUND THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 012 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;
		WHEN OTHERS THEN 
			BEGIN

			RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 013 - '
			|| SQLCODE || ' -ERROR- ' || SQLERRM );
			V_TRAVA:='S';
			END;
		END;

		IF V_TRAVA = 'N' THEN 
		-- UPDATE ELO_CARTEIRA
			BEGIN
			UPDATE VND.ELO_CARTEIRA SET
			CD_MOTIVO_RECUSA = V_CD_MOTIVO_RECUSA
			,CD_BLOQUEIO_FATURAMENTO_ITEM = V_CD_BLOQUEIO_FATURAMENTO_ITEM
			WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
			COMMIT;
			EXCEPTION 
			WHEN NO_DATA_FOUND THEN 
				BEGIN

				RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 014 - '
				|| SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				END;
			WHEN OTHERS THEN 
				BEGIN

				RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 015 - '
				|| SQLCODE || ' -ERROR- ' || SQLERRM );
				V_TRAVA:='S';
				END;

			END;
		END IF;

	END IF;

END IF;

    -- #############################################################################################

    IF V_ACHEI_OV_ERA_BRANCO = 'VEMPEDIDO' OR V_ACHEI_OV_ERA_BRANCO = 'CARTEIRA' THEN 
    BEGIN
            BEGIN    
            SELECT NVL(count(cd_pedido),0) 
            INTO v_count
            FROM VND.PEDIDO 
            WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
            NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
            AND CD_PRODUTO_SAP = C_LINHA(V_LINHA).CD_PRODUTO_SAP;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
                BEGIN
                v_count:=0;
                --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 022 - '
                --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            WHEN OTHERS THEN 
           
                BEGIN
                v_count:=0;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 023 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
           
            END;    
            

            IF v_count > 0 THEN
                BEGIN 
                SELECT 
                 PED.DS_ROTEIRO_ENTREGA 
                , PED.NU_QUANTIDADE
                , PED.NU_QUANTIDADE_ENTREGUE
                , PED.NU_QUANTIDADE_SALDO 
                , PED.CD_MOTIVO_RECUSA
                , PED.CD_BLOQUEIO_REMESSA 
                , PED.CD_BLOQUEIO_REMESSA_ITEM
                , PED.CD_BLOQUEIO_FATURAMENTO
                , PED.CD_BLOQUEIO_FATURAMENTO_ITEM
                , PED.CD_BLOQUEIO_CREDITO
                , PED.DS_CREDIT_BLOCK_REASON
                , 0
                INTO
                  V_DS_ROTEIRO_ENTREGA 
                , V_NU_QUANTIDADE
                , V_NU_QUANTIDADE_ENTREGUE
                , V_NU_QUANTIDADE_SALDO 
                , V_CD_MOTIVO_RECUSA
                , V_CD_BLOQUEIO_REMESSA 
                , V_CD_BLOQUEIO_REMESSA_ITEM
                , V_CD_BLOQUEIO_FATURAMENTO
                , V_CD_BLOQUEIO_FATURAMENTO_ITEM
                , V_CD_BLOQUEIO_CREDITO
                , V_DS_CREDIT_BLOCK_REASON
                , V_CD_USUARIO_REFRESH
                FROM VND.PEDIDO PED
                WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
                PED.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
                AND PED.CD_PRODUTO_SAP = C_LINHA(V_LINHA).CD_PRODUTO_SAP
                AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
                FROM VND.PEDIDO PIT 
                WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
                AND PIT.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)
                AND ROWNUM=1;
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                    BEGIN
                    
                    --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 024 - '
                    --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                WHEN OTHERS THEN 
                    BEGIN
                    
                    RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 025 - '
                    || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                
                END;

                IF V_TRAVA = 'N' THEN 
                -- UPDATE ELO_CARTEIRA
                V_ESCOLHER_MELHOR_ROTEIRO_ENT:=NVL(V_DS_ROTEIRO_ENTREGA, V_ESCOLHER_MELHOR_ROTEIRO_ENT);
                V_ESCOLHER_MELHOR_BLOQ_REMESSA:=NVL(V_CD_BLOQUEIO_REMESSA_ITEM, V_ESCOLHER_MELHOR_BLOQ_REMESSA);
                BEGIN
                UPDATE VND.ELO_CARTEIRA SET
                     --DS_ROTEIRO_ENTREGA = V_DS_ROTEIRO_ENTREGA
                    QT_PROGRAMADA_REFRESH = V_NU_QUANTIDADE
                    ,QT_ENTREGUE_REFRESH = V_NU_QUANTIDADE_ENTREGUE
                    ,QT_SALDO_REFRESH = V_NU_QUANTIDADE_SALDO
                    ,CD_MOTIVO_RECUSA = V_CD_MOTIVO_RECUSA
                    ,CD_BLOQUEIO_REMESSA = V_CD_BLOQUEIO_REMESSA
                    ,CD_BLOQUEIO_REMESSA_ITEM = V_CD_BLOQUEIO_REMESSA_ITEM
                    ,CD_BLOQUEIO_FATURAMENTO = V_CD_BLOQUEIO_FATURAMENTO
                    ,CD_BLOQUEIO_FATURAMENTO_ITEM = V_CD_BLOQUEIO_FATURAMENTO_ITEM
                    ,CD_BLOQUEIO_CREDITO = V_CD_BLOQUEIO_CREDITO
                    ,DS_CREDIT_BLOCK_REASON = V_DS_CREDIT_BLOCK_REASON
                    ,CD_USUARIO_REFRESH = V_CD_USUARIO_REFRESH
                    ,DH_REFRESH = CURRENT_DATE
                    ,CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
                    ,NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
                WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
                COMMIT;
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                    BEGIN
                    
                    --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 026 - '
                    --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                WHEN OTHERS THEN 
                    BEGIN
                    
                    RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 027 - '
                    || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    END;

                
                END;
                
                END IF;

            END IF;
         
     END;       
    END IF;

    -- ############# RULES FOR UPDATE STATUS ON ELO_CARTEIRA

    IF  V_TRAVA =  'N' and C_LINHA(V_LINHA).QT_AGENDADA_PROTOCOLO > 0 THEN  
    
        BEGIN
    
            BEGIN
            V_DS_ROTEIRO_PROTOCOLO:=FX_GET_ROTEIRO_ENTREGA(C_LINHA(V_LINHA).CD_ELO_CARTEIRA);
             
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            V_DS_ROTEIRO_PROTOCOLO:=NULL;
            
            WHEN OTHERS THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 028 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                V_DS_ROTEIRO_PROTOCOLO:=NULL;
                END;
            
            END;
            
            V_DS_ROTEIRO_ENTREGA:=NVL(V_DS_ROTEIRO_PROTOCOLO,V_ESCOLHER_MELHOR_ROTEIRO_ENT);
            
        END;
    
    END IF;            
    
    
    IF C_LINHA(V_LINHA).IC_COOPERATIVE = 'N' THEN 
    BEGIN
        BEGIN 
        SELECT 
        DS_ROTEIRO_ENTREGA 	INTO 	 V_DS_ROTEIRO_CONTRATO
        FROM 
        VND.CONTRATO PE
        WHERE 
        PE.NU_CONTRATO_SAP = C_LINHA(V_LINHA).NU_CONTRATO_SAP 
        AND EXISTS (SELECT 1 
        FROM VND.ITEM_CONTRATO IC 
        WHERE IC.CD_CONTRATO = PE.CD_CONTRATO 
        AND IC.CD_ITEM_CONTRATO = C_LINHA(V_LINHA).CD_ITEM_CONTRATO )
        AND ROWNUM=1;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            V_DS_ROTEIRO_CONTRATO:=NULL;
        WHEN OTHERS THEN 
            V_DS_ROTEIRO_CONTRATO:=NULL;
    
        END;	                        
    
        V_DS_ROTEIRO_ENTREGA:=NVL(V_DS_ROTEIRO_CONTRATO, V_ESCOLHER_MELHOR_ROTEIRO_ENT);
    END;
    END IF;    
    


        IF V_NU_ORDEM_VENDA IS NULL 
        OR V_NU_ORDEM_VENDA = '0' 
        OR V_NU_ORDEM_VENDA = '0         ' 
        OR V_NU_ORDEM_VENDA = '          '
        OR V_NU_ORDEM_VENDA = '' 
        OR V_NU_ORDEM_VENDA = ' ' THEN 
 
        V_CD_BLOQUEIO_REMESSA:=NULL;
        V_CD_BLOQUEIO_REMESSA_ITEM:=NULL;
        
        ELSE 
        
        BEGIN 
            SELECT 
             CD_BLOQUEIO_REMESSA, CD_BLOQUEIO_REMESSA_ITEM        
            INTO  V_CD_BLOQUEIO_REMESSA, V_CD_BLOQUEIO_REMESSA_ITEM
            FROM (
        
            SELECT 
             PED.CD_BLOQUEIO_REMESSA 
            , PED.CD_BLOQUEIO_REMESSA_ITEM

            FROM VND.PEDIDO PED
            WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
            PED.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
            AND PED.CD_PRODUTO_SAP = C_LINHA(V_LINHA).CD_PRODUTO_SAP
            AND PED.CD_BLOQUEIO_REMESSA_ITEM IS NOT NULL
               AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
                FROM VND.PEDIDO PIT 
                WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
                AND PIT.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)            
            
            AND ROWNUM=1
            UNION 
            SELECT 
             PED.CD_BLOQUEIO_REMESSA 
            , PED.CD_BLOQUEIO_REMESSA_ITEM

            FROM VND.PEDIDO PED
            WHERE --CD_ITEM_PEDIDO = V_CD_ITEM_PEDIDO
            PED.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA
            AND PED.CD_PRODUTO_SAP = C_LINHA(V_LINHA).CD_PRODUTO_SAP
            AND PED.CD_BLOQUEIO_REMESSA_ITEM IS NULL
                AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
                FROM VND.PEDIDO PIT 
                WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
                AND PIT.NU_ORDEM_VENDA = V_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)
            AND ROWNUM=1 
            )
            WHERE ROWNUM=1
            ORDER BY CD_BLOQUEIO_REMESSA_ITEM
            ;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
                BEGIN
               V_CD_BLOQUEIO_REMESSA:=NULL;
               V_CD_BLOQUEIO_REMESSA_ITEM:=NULL;
               
                END;
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 027B - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END;                
    
        END IF;

        V_ESCOLHER_MELHOR_BLOQ_REMESSA:=V_CD_BLOQUEIO_REMESSA_ITEM;
         
         
    
        BEGIN
        UPDATE VND.ELO_CARTEIRA SET
             DS_ROTEIRO_ENTREGA = NVL(V_DS_ROTEIRO_ENTREGA, DS_ROTEIRO_ENTREGA)
            ,CD_USUARIO_REFRESH = V_CD_USUARIO_REFRESH
            ,CD_BLOQUEIO_REMESSA_ITEM =  V_ESCOLHER_MELHOR_BLOQ_REMESSA
            ,DH_REFRESH = CURRENT_DATE
        WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
        COMMIT;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 026 - '
            --|| SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

        WHEN OTHERS THEN 
            BEGIN
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 027 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
       
        END;

        
    /*      
            
    BEGIN
        PD_CELL_ATT_UNDO_UPROT(C_LINHA.CD_ELO_CARTEIRA);
    COMMIT;
    EXCEPTION 
    
    WHEN OTHERS THEN 
        BEGIN
        --v_status:=NULL;
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 028'
        || SQLCODE || ' -ERROR- ' || SQLERRM );
        V_TRAVA:='S';
        END;
    END;           
            
    */
            
    BEGIN
    
    PU_CHECK_STATUS_CELL(
            C_LINHA(V_LINHA).CD_ELO_CARTEIRA,
            V_RET_CD_ELO_STATUS,
            V_RET_SG_STATUS,
            V_RET_ERRO,
            V_RET_RETORNO);
    COMMIT;
    v_status:=V_RET_SG_STATUS;
    
    EXCEPTION 
    
    WHEN OTHERS THEN 
        BEGIN
        v_status:=NULL;
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 028'
        || SQLCODE || ' -ERROR- ' || SQLERRM );
        V_TRAVA:='S';
        END;
    END;
            
    
    
    BEGIN


    -- ###
    IF v_status = 'CLOOK' AND C_LINHA(V_LINHA).QT_AGENDADA_CONFIRMADA > 0 THEN
    
--        IF C_LINHA.CD_TIPO_AGENDAMENTO = V_ST_REPLAN THEN 
--            V_QUANTIDADE_AGENDADA_REPLAN:= C_LINHA.QT_PROGRAMADA;
--        ELSE
            V_QUANTIDADE_AGENDADA_REPLAN:= C_LINHA(V_LINHA).QT_AGENDADA_CONFIRMADA;
--        END IF;
        
    
        IF C_LINHA(V_LINHA).CD_INCOTERMS = 'CIF' THEN 
        BEGIN
            UPDATE VND.ELO_CARTEIRA
            SET 
                CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAFIN--,-- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN'),
                --CD_STATUS_TORRE_FRETES = NVL(CD_STATUS_TORRE_FRETES, V_ST_TF_CANEW), --VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW'),
                --DH_LIBERACAO_TORRE_FRETES = NVL(DH_LIBERACAO_TORRE_FRETES, CURRENT_DATE),
                --SG_DESTINO_BACKLOG_CIF = NVL(SG_DESTINO_BACKLOG_CIF, 'CSHIP'),
                --QT_AGENDADA_CONFIRMADA = V_QUANTIDADE_AGENDADA_REPLAN
            WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA
            AND CD_TIPO_AGENDAMENTO IN (22, 23, 24)
             ;
            -- ##
--                    UPDATE VND.ELO_CARTEIRA  
--                    SET CD_STATUS_TORRE_FRETES = VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW')
--                    WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;

            COMMIT;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 029 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

            WHEN OTHERS THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 030 - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
            
        END;
        
        ELSE
        
        BEGIN
            UPDATE VND.ELO_CARTEIRA
            SET 
                CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAFIN--,-- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN'),
                --CD_STATUS_TORRE_FRETES = NULL, --VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW'),
                --DH_LIBERACAO_TORRE_FRETES = NULL,
                --SG_DESTINO_BACKLOG_CIF = NULL,
                --QT_AGENDADA_CONFIRMADA = V_QUANTIDADE_AGENDADA_REPLAN
            WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA
            AND CD_TIPO_AGENDAMENTO IN (22,23,24);
            -- ##
--                    UPDATE VND.ELO_CARTEIRA  
--                    SET CD_STATUS_TORRE_FRETES = VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW')
--                    WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;

            COMMIT;
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 029B - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;

            WHEN OTHERS THEN 
            BEGIN
            
            RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 030B - '
            || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            END;
            
        END;
        
        
        END IF;
        
    ELSE
    
        IF (C_LINHA(V_LINHA).CD_TIPO_AGENDAMENTO =  V_ST_REPLAN) THEN 
                    --START TREATMENT LIKE REPLAN
            BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO-- , -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                --CD_STATUS_TORRE_FRETES = NULL,
                --DH_LIBERACAO_TORRE_FRETES = NULL,
                --SG_DESTINO_BACKLOG_CIF = NULL,
                --QT_AGENDADA_CONFIRMADA = NULL, --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                --QT_AGENDADA_CELULA = NULL --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
                COMMIT;
                
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 031REPL - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

                WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 032REPL - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

            END;
        ELSE
        
            BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO --, -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                --CD_STATUS_TORRE_FRETES = NULL,
                --DH_LIBERACAO_TORRE_FRETES = NULL,
                --SG_DESTINO_BACKLOG_CIF = NULL
                WHERE CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA;
                COMMIT;
                
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 031 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

                WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 032 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;

            END;
        
        
        
        END IF;
        
        
        
        
        
        
    END IF;
    -- ##
    END;

    IF C_LINHA(V_LINHA).CD_INCOTERMS = 'CIF' THEN --INSERIR AQUI 
    BEGIN                                   --INSERIR AQUI
    
    ---HERE ADDING THE GROUPING 
    BEGIN
    PU_CARTEIRA_GROUPING(
    C_LINHA(V_LINHA).CD_ELO_CARTEIRA,
    V_CONFIRM
    );
    COMMIT;
    EXCEPTION 
    
    WHEN OTHERS THEN 
        BEGIN
        
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 033 - '
        || SQLCODE || ' -ERROR- ' || SQLERRM );
        V_TRAVA:='S';
        END;        
    
    END;

    --BIG EXCEPTION IN CASE OF THE GROUPING HAVE SOME CELL STATUS NOT CLOOK
    
    --IF NOT(v_status = 'CLOOK') THEN
        BEGIN 
            SELECT CD_ELO_CARTEIRA_GROUPING INTO V_CD_GROUPINGNLIBERADO 
            FROM VND.ELO_CARTEIRA 
            WHERE 
            CD_ELO_CARTEIRA = C_LINHA(V_LINHA).CD_ELO_CARTEIRA 
            AND ROWNUM =1 ;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
        V_CD_GROUPINGNLIBERADO:=NULL;
        WHEN OTHERS THEN 
        V_CD_GROUPINGNLIBERADO:=NULL;
        END;
        
        IF V_CD_GROUPINGNLIBERADO IS NOT NULL THEN 
        
            BEGIN 
                 
                SELECT COUNT(1) INTO V_QT_CD_STATUS_CEL
                FROM 
                    (
                    SELECT NVL(CD_STATUS_CEL_FINAL, 0) --INTO V_QT_CD_STATUS_CEL 
                    FROM VND.ELO_CARTEIRA 
                    WHERE 
                    CD_ELO_CARTEIRA_GROUPING = V_CD_GROUPINGNLIBERADO
                    GROUP BY  NVL(CD_STATUS_CEL_FINAL,0)
                    );
                
                
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
            V_CD_GROUPINGNLIBERADO:=NULL;
            WHEN OTHERS THEN 
            V_CD_GROUPINGNLIBERADO:=NULL;
            END;

        
            IF V_QT_CD_STATUS_CEL > 1 THEN
            
                IF (C_LINHA(V_LINHA).CD_TIPO_AGENDAMENTO =  V_ST_REPLAN) THEN 
       
                    BEGIN
                    UPDATE VND.ELO_CARTEIRA
                    SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO--,  -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                    --CD_STATUS_TORRE_FRETES = NULL,
                    --DH_LIBERACAO_TORRE_FRETES = NULL,
                    --SG_DESTINO_BACKLOG_CIF = NULL,
                   --QT_AGENDADA_CONFIRMADA = NULL--, --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                   -- QT_AGENDADA_CELULA = NULL  --ADD DONT NEED CLEAR QT_AGENDADA_CONFIRMADA ADRIANO 2018-04-18
                    WHERE CD_ELO_CARTEIRA_GROUPING = V_CD_GROUPINGNLIBERADO;
                    COMMIT;
                    EXCEPTION 
                        WHEN NO_DATA_FOUND THEN 
                        BEGIN
                        V_TRAVA:='S';
                        END;
                    WHEN OTHERS THEN 
                        BEGIN
                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;                   
                    
                    END;
                ELSE 
                
                BEGIN
                    UPDATE VND.ELO_CARTEIRA
                    SET CD_STATUS_CUSTOMER_SERVICE = V_ST_CS_CAPRO--,  -- VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO')
                    --CD_STATUS_TORRE_FRETES = NULL,
                    --DH_LIBERACAO_TORRE_FRETES = NULL,
                    --SG_DESTINO_BACKLOG_CIF = NULL
                    WHERE CD_ELO_CARTEIRA_GROUPING = V_CD_GROUPINGNLIBERADO;
                    COMMIT;
                    EXCEPTION 
                        WHEN NO_DATA_FOUND THEN 
                        BEGIN
                        V_TRAVA:='S';
                        END;
                    WHEN OTHERS THEN 
                        BEGIN
                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;                   
                    
                    END;
                
                END IF;
                
                
                
                
            END IF;    
            
        END IF;
    
        END;    --INSERIR AQUI 
        END IF;  -- INSERIR AQUI
    
        --END IF;
        
        v_count_linha:= v_count_linha + 1;
        V_LINHA:=V_LINHA +1;
            

        END;
        END LOOP;

        --CLOSE C_CARTEIRA;

        OPEN P_RETORNO FOR
        SELECT '1' AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
            
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;

    END PU_CELL_ATTENDANCE_UPDATE;



    PROCEDURE PU_CELL_ATTENDANCE_CLOSE(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_CD_SALES_DISTRICT             IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_DISTRICT%TYPE DEFAULT NULL,
        P_CD_SALES_OFFICE               IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_OFFICE%TYPE DEFAULT NULL,
        P_CD_SALES_GROUP                IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)

     IS

        v_count number;
        v_status                VARCHAR2(10);
        vSG_TIPO_STATUS         VND.ELO_TIPO_STATUS.SG_TIPO_STATUS%TYPE;
        vSG_STATUS              VND.ELO_STATUS.SG_STATUS%TYPE;
        V_TRAVA VARCHAR2(1) :='N';

        V_RET_CD_ELO_STATUS                 VND.ELO_STATUS.CD_ELO_STATUS%TYPE;
        V_RET_SG_STATUS                      VND.ELO_STATUS.SG_STATUS%TYPE;
        V_RET_ERRO                           VARCHAR2(1);
        V_RET_RETORNO                        T_CURSOR;


        CURSOR C_CARTEIRA IS
        SELECT DISTINCT
            CD_ELO_CARTEIRA
            ,EC.NU_ORDEM_VENDA
            ,CD_ITEM_PEDIDO
            ,IC_FA
            ,IC_EXPORT
            ,QT_SALDO_REFRESH
            ,CD_MOTIVO_RECUSA
            ,CD_BLOQUEIO_ENTREGA
            ,DH_VENCIMENTO_PEDIDO 
            ,DS_CREDIT_BLOCK_REASON 
            ,CD_INCOTERMS 
            ,IC_COOPERATIVE
            ,DS_ROTEIRO_ENTREGA
            ,NU_CONTRATO_SAP
            ,QT_AGENDADA_CONFIRMADA
            ,CD_BLOQUEIO_REMESSA
            ,CD_BLOQUEIO_REMESSA_ITEM
            ,CD_BLOQUEIO_FATURAMENTO
            ,CD_BLOQUEIO_FATURAMENTO_ITEM
            ,CD_BLOQUEIO_CREDITO
            ,EA.CD_ELO_AGENDAMENTO
            ,
            NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0)   QT_AGENDADA_PROTOCOLO
        FROM VND.ELO_CARTEIRA EC
        INNER JOIN VND.ELO_AGENDAMENTO EA ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        WHERE (EC.QT_AGENDADA_CONFIRMADA > 0)  --CONFIRMADO RONIE PODE SER 0
        AND EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL
        AND (EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG') FROM DUAL) OR
                EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE') FROM DUAL))
        AND (P_CD_WEEK IS NULL OR EA.CD_WEEK = P_CD_WEEK)
        AND (P_CD_POLO IS NULL OR EA.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EA.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR EA.CD_MACHINE = P_CD_MACHINE)
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP);

        -- LINHA DO CURSOR DA CARTEIRA
        C_LINHA C_CARTEIRA%ROWTYPE;

        BEGIN

        IF C_CARTEIRA%ISOPEN THEN
            CLOSE C_CARTEIRA;
        END IF;

        OPEN C_CARTEIRA;
        LOOP
        FETCH C_CARTEIRA into C_LINHA;
            EXIT WHEN C_CARTEIRA%notfound;

            -- ############# RULES FOR UPDATE STATUS ON ELO_CARTEIRA
            BEGIN
            
            V_TRAVA:='N';
            

            BEGIN
            
            PU_CHECK_STATUS_CELL(
                    C_LINHA.CD_ELO_CARTEIRA,
                    V_RET_CD_ELO_STATUS,
                    V_RET_SG_STATUS,
                    V_RET_ERRO,
                    V_RET_RETORNO);
            COMMIT;
            v_status:=V_RET_SG_STATUS;
            
            EXCEPTION 
            
            WHEN OTHERS THEN 
                BEGIN
                v_status:=NULL;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CLOSE CHECK STATUS - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END;

            -- ###
            
             

                -- ### UPDATE ELO_CARTEIRA BASED ON RULES ABOVE
                BEGIN

                    -- SOLICITADO POR PAULO KALIL EM 23/01/2017
                    -- SE STATUS FOR DIFERENTE DE 'CLROT' Falta Roteiro OU 'CLOOK' OK, GRAVA (0) ZERO NA QUANTIDADE 
                    IF NOT (NVL(v_status, 'BRANCO') = 'CLOOK') THEN
--                        BEGIN
--                        UPDATE VND.ELO_CARTEIRA
--                        SET CD_STATUS_CEL_FINAL = VND.GX_ELO_COMMON.fx_elo_status(vSG_TIPO_STATUS, vSG_STATUS)
--                        WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
--                        COMMIT;
--                        EXCEPTION 
--                        WHEN NO_DATA_FOUND THEN 
--                        V_TRAVA:= 'S';
--                        WHEN OTHERS THEN 
--                        V_TRAVA:='S';
--                        
--                        END;	
                        
--                   ELSE
                        BEGIN 
                        UPDATE VND.ELO_CARTEIRA
                        SET --CD_STATUS_CEL_FINAL = VND.GX_ELO_COMMON.fx_elo_status(vSG_TIPO_STATUS, vSG_STATUS), ALREADY SAVED 
                            QT_AGENDADA_CONFIRMADA = 0,
                            QT_AGENDADA_CELULA = 0 
                                , DS_VERSAO = SUBSTR(NVL(DS_VERSAO, ' '), 1,3500 ) || SUBSTR(  '[{"ID": 0022, "APP": "GX_ELO_CELL_ATTENDANCE.PU_CELL_ATTENDANCE_CLOSE",' || 
                                '"PROPERTIE": [{"NAME": "QT_AGENDADA_CONFIRMADA", "VAL":' || NVL(TO_CHAR(QT_AGENDADA_CONFIRMADA), 'NULL') || '},' ||
                                '{"NAME": "QT_AGENDADA_CONFIRMADA_CLOSE", "VAL":' || TO_CHAR(0) ||  '},' ||
                                '{"NAME": "QT_AGENDADA_CELULA_CLOSE", "VAL":' || TO_CHAR(0) ||  '},' ||
                                '{"NAME": "QT_AGENDADA_CELULA", "VAL":' || TO_CHAR(QT_AGENDADA_CELULA) || '},' ||
                                
                                        '], "DH_ULT_MOD": ' || TO_CHAR(CURRENT_DATE) || ' }],' ,1, 500)                            
                            
                        WHERE CD_ELO_CARTEIRA = C_LINHA.CD_ELO_CARTEIRA;
                        COMMIT;
                        EXCEPTION 
                        WHEN NO_DATA_FOUND THEN 
                        V_TRAVA:= 'S';
                        WHEN OTHERS THEN 
                        V_TRAVA:='S';
                        
                        END;	
                        
                        
                    END IF;
                    BEGIN
                    -- ALTERAR A ELO_AGENDAMENTO PARA CD_STATUS-6
                    UPDATE VND.ELO_AGENDAMENTO EA
                    SET EA.CD_ELO_STATUS = VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGCEL')
                    WHERE EA.CD_WEEK = P_CD_WEEK
                    AND EA.CD_ELO_AGENDAMENTO = C_LINHA.CD_ELO_AGENDAMENTO
                    AND EA.CD_ELO_STATUS < VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGCEL'); -- ADD TO DOUBLE CHECK IF ALLOW CHANGE ONLY STATUS ABOVE AGCEL
                    COMMIT;
                    EXCEPTION 
                    WHEN NO_DATA_FOUND THEN 
                    V_TRAVA:= 'S';
                    WHEN OTHERS THEN 
                    V_TRAVA:='S';
                    
                    END;                   

                END;
            -- ##
            END;
        END LOOP;

        CLOSE C_CARTEIRA;

        OPEN P_RETORNO FOR
        SELECT '1' AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;

    END PU_CELL_ATTENDANCE_CLOSE; 

    PROCEDURE PX_CELL_ATTENDANCE_POPUP(
        P_CD_SALES_GROUP                IN VND.ELO_CARTEIRA.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_CD_CLIENTE                    IN VND.ELO_CARTEIRA.CD_CLIENTE%TYPE DEFAULT NULL,
        P_CD_PRODUTO_SAP                IN VND.ELO_CARTEIRA.CD_PRODUTO_SAP%TYPE DEFAULT NULL,
        P_CD_INCOTERMS                  IN VND.ELO_CARTEIRA.CD_INCOTERMS%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_CARTEIRA.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_CLIENTE_RECEBEDOR          IN VND.ELO_CARTEIRA.CD_CLIENTE_RECEBEDOR%TYPE DEFAULT NULL,
        P_CD_CLIENTE_PAGADOR            IN VND.ELO_CARTEIRA.CD_CLIENTE_PAGADOR%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_NU_CONTRATO_SAP               IN VND.ELO_CARTEIRA.NU_CONTRATO_SAP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)

    AS

    BEGIN
       /* OPEN P_RETORNO FOR
                SELECT  

              EC.NU_CONTRATO
            , EC.NU_ORDEM_VENDA
            , EC.CD_ITEM_PEDIDO
            , PED.NU_QUANTIDADE_SALDO
            , NVL(EC.QT_AGENDADA_CONFIRMADA, 0) "QT_AGENDADA_CONFIRMADA"
            , NVL(EC.QT_AGENDADA_CELULA, 0) "QT_AGENDADA_CELULA"
            , DS_OBSERVACAO_ADVEN
            , EC.NU_CONTRATO_SAP
            , EC.CD_ELO_AGENDAMENTO
            , EC.CD_ELO_CARTEIRA
        FROM VND.ELO_CARTEIRA EC 
        INNER JOIN VND.PEDIDO PED ON PED.NU_ORDEM_VENDA = EC.NU_ORDEM_VENDA AND PED.CD_ITEM_PEDIDO = EC.CD_ITEM_PEDIDO
        INNER JOIN VND.ELO_AGENDAMENTO EA ON EA.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
        WHERE EC.IC_ATIVO <> 'N'
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)
        AND EC.CD_TIPO_PAGAMENTO IS NOT NULL
        AND (P_CD_WEEK IS NULL OR EA.CD_WEEK = P_CD_WEEK)
        AND (P_CD_CLIENTE IS NULL OR EC.CD_CLIENTE = P_CD_CLIENTE)
        AND (P_CD_PRODUTO_SAP IS NULL OR EC.CD_PRODUTO_SAP = P_CD_PRODUTO_SAP)
        AND (P_CD_INCOTERMS IS NULL OR EC.CD_INCOTERMS = P_CD_INCOTERMS)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EC.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        --AND (P_NU_CONTRATO_SAP IS NULL OR EC.NU_CONTRATO_SAP = P_NU_CONTRATO_SAP)
        AND (P_CD_CLIENTE_RECEBEDOR IS NULL OR EC.CD_CLIENTE_RECEBEDOR = P_CD_CLIENTE_RECEBEDOR)
        AND (P_CD_CLIENTE_PAGADOR IS NULL OR EC.CD_CLIENTE_PAGADOR = P_CD_CLIENTE_PAGADOR)
        ORDER BY EC.NU_CONTRATO_SAP, EC.NU_ORDEM_VENDA, EC.CD_ITEM_PEDIDO, PED.NU_QUANTIDADE_SALDO;*/

        OPEN P_RETORNO FOR
        
        SELECT
        
          NU_CONTRATO
        , NU_ORDEM_VENDA
        , CD_ITEM_PEDIDO
        , NU_QUANTIDADE_SALDO
        , QT_AGENDADA_CONFIRMADA
        , QT_AGENDADA_CELULA
        , DS_OBSERVACAO_ADVEN
        , NU_CONTRATO_SAP
        , CD_ELO_AGENDAMENTO
        , CD_ELO_CARTEIRA
        
        FROM (
        
        
        SELECT
              EC.NU_CONTRATO
            , EC.NU_ORDEM_VENDA
            , EC.CD_ITEM_PEDIDO
            , CASE 
            WHEN EC.CD_TIPO_AGENDAMENTO IN (22, 23,24) THEN 
                 SUM(NVL(PED.NU_QUANTIDADE_SALDO, 0)) 
            WHEN EC.CD_TIPO_AGENDAMENTO IN (25) AND SUM(PED.NU_QUANTIDADE_SALDO) = 0  THEN  
                SUM(NVL(PED.NU_QUANTIDADE_ENTREGUE,0))
            WHEN EC.CD_TIPO_AGENDAMENTO IN (25) AND SUM(PED.NU_QUANTIDADE_SALDO) > 0  THEN  
                SUM(NVL(PED.NU_QUANTIDADE_SALDO, 0))
                ELSE 0
                 END NU_QUANTIDADE_SALDO
            , NVL(EC.QT_AGENDADA_CONFIRMADA, 0) "QT_AGENDADA_CONFIRMADA"
            , NVL(EC.QT_AGENDADA_CELULA, 0) "QT_AGENDADA_CELULA"
            , MAX(DS_OBSERVACAO_ADVEN) DS_OBSERVACAO_ADVEN
            , EC.NU_CONTRATO_SAP
            , EC.CD_ELO_AGENDAMENTO
            , MAX(EC.CD_ELO_CARTEIRA) CD_ELO_CARTEIRA
        FROM VND.ELO_CARTEIRA EC 
        LEFT JOIN VND.PEDIDO PED ON PED.NU_ORDEM_VENDA = EC.NU_ORDEM_VENDA --AND PED.CD_ITEM_PEDIDO = EC.CD_ITEM_PEDIDO  -- INCLUDED BY ADRIANO BAVIERA 2018-01-12 ISSUE BY RONIE
        INNER JOIN VND.ELO_AGENDAMENTO EA ON EA.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
        WHERE EC.IC_ATIVO <> 'N'
        --AND EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL
        --(EC.QT_AGENDADA_CONFIRMADA IS NOT NULL AND EC.QT_AGENDADA_CONFIRMADA > 0)
        AND ((EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG') FROM DUAL) OR
        EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE') FROM DUAL))
        OR (EC.CD_TIPO_AGENDAMENTO = 25 AND EC.CD_STATUS_REPLAN = 32 AND NOT(EA.CD_ELO_STATUS = 9)))
        AND ( EC.CD_SALES_GROUP = P_CD_SALES_GROUP)  
        AND (EC.CD_TIPO_AGENDAMENTO IS NOT NULL)
        AND (EA.CD_WEEK = P_CD_WEEK)
        AND (EC.CD_CLIENTE = P_CD_CLIENTE)
        AND (EC.CD_PRODUTO_SAP = P_CD_PRODUTO_SAP)
        AND (EC.CD_INCOTERMS = P_CD_INCOTERMS)
        AND (EC.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        
GROUP BY
              EC.NU_CONTRATO
            , EC.NU_ORDEM_VENDA
            , EC.CD_ITEM_PEDIDO
            --, NVL(PED.NU_QUANTIDADE_SALDO, 0) 
            , EC.CD_TIPO_AGENDAMENTO
            , NVL(EC.QT_AGENDADA_CONFIRMADA, 0) 
            , NVL(EC.QT_AGENDADA_CELULA, 0) 
            , EC.NU_CONTRATO_SAP
            , EC.CD_ELO_AGENDAMENTO

)
ORDER BY NU_CONTRATO_SAP, NU_ORDEM_VENDA, CD_ITEM_PEDIDO, NU_QUANTIDADE_SALDO
        
        
        --AND ((P_CD_CLIENTE_RECEBEDOR IS NULL OR (EC.CD_INCOTERMS = 'CIF' AND  EC.CD_CLIENTE_RECEBEDOR = P_CD_CLIENTE_RECEBEDOR))
        --OR (P_CD_CLIENTE_PAGADOR IS NULL OR (EC.CD_INCOTERMS = 'FOB' AND EC.CD_CLIENTE_PAGADOR = P_CD_CLIENTE_PAGADOR)))

        /* THIS PLAN IS CHANGE TO MANDATORY FIELD TO SEARCH
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)
        AND EC.CD_TIPO_PAGAMENTO IS NOT NULL
        AND (P_CD_WEEK IS NULL OR EA.CD_WEEK = P_CD_WEEK)
        AND (P_CD_CLIENTE IS NULL OR EC.CD_CLIENTE = P_CD_CLIENTE)
        AND (P_CD_PRODUTO_SAP IS NULL OR EC.CD_PRODUTO_SAP = P_CD_PRODUTO_SAP)
        AND (P_CD_INCOTERMS IS NULL OR EC.CD_INCOTERMS = P_CD_INCOTERMS)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EC.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_CLIENTE_RECEBEDOR IS NULL OR EC.CD_CLIENTE_RECEBEDOR = P_CD_CLIENTE_RECEBEDOR)
        AND (P_CD_CLIENTE_PAGADOR IS NULL OR EC.CD_CLIENTE_PAGADOR = P_CD_CLIENTE_PAGADOR)*/


        --ORDER BY EC.NU_CONTRATO_SAP, EC.NU_ORDEM_VENDA, EC.CD_ITEM_PEDIDO, PED.NU_QUANTIDADE_SALDO;
;
    END PX_CELL_ATTENDANCE_POPUP;

    PROCEDURE PX_GET_AGENDADA_CELULA_TOTAL( P_NU_CONTRATO_SAP   IN VND.ELO_CARTEIRA.NU_CONTRATO_SAP%TYPE,
                                            P_RETORNO           OUT T_CURSOR)

        AS

        BEGIN

        OPEN P_RETORNO FOR
        SELECT SUM(QT_AGENDADA_CELULA) "QT_AGENDADA_CELULA"
        FROM VND.ELO_CARTEIRA
        WHERE
        IC_ATIVO = 'S'
        AND NU_CONTRATO_SAP = P_NU_CONTRATO_SAP;

    END PX_GET_AGENDADA_CELULA_TOTAL;

   PROCEDURE PU_CELL_ATTENDANCE_POPUP(
        P_CD_ELO_CARTEIRA            IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        P_QT_AGENDADA_CELULA         IN VND.ELO_CARTEIRA.QT_AGENDADA_CELULA%TYPE,
        P_DS_OBSERVACAO_ADVEN        IN VND.ELO_CARTEIRA.DS_OBSERVACAO_ADVEN%TYPE,
        P_RETORNO                    OUT T_CURSOR)

        
    AS
    
    V_CD_TIPO_AGENDAMENTO VND.ELO_CARTEIRA.CD_TIPO_AGENDAMENTO%TYPE;
      
      BEGIN

        BEGIN
        SELECT STAG.CD_ELO_STATUS INTO V_CD_TIPO_AGENDAMENTO
        FROM (
        SELECT 
        CASE 
        WHEN ST_AGE.SG_STATUS = 'AGLOG' THEN 'ORIGINAL'
        WHEN ST_AGE.SG_STATUS = 'AGPRE' THEN 'INCLUSAO'
        WHEN ST_AGE.SG_STATUS = 'AGCTR' THEN 'REPLAN' END SG_STATUS
        FROM VND.ELO_AGENDAMENTO AGE
        INNER JOIN VND.ELO_CARTEIRA CT
        ON CT.CD_ELO_AGENDAMENTO = AGE.CD_ELO_AGENDAMENTO 
        INNER JOIN VND.ELO_STATUS ST_AGE
        ON AGE.CD_ELO_STATUS = ST_AGE.CD_ELO_STATUS
        WHERE 
        CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND (ST_AGE.SG_STATUS IN ('AGLOG', 'AGPRE', 'AGCTR') OR CT.CD_TIPO_AGENDAMENTO = 25)
        ) TIPO_AG
        INNER JOIN VND.ELO_STATUS STAG
        ON STAG.SG_STATUS = TIPO_AG.SG_STATUS;
        EXCEPTION
        WHEN OTHERS THEN
            V_CD_TIPO_AGENDAMENTO:=NULL;
        
        END;
        
        


        BEGIN  
        UPDATE    VND.ELO_CARTEIRA
        SET       QT_AGENDADA_CELULA = P_QT_AGENDADA_CELULA
                , QT_AGENDADA_CONFIRMADA = P_QT_AGENDADA_CELULA
                , DS_OBSERVACAO_ADVEN = P_DS_OBSERVACAO_ADVEN
                , DH_MODIFICACAO_CELL_ATT = CURRENT_DATE
                , CD_USUARIO_MODIF_CELL_ATT = 4198
                , CD_TIPO_AGENDAMENTO = NVL(V_CD_TIPO_AGENDAMENTO, CD_TIPO_AGENDAMENTO)
                , NU_PROTOCOLO_ENTREGA = SUBSTR('GXCT_PU_POPUP:' || NVL(TO_CHAR(P_QT_AGENDADA_CELULA), 'NUL'), 1,30)
                                                , DS_VERSAO = SUBSTR(NVL(DS_VERSAO, ' '), 1,3500 ) || SUBSTR( '[{"ID": 0023, "APP": "GX_ELO_CELL_ATTENDANCE.PU_CELL_ATTENDANCE_POPUP",' || 
                                '"PROPERTIE": [{"NAME": "QT_AGENDADA_CONFIRMADA", "VAL":' || NVL(TO_CHAR(QT_AGENDADA_CONFIRMADA), 'NULL') || '},' ||
                                '{"NAME": "QT_AGENDADA_CELULA", "VAL":' || TO_CHAR(P_QT_AGENDADA_CELULA) ||  '},' ||
                                        '], "DH_ULT_MOD": ' || TO_CHAR(CURRENT_DATE) || ' }],' ,1, 500)   
                
                
        WHERE     CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;
        COMMIT;

        OPEN P_RETORNO FOR
        SELECT '1' AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;
    END;

    END PU_CELL_ATTENDANCE_POPUP;

    FUNCTION FX_GET_NR_PROTOCOLO(
           P_NU_CONTRATO_SAP IN CPT.AUTORIZACAO_ENTREGA.NU_CONTRATO_SAP%TYPE, 
           P_CD_ITEM_CONTRATO IN CPT.AUTORIZACAO_ENTREGA.CD_ITEM_CONTRATO%TYPE)

    RETURN VARCHAR2 IS

    P_RETORNO       VARCHAR2(1000);
    JOINPROTOCOLO   VARCHAR2(10000):=' ';

    CURSOR C_PROTOCOLO IS
        SELECT DISTINCT E.NU_PROTOCOLO_ENTREGA
        FROM CPT.AUTORIZACAO_ENTREGA AE
        INNER JOIN CPT.ENTREGA E ON E.CD_AUTORIZACAO_ENTREGA = AE.CD_AUTORIZACAO_ENTREGA
        WHERE AE.NU_CONTRATO_SAP IN (P_NU_CONTRATO_SAP)
        AND AE.CD_ITEM_CONTRATO IN (P_CD_ITEM_CONTRATO);
    BEGIN 

    FOR CA IN C_PROTOCOLO
        LOOP
            JOINPROTOCOLO:= JOINPROTOCOLO || '|' || NVL(CA.NU_PROTOCOLO_ENTREGA, ' ' );
            EXIT WHEN LENGTH(TRIM(JOINPROTOCOLO)) >= 1002;
        END LOOP;

    IF C_PROTOCOLO%ISOPEN THEN
      CLOSE C_PROTOCOLO;
    END IF;

    JOINPROTOCOLO:=SUBSTR(JOINPROTOCOLO, 3, 1000);
    P_RETORNO := JOINPROTOCOLO ;

    RETURN P_RETORNO;

  END FX_GET_NR_PROTOCOLO;  
  
      FUNCTION FX_GET_NR_PROTOCOLO_VB(
           P_CD_ELO_CARTEIRA IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE)

    RETURN VARCHAR2 IS

    P_RETORNO       VARCHAR2(1000);
    JOINPROTOCOLO   VARCHAR2(10000):=' ';

    CURSOR C_PROTOCOLO IS
        SELECT DISTINCT VBPROT.NU_PROTOCOLO
        FROM VND.ELO_VBAK VBAK
        INNER JOIN VND.ELO_VBAK_PROTOCOLO VBPROT ON VBPROT.CD_ELO_VBAK = VBAK.CD_ELO_VBAK
        WHERE VBPROT.CD_ELO_CARTEIRA IN (P_CD_ELO_CARTEIRA) 
        AND VBAK.IC_ATIVO = 'S' 
        AND VBPROT.QT_AGENDADA_PROTOCOLO > 0
        AND VBPROT.IC_ATIVO='S';
    BEGIN 

    FOR CA IN C_PROTOCOLO
        LOOP
            JOINPROTOCOLO:= JOINPROTOCOLO || '|' || NVL(CA.NU_PROTOCOLO, ' ' );
            EXIT WHEN LENGTH(TRIM(JOINPROTOCOLO)) >= 1002;
        END LOOP;

    IF C_PROTOCOLO%ISOPEN THEN
      CLOSE C_PROTOCOLO;
    END IF;

    JOINPROTOCOLO:=SUBSTR(JOINPROTOCOLO, 3, 1000);
    P_RETORNO := JOINPROTOCOLO ;

    RETURN P_RETORNO;

  END FX_GET_NR_PROTOCOLO_VB;  


 
      FUNCTION FX_GET_ROTEIRO_ENTREGA(
           P_CD_ELO_CARTEIRA IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE)

    RETURN VARCHAR2 IS

    P_RETORNO       VARCHAR2(4000);
    JOINPROTOCOLO   VARCHAR2(10000):=' ';

    CURSOR C_PROTOCOLO IS
        SELECT DISTINCT ENT.DS_ROTEIRO, ENT.NU_PROTOCOLO_ENTREGA
        FROM VND.ELO_VBAK VBAK
        INNER JOIN VND.ELO_VBAK_PROTOCOLO VBPROT ON VBPROT.CD_ELO_VBAK = VBAK.CD_ELO_VBAK
        INNER JOIN CPT.ENTREGA ENT
        ON VBPROT.NU_PROTOCOLO = ENT.NU_PROTOCOLO_ENTREGA
        WHERE VBPROT.CD_ELO_CARTEIRA IN (P_CD_ELO_CARTEIRA) 
        AND VBAK.IC_ATIVO = 'S' 
        AND VBPROT.QT_AGENDADA_PROTOCOLO > 0
        AND VBPROT.IC_ATIVO='S';
    BEGIN 

    FOR CA IN C_PROTOCOLO
        LOOP
            JOINPROTOCOLO:= JOINPROTOCOLO || '|' || NVL(CA.NU_PROTOCOLO_ENTREGA , ' ' ) || ':' || NVL(CA.DS_ROTEIRO, ' ' );
            EXIT WHEN LENGTH(TRIM(JOINPROTOCOLO)) >= 4000;
        END LOOP;

    IF C_PROTOCOLO%ISOPEN THEN
      CLOSE C_PROTOCOLO;
    END IF;

    JOINPROTOCOLO:=SUBSTR(JOINPROTOCOLO, 3, 4000);
    P_RETORNO := JOINPROTOCOLO ;

    RETURN P_RETORNO;

  END FX_GET_ROTEIRO_ENTREGA;  




 FUNCTION FX_GET_QT_PROTOCOLO(
       P_NU_CONTRATO_SAP IN CPT.AUTORIZACAO_ENTREGA.NU_CONTRATO_SAP%TYPE)

    RETURN VARCHAR2 IS

    P_RETORNO       VARCHAR2(1000);
    JOINPROTOCOLO   VARCHAR2(10000):=' ';

    CURSOR C_PROTOCOLO IS
        SELECT DISTINCT(E.QT_QUANTIDADE - DECODE(E.QT_FORNECIDO,NULL,0, E.QT_FORNECIDO)) "QTD_PROTOCOLO"
        FROM CPT.AUTORIZACAO_ENTREGA AE
        INNER JOIN CPT.ENTREGA E ON E.CD_AUTORIZACAO_ENTREGA = AE.CD_AUTORIZACAO_ENTREGA
        WHERE AE.NU_CONTRATO_SAP IN (P_NU_CONTRATO_SAP);
    BEGIN 

    FOR CA IN C_PROTOCOLO
        LOOP
            JOINPROTOCOLO:= JOINPROTOCOLO || '|' || NVL(CA.QTD_PROTOCOLO, '0' );
            --EXIT WHEN LENGTH(TRIM(JOINPROTOCOLO)) >= 1002;
        END LOOP;

    IF C_PROTOCOLO%ISOPEN THEN
      CLOSE C_PROTOCOLO;
    END IF;

    JOINPROTOCOLO:=SUBSTR(JOINPROTOCOLO, 3, 1000);
    P_RETORNO := JOINPROTOCOLO ;

    RETURN P_RETORNO;

  END FX_GET_QT_PROTOCOLO; 

   FUNCTION FX_GET_QT_PROTOCOLO2(
       P_NU_CONTRATO_SAP IN CPT.AUTORIZACAO_ENTREGA.NU_CONTRATO_SAP%TYPE)

    RETURN CPT.ENTREGA.QT_QUANTIDADE%TYPE IS

        P_RETORNO       CPT.ENTREGA.QT_QUANTIDADE%TYPE;
    BEGIN

        SELECT NVL(SUM(E.QT_QUANTIDADE - NVL(E.QT_FORNECIDO,0)),0) "QTD_PROTOCOLO"
        INTO P_RETORNO
        FROM CPT.AUTORIZACAO_ENTREGA AE
        INNER JOIN CPT.ENTREGA E ON E.CD_AUTORIZACAO_ENTREGA = AE.CD_AUTORIZACAO_ENTREGA
        WHERE AE.NU_CONTRATO_SAP IN (P_NU_CONTRATO_SAP);

    RETURN P_RETORNO;

  END FX_GET_QT_PROTOCOLO2; 

    FUNCTION FX_GET_STATUS_DESCRIPTION(
        P_STATUS_SIGLA  IN CHAR)

    RETURN VARCHAR2 IS

    P_RETORNO       VARCHAR2(500);
    JOINSTATUS      VARCHAR2(500):=' ';

    CURSOR C_STATUS IS
        SELECT DS_STATUS 
        FROM VND.ELO_STATUS
        WHERE SG_STATUS = '' || P_STATUS_SIGLA || '';
    BEGIN 

    FOR CA IN C_STATUS
        LOOP
            JOINSTATUS:= NVL(CA.DS_STATUS, ' ' );
            EXIT WHEN LENGTH(TRIM(JOINSTATUS)) >= 1002;
        END LOOP;

    IF C_STATUS%ISOPEN THEN
      CLOSE C_STATUS;
    END IF;

    JOINSTATUS:=SUBSTR(JOINSTATUS, 0, 1000);
    P_RETORNO := JOINSTATUS ;

    RETURN P_RETORNO;

  END FX_GET_STATUS_DESCRIPTION; 

    FUNCTION FX_GET_COMERCIAL(
        P_CD_BLOQUEIO_ENTREGA  IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(1);

        BEGIN

        IF P_CD_BLOQUEIO_ENTREGA IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 'X' INTO P_RETORNO
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            INNER JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_ENTREGA
            WHERE EB.CD_BLOCKING_LEVEL = 1
            AND EC.CD_BLOQUEIO_ENTREGA = P_CD_BLOQUEIO_ENTREGA;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_COMERCIAL;

     FUNCTION FX_GET_COBRANCA(
        P_CD_BLOQUEIO_ENTREGA  IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(1);

        BEGIN

        IF P_CD_BLOQUEIO_ENTREGA IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 'X' INTO P_RETORNO
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            INNER JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_ENTREGA
            WHERE EB.CD_BLOCKING_LEVEL = 2
            AND EC.CD_BLOQUEIO_ENTREGA = P_CD_BLOQUEIO_ENTREGA;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_COBRANCA;

     FUNCTION FX_GET_CREDITO(
        P_CD_BLOQUEIO_ENTREGA  IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(1);

        BEGIN

        IF P_CD_BLOQUEIO_ENTREGA IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 'X' INTO P_RETORNO
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            INNER JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_ENTREGA
            WHERE EB.CD_BLOCKING_LEVEL = 3
            AND EC.CD_BLOQUEIO_ENTREGA = P_CD_BLOQUEIO_ENTREGA;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_CREDITO;  

     FUNCTION FX_GET_CONTRATO_MAE(
        P_CD_BLOQUEIO_ENTREGA  IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(1);

        BEGIN

        IF P_CD_BLOQUEIO_ENTREGA IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 'X' INTO P_RETORNO
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            INNER JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA
            WHERE EB.CD_BLOCKING_LEVEL = 4
            AND EC.CD_BLOQUEIO_REMESSA = P_CD_BLOQUEIO_ENTREGA;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_CONTRATO_MAE;     

     FUNCTION FX_GET_ORDEM_VENDA(
        P_CD_BLOQUEIO_ENTREGA  IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(1);

        BEGIN

        IF P_CD_BLOQUEIO_ENTREGA IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 'X' INTO P_RETORNO
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            INNER JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_ENTREGA
            WHERE EB.CD_BLOCKING_LEVEL = 5
            AND EC.CD_BLOQUEIO_ENTREGA = P_CD_BLOQUEIO_ENTREGA;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_ORDEM_VENDA;

    FUNCTION FX_QT_AGENDADA_CONFIRMADA(
        P_NU_CONTRATO_SAP  IN CHAR,
        P_CD_ITEM_PEDIDO   IN NUMBER)

        RETURN NUMBER IS

        P_RETORNO       NUMBER(15,3);

        BEGIN
        SELECT SUM(QT_AGENDADA_CELULA) INTO P_RETORNO
        FROM VND.ELO_CARTEIRA
        WHERE NU_CONTRATO_SAP = P_NU_CONTRATO_SAP;

        RETURN P_RETORNO;      

    END FX_QT_AGENDADA_CONFIRMADA;  

    FUNCTION FX_GET_BLOQUEIO_ENTREGA(
        P_CD_BLOQUEIO_REMESSA IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(3);

        BEGIN

        /*BLOQUEIO ENTREGA*/
        IF P_CD_BLOQUEIO_REMESSA IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 
            CASE
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 1 THEN 'COM'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 2 THEN 'COB'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 3 THEN 'CRE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 4 THEN 'MAE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 5 THEN 'VEN'
            END "RETORNO" INTO P_RETORNO 
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            LEFT JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            AND EC.CD_BLOQUEIO_REMESSA = P_CD_BLOQUEIO_REMESSA;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_BLOQUEIO_ENTREGA;

    FUNCTION FX_GET_BLOQUEIO_ENTREGA_ITEM(
        P_CD_BLOQUEIO_REMESSA_ITEM IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(3);

        BEGIN

        /*BLOQUEIO ENTREGA ITEM*/
        IF P_CD_BLOQUEIO_REMESSA_ITEM IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 
            CASE
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 1 THEN 'COM'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 2 THEN 'COB'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 3 THEN 'CRE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 4 THEN 'MAE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 5 THEN 'VEN'
            END "RETORNO" INTO P_RETORNO 
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            LEFT JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA_ITEM
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            AND EC.CD_BLOQUEIO_REMESSA_ITEM = P_CD_BLOQUEIO_REMESSA_ITEM;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_BLOQUEIO_ENTREGA_ITEM;

    FUNCTION FX_GET_BLOQUEIO_FATURAMENTO(
        P_CD_BLOQUEIO_FATURAMENTO IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(3);

        BEGIN

        /*BLOQUEIO FATURAMENTO*/
        IF P_CD_BLOQUEIO_FATURAMENTO IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 
            CASE
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 1 THEN 'COM'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 2 THEN 'COB'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 3 THEN 'CRE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 4 THEN 'MAE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 5 THEN 'VEN'
            END "RETORNO" INTO P_RETORNO 
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            LEFT JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            AND EC.CD_BLOQUEIO_FATURAMENTO = P_CD_BLOQUEIO_FATURAMENTO;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_BLOQUEIO_FATURAMENTO;

    FUNCTION FX_GET_BLOQUEIO_FAT_ITEM(
        P_CD_BLOQUEIO_FAT_ITEM IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(3);

        BEGIN

        /*BLOQUEIO FATURAMENTO*/
        IF P_CD_BLOQUEIO_FAT_ITEM IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 
            CASE
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 1 THEN 'COM'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 2 THEN 'COB'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 3 THEN 'CRE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 4 THEN 'MAE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 5 THEN 'VEN'
            END "RETORNO" INTO P_RETORNO 
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            LEFT JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO_ITEM
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = P_CD_BLOQUEIO_FAT_ITEM;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_BLOQUEIO_FAT_ITEM;

    FUNCTION FX_GET_BLOQUEIO_CREDITO(
        P_CD_BLOQUEIO_CREDITO IN CHAR)

        RETURN VARCHAR2 IS

        P_RETORNO       VARCHAR2(3);

        BEGIN

        /*BLOQUEIO FATURAMENTO*/
        IF P_CD_BLOQUEIO_CREDITO IS NULL THEN
            P_RETORNO := NULL; 
        ELSE
            SELECT DISTINCT 
            CASE
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 1 THEN 'COM'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 2 THEN 'COB'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 3 THEN 'CRE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 4 THEN 'MAE'
                WHEN EB.CD_BLOCKING_TYPE_COLUMN = 5 THEN 'VEN'
            END "RETORNO" INTO P_RETORNO 
            FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB
            LEFT JOIN VND.ELO_CARTEIRA EC ON EB.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_CREDITO
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            AND EC.CD_BLOQUEIO_CREDITO = P_CD_BLOQUEIO_CREDITO;
        END IF;

        RETURN P_RETORNO;

    END FX_GET_BLOQUEIO_CREDITO;


    PROCEDURE PX_CELL_ATTENDANCE_PROTOCOLO(
        P_CD_ELO_CARTEIRA             IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        P_RETORNO                       OUT T_CURSOR
    ) 

    AS

  BEGIN
        OPEN P_RETORNO FOR

        WITH CTE_CARTEIRA AS 
        (
        SELECT CT.CD_ELO_CARTEIRA, 
        CT.CD_ELO_AGENDAMENTO, 
        CT.CD_ELO_AGENDAMENTO_ITEM,
        CT.NU_CONTRATO,
        CT.NU_ORDEM,
        CT.NU_ORDEM_VENDA,
        CT.CD_ITEM_PEDIDO,
        NVL(CT.QT_AGENDADA_CONFIRMADA, 0) QT_AGENDADA_CONFIRMADA,
        CT.NU_CONTRATO_SAP,
        CT.CD_CLIENTE,
        CT.NO_CLIENTE,
        CT.CD_CLIENTE_PAGADOR,
        CT.NO_CLIENTE_PAGADOR,
        CT.CD_ITEM_CONTRATO,
        CT.QT_AGENDADA_PROTOCOLO,
        CT.NU_PROTOCOLO

        FROM VND.ELO_CARTEIRA CT 
        WHERE
        CT.IC_ATIVO = 'S'
        AND CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND CT.IC_COOPERATIVE = 'S'
        AND CT.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL  
        AND (EXISTS (SELECT 1 FROM VND.ELO_AGENDAMENTO AGE
                            WHERE CT.CD_ELO_AGENDAMENTO = AGE.CD_ELO_AGENDAMENTO
                AND (AGE.CD_ELO_STATUS IN ( VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG') ,
                                            VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE')))) 
                                            OR (CT.CD_TIPO_AGENDAMENTO = 25 AND CT.CD_STATUS_REPLAN = 32))
        ), 
        CTE_AGENDAMENTO AS 
        (
        SELECT AGE.CD_ELO_AGENDAMENTO , AGE.CD_ELO_STATUS, AGE.CD_WEEK
        FROM VND.ELO_AGENDAMENTO AGE 
        WHERE EXISTS (SELECT 1 FROM CTE_CARTEIRA CCA
        WHERE CCA.CD_ELO_AGENDAMENTO = AGE.CD_ELO_AGENDAMENTO)
       ),
       
       CTE_CARTEIRA_THIS_WEEK AS 
       (
       
       SELECT 
       AGE.CD_WEEK , CTA.CD_ELO_AGENDAMENTO, CTA.CD_ELO_CARTEIRA, CTA.CD_ELO_AGENDAMENTO_ITEM
       FROM VND.ELO_CARTEIRA CTA
       INNER JOIN CTE_AGENDAMENTO AGE 
       ON CTA.CD_ELO_AGENDAMENTO = AGE.CD_ELO_AGENDAMENTO
       INNER JOIN CTE_CARTEIRA   CC_ONE
       ON 
       CC_ONE.CD_ELO_AGENDAMENTO = CTA.CD_ELO_AGENDAMENTO
       AND CC_ONE.NU_CONTRATO_SAP = CTA.NU_CONTRATO_SAP
       AND CC_ONE.CD_ITEM_CONTRATO = CTA.CD_ITEM_CONTRATO
       
       WHERE 
       CTA.IC_ATIVO  = 'S' 
       
       ),

        CTE_GROUPING AS 
       (
        SELECT DISTINCT EAG_GRO_SC.CD_ELO_AGENDAMENTO_GROUPING, EAG_GRO_SC.NU_DOCUMENTO
        FROM CTE_CARTEIRA CT
        INNER JOIN CTE_AGENDAMENTO AG
        ON CT.CD_ELO_AGENDAMENTO = AG.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EA_SUP_SC  
        ON EA_SUP_SC.CD_ELO_AGENDAMENTO = AG.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_ITEM EAG_ITEM_SC
        ON EAG_ITEM_SC.CD_ELO_AGENDAMENTO_SUPERVISOR = EA_SUP_SC.CD_ELO_AGENDAMENTO_SUPERVISOR
        AND EAG_ITEM_SC.CD_ELO_AGENDAMENTO_ITEM = CT.CD_ELO_AGENDAMENTO_ITEM
        AND EAG_ITEM_SC.IC_ATIVO = 'S' 
        INNER JOIN VND.ELO_AGENDAMENTO_WEEK EAG_WE_SC
        ON EAG_ITEM_SC.CD_ELO_AGENDAMENTO_ITEM = EAG_WE_SC.CD_ELO_AGENDAMENTO_ITEM
        INNER JOIN VND.ELO_AGENDAMENTO_GROUPING EAG_GRO_SC
        ON EAG_GRO_SC.CD_ELO_AGENDAMENTO_WEEK = EAG_WE_SC.CD_ELO_AGENDAMENTO_WEEK
        AND EAG_GRO_SC.SG_TIPO_DOCUMENTO = 'P'
        AND EXISTS (SELECT 1 FROM CPT.ENTREGA CPT_ENT 
                    INNER JOIN CPT.AUTORIZACAO_ENTREGA CPT_AUT 
                    ON CPT_ENT.CD_AUTORIZACAO_ENTREGA = CPT_AUT.CD_AUTORIZACAO_ENTREGA 
                    WHERE
                    CPT_ENT.SG_STATUS NOT IN ('P', 'C')
                    AND CPT_ENT.NU_PROTOCOLO_ENTREGA = EAG_GRO_SC.NU_DOCUMENTO
                    AND CPT_AUT.NU_CONTRATO_SAP = CT.NU_CONTRATO_SAP
                    AND CPT_AUT.CD_ITEM_CONTRATO = CT.CD_ITEM_CONTRATO)

       ),
       
       CTE_DISPONIBILIDADE_PROT AS
       (
        SELECT VPR.NU_PROTOCOLO, VB.NU_CONTRATO_SAP, VB.CD_ITEM_CONTRATO, SUM(VPR.QT_AGENDADA_PROTOCOLO) QT_AGENDADA_PROTOCOLO 
        FROM VND.ELO_VBAK_PROTOCOLO VPR
        INNER JOIN VND.ELO_VBAK VB
        ON VPR.CD_ELO_VBAK = VB.CD_ELO_VBAK
        WHERE 
        --VPR.NU_PROTOCOLO = EC_NU_DOCUMENTO
        EXISTS (SELECT 1 FROM CTE_CARTEIRA CTA 
        WHERE  VB.NU_CONTRATO_SAP = CTA.NU_CONTRATO_SAP
        AND VB.CD_ITEM_CONTRATO = CTA.CD_ITEM_CONTRATO)
        AND VPR.IC_ATIVO = 'S'
        AND VB.IC_ATIVO = 'S'
        AND EXISTS (SELECT 1 FROM CTE_CARTEIRA_THIS_WEEK CTA_WEEK WHERE VPR.CD_ELO_CARTEIRA = CTA_WEEK.CD_ELO_CARTEIRA)  --CONSIDER ONLY THIS WEEK
        GROUP BY VB.NU_CONTRATO_SAP, VB.CD_ITEM_CONTRATO, VPR.NU_PROTOCOLO
        
        )

         SELECT  
          EC.NU_CONTRATO   --OK
        , EA.CD_WEEK   --OK
        , EC.NU_ORDEM
        , EC.NU_ORDEM_VENDA   --OK
        , EC.CD_ITEM_PEDIDO
        , NVL(EC.QT_AGENDADA_CONFIRMADA, 0) "QT_AGENDADA_CONFIRMADA"
        , EC.NU_CONTRATO_SAP    --OK
        , EC.CD_ITEM_CONTRATO
        , EC.CD_ELO_AGENDAMENTO
        , EC.CD_ELO_AGENDAMENTO_ITEM --OK
        , EC.CD_ELO_CARTEIRA   --OK
        , EC.CD_CLIENTE
        , EC.NO_CLIENTE
        , AUTOR.CD_CLIENTE_PROP_OR_FILIAL CD_CLIENTE_RECEBEDOR
        , CLI.NO_CLIENTE NO_CLIENTE_RECEBEDOR
        , EC.CD_CLIENTE_PAGADOR
        , EC.NO_CLIENTE_PAGADOR
        , EA.CD_ELO_STATUS
        , E_ST_AG.DS_STATUS
        , E_ST_AG.SG_STATUS
        , 
        NVL((SELECT 
        SUM(NVL(CPT_ENT.QT_QUANTIDADE,0) - NVL(CPT_ENT.QT_FORNECIDO,0)) SALDO
        FROM CTE_CARTEIRA EC_I
        INNER JOIN CPT.AUTORIZACAO_ENTREGA CPT_AUT_ENT 
        ON 
        CPT_AUT_ENT.NU_CONTRATO_SAP = EC_I.NU_CONTRATO_SAP
        AND CPT_AUT_ENT.CD_ITEM_CONTRATO = EC_I.CD_ITEM_CONTRATO

        INNER JOIN CPT.ENTREGA CPT_ENT
        ON CPT_AUT_ENT.CD_AUTORIZACAO_ENTREGA = CPT_ENT.CD_AUTORIZACAO_ENTREGA
        WHERE 
        EC_I.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
        AND EC_I.CD_ELO_AGENDAMENTO_ITEM = EC.CD_ELO_AGENDAMENTO_ITEM
        AND  AUTOR.NU_DOCUMENTO = CPT_ENT.NU_PROTOCOLO_ENTREGA
                               AND CPT_ENT.SG_STATUS NOT IN ('C', 'P')
        GROUP BY EC_I.CD_ELO_AGENDAMENTO),0) - 
        NVL((SELECT SUM(VBAKPROT.QT_AGENDADA_PROTOCOLO) QT_AGENDADA_PROTOCOLO
        FROM VND.ELO_VBAK_PROTOCOLO VBAKPROT 
        WHERE 
        VBAKPROT.NU_PROTOCOLO = AUTOR.NU_DOCUMENTO
        AND EXISTS (SELECT 1 FROM CTE_CARTEIRA_THIS_WEEK CTA_WEEK WHERE VBAKPROT.CD_ELO_CARTEIRA = CTA_WEEK.CD_ELO_CARTEIRA)  --CONSIDER ONLY THIS WEEK
        AND VBAKPROT.IC_ATIVO = 'S'), 0)
        
        SALDO_ORDEM_VENDA_PROTOCOLO

        ,NVL((SELECT SUM(EAG_GRO_I.QT_AGENDADA)  QT_AGENDADA
        FROM VND.ELO_AGENDAMENTO_SUPERVISOR AGSUP
        INNER JOIN VND.ELO_AGENDAMENTO_ITEM AG_ITEM
        ON AGSUP.CD_ELO_AGENDAMENTO_SUPERVISOR = AG_ITEM.CD_ELO_AGENDAMENTO_SUPERVISOR
        AND AGSUP.IC_ATIVO = 'S'
        AND AG_ITEM.IC_ATIVO = 'S'
        INNER JOIN VND.ELO_AGENDAMENTO_WEEK EAG_WE_I
        ON AG_ITEM.CD_ELO_AGENDAMENTO_ITEM = EAG_WE_I.CD_ELO_AGENDAMENTO_ITEM
        INNER JOIN VND.ELO_AGENDAMENTO_GROUPING EAG_GRO_I
        ON EAG_GRO_I.CD_ELO_AGENDAMENTO_WEEK = EAG_WE_I.CD_ELO_AGENDAMENTO_WEEK
        WHERE 
        EC.CD_ELO_AGENDAMENTO = AGSUP.CD_ELO_AGENDAMENTO
        AND EC.CD_ELO_AGENDAMENTO_ITEM = AG_ITEM.CD_ELO_AGENDAMENTO_ITEM
        AND EXISTS (SELECT 1 FROM CTE_GROUPING AGINT 
        WHERE AGINT.CD_ELO_AGENDAMENTO_GROUPING = EAG_GRO_I.CD_ELO_AGENDAMENTO_GROUPING)

        AND EAG_GRO_I.NU_DOCUMENTO = AUTOR.NU_DOCUMENTO
        AND EAG_GRO_I.SG_TIPO_DOCUMENTO = 'P'
        ),0) QT_AGENDADA
        , AUTOR.DT_SUGESTAO_ENTREGA
        , AUTOR.NU_DOCUMENTO
        , VBAK_PROT.QT_AGENDADA_PROTOCOLO QT_PROTOCOLO
        , case 
        when nvl(AUTOR.QT_AGENDADA_ENTREGA - 
                    NVL((SELECT SUM( DISPS.QT_AGENDADA_PROTOCOLO) QT_AGENDADA_PROTOCOLO 
                    FROM CTE_DISPONIBILIDADE_PROT DISPS 
                    WHERE 
                    DISPS.NU_CONTRATO_SAP = EC.NU_CONTRATO_SAP
                    AND DISPS.CD_ITEM_CONTRATO = EC.CD_ITEM_CONTRATO
                    AND DISPS.NU_PROTOCOLO =  VBAK_PROT.NU_PROTOCOLO
                    GROUP BY  VBAK_PROT.NU_PROTOCOLO),0),0) <= 0 then 0 else 
                    (AUTOR.QT_AGENDADA_ENTREGA - 
                    NVL((SELECT SUM( DISPS.QT_AGENDADA_PROTOCOLO) QT_AGENDADA_PROTOCOLO 
                    FROM CTE_DISPONIBILIDADE_PROT DISPS 
                    WHERE 
                    DISPS.NU_CONTRATO_SAP = EC.NU_CONTRATO_SAP
                    AND DISPS.CD_ITEM_CONTRATO = EC.CD_ITEM_CONTRATO
                    AND DISPS.NU_PROTOCOLO =  VBAK_PROT.NU_PROTOCOLO
                    GROUP BY  VBAK_PROT.NU_PROTOCOLO),0)) end                                   
                    QT_AGENDADA_ENTREGA --ADD NICK
                    
        
        , VBAK_PROT.NU_PROTOCOLO
        --, PED.*

        FROM CTE_CARTEIRA EC 
--        INNER JOIN VND.PEDIDO PED     -- RETIRADO POIS NEM TODOS CONTRATOS 
--        ON PED.NU_ORDEM_VENDA = EC.NU_ORDEM_VENDA 
--        AND PED.CD_ITEM_PEDIDO = EC.CD_ITEM_PEDIDO  



        INNER JOIN CTE_AGENDAMENTO EA 
        ON EA.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_STATUS E_ST_AG
        ON EA.CD_ELO_STATUS = E_ST_AG.CD_ELO_STATUS  
        LEFT JOIN (

        SELECT 
        EA_SUP_SC.CD_ELO_AGENDAMENTO , 
        EAG_ITEM_SC.CD_ELO_AGENDAMENTO_ITEM, 
        EAG_GRO_SC.NU_DOCUMENTO NU_DOCUMENTO,
        CPT_ENTSC.DT_SUGESTAO_ENTREGA, 
        CPT_AUT_ENTSC.NU_CONTRATO,
        CPT_AUT_ENTSC.NU_ORDEM_VENDA,
        CPT_AUT_ENTSC.CD_ITEM_CONTRATO,
        CPT_AUT_ENTSC.NU_CONTRATO_SAP,
        EAG_GRO_SC.QT_AGENDADA QT_AGENDADA_ENTREGA,
        CPT_AUT_ENTSC.CD_COOPERADO, 
        CPT_AUT_ENTSC.CD_PROPRIEDADE,
        CPT_AUT_ENTSC.CD_COOPERATIVA_FILIAL,
        NVL(PROP_COOP.CD_CLIENTE, COOP_FILIAL.CD_CLIENTE) CD_CLIENTE_PROP_OR_FILIAL


        FROM VND.ELO_AGENDAMENTO_SUPERVISOR EA_SUP_SC  
        INNER JOIN VND.ELO_AGENDAMENTO_ITEM EAG_ITEM_SC
        ON EAG_ITEM_SC.CD_ELO_AGENDAMENTO_SUPERVISOR = EA_SUP_SC.CD_ELO_AGENDAMENTO_SUPERVISOR
        AND EAG_ITEM_SC.IC_ATIVO = 'S' 
        INNER JOIN VND.ELO_AGENDAMENTO_WEEK EAG_WE_SC
        ON EAG_ITEM_SC.CD_ELO_AGENDAMENTO_ITEM = EAG_WE_SC.CD_ELO_AGENDAMENTO_ITEM
        INNER JOIN VND.ELO_AGENDAMENTO_GROUPING EAG_GRO_SC
        ON EAG_GRO_SC.CD_ELO_AGENDAMENTO_WEEK = EAG_WE_SC.CD_ELO_AGENDAMENTO_WEEK
        AND EAG_GRO_SC.SG_TIPO_DOCUMENTO = 'P'
        INNER JOIN CPT.ENTREGA CPT_ENTSC
        ON CPT_ENTSC.NU_PROTOCOLO_ENTREGA = EAG_GRO_SC.NU_DOCUMENTO
        INNER JOIN CPT.AUTORIZACAO_ENTREGA CPT_AUT_ENTSC 
        ON CPT_AUT_ENTSC.CD_AUTORIZACAO_ENTREGA = CPT_ENTSC.CD_AUTORIZACAO_ENTREGA        
        LEFT JOIN CPT.PROPRIEDADE_COOPERADO PROP_COOP
        ON PROP_COOP.CD_PROPRIEDADE =  CPT_AUT_ENTSC.CD_PROPRIEDADE 
        LEFT JOIN CPT.COOPERATIVA_FILIAL COOP_FILIAL
        ON COOP_FILIAL.CD_COOPERATIVA_FILIAL = CPT_AUT_ENTSC.CD_COOPERATIVA_FILIAL        
        WHERE 
        EA_SUP_SC.IC_ATIVO = 'S'
                               AND CPT_ENTSC.SG_STATUS NOT IN ('C', 'P')
        AND EXISTS (SELECT 1 FROM CTE_GROUPING AGINT WHERE AGINT.CD_ELO_AGENDAMENTO_GROUPING = EAG_GRO_SC.CD_ELO_AGENDAMENTO_GROUPING)

        UNION

        SELECT 
        EACT.CD_ELO_AGENDAMENTO,
        EACT.CD_ELO_AGENDAMENTO_ITEM,
        CPT_ENTSC.NU_PROTOCOLO_ENTREGA NU_DOCUMENTO,
        CPT_ENTSC.DT_SUGESTAO_ENTREGA, 
        CPT_AUT_ENTSC.NU_CONTRATO,
        CPT_AUT_ENTSC.NU_ORDEM_VENDA,
        CPT_AUT_ENTSC.CD_ITEM_CONTRATO,
        CPT_AUT_ENTSC.NU_CONTRATO_SAP,
        NVL(CPT_ENTSC.QT_QUANTIDADE,0) - NVL(CPT_ENTSC.QT_FORNECIDO,0) QT_AGENDADA_ENTREGA,
        CPT_AUT_ENTSC.CD_COOPERADO, 
        CPT_AUT_ENTSC.CD_PROPRIEDADE,
        CPT_AUT_ENTSC.CD_COOPERATIVA_FILIAL,
        NVL(PROP_COOP.CD_CLIENTE, COOP_FILIAL.CD_CLIENTE) CD_CLIENTE_PROP_OR_FILIAL

        FROM CTE_CARTEIRA EACT
        INNER JOIN CPT.AUTORIZACAO_ENTREGA CPT_AUT_ENTSC 
        ON CPT_AUT_ENTSC.NU_CONTRATO_SAP = EACT.NU_CONTRATO_SAP
        AND CPT_AUT_ENTSC.CD_ITEM_CONTRATO = EACT.CD_ITEM_CONTRATO
        INNER JOIN CPT.ENTREGA CPT_ENTSC
        ON CPT_AUT_ENTSC.CD_AUTORIZACAO_ENTREGA = CPT_ENTSC.CD_AUTORIZACAO_ENTREGA        
        LEFT JOIN CPT.PROPRIEDADE_COOPERADO PROP_COOP
        ON PROP_COOP.CD_PROPRIEDADE =  CPT_AUT_ENTSC.CD_PROPRIEDADE 
        LEFT JOIN CPT.COOPERATIVA_FILIAL COOP_FILIAL
        ON COOP_FILIAL.CD_COOPERATIVA_FILIAL = CPT_AUT_ENTSC.CD_COOPERATIVA_FILIAL

        LEFT JOIN VND.CTE_GROUPING  EAG_GRO_SC
        ON CPT_ENTSC.NU_PROTOCOLO_ENTREGA = EAG_GRO_SC.NU_DOCUMENTO

        WHERE 
        EACT.CD_ELO_CARTEIRA IS NOT NULL
        AND EAG_GRO_SC.NU_DOCUMENTO IS NULL
                               AND CPT_ENTSC.SG_STATUS NOT IN ('C', 'P')

        --AND EAG_ITEM_SC.CD_ELO_AGENDAMENTO_ITEM = EC.CD_ELO_AGENDAMENTO_ITEM
        --AND EA_SUP_SC.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
        ) AUTOR 
        ON
        AUTOR.CD_ELO_AGENDAMENTO = EC.CD_ELO_AGENDAMENTO
        AND AUTOR.CD_ELO_AGENDAMENTO_ITEM = EC.CD_ELO_AGENDAMENTO_ITEM
        LEFT JOIN CTF.CLIENTE CLI
        ON 
        AUTOR.CD_CLIENTE_PROP_OR_FILIAL = CLI.CD_CLIENTE
        
        LEFT JOIN VND.ELO_VBAK_PROTOCOLO VBAK_PROT
        ON
        VBAK_PROT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA
        AND VBAK_PROT.IC_ATIVO = 'S'
        AND VBAK_PROT.NU_PROTOCOLO = AUTOR.NU_DOCUMENTO

        WHERE 
        EC.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        ORDER BY EC.NU_ORDEM ASC, AUTOR.NU_DOCUMENTO ASC;

  END PX_CELL_ATTENDANCE_PROTOCOLO;



   PROCEDURE PU_CELL_ATTENDANCE_UPROT(
        P_CD_ELO_CARTEIRA            IN VND.ELO_VBAK_PROTOCOLO.CD_ELO_CARTEIRA%TYPE,
        P_QT_PROTOCOLO              IN VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE,
        P_NU_PROTOCOLO              IN VND.ELO_VBAK_PROTOCOLO.NU_PROTOCOLO%TYPE,
        P_RETORNO                    OUT T_CURSOR)

    AS

    V_TRAVA VARCHAR2(1):='N';
    V_CD_ENTREGA CPT.ENTREGA.CD_ENTREGA%TYPE;
    V_CD_ELO_VBAK VND.ELO_VBAK.CD_ELO_VBAK%TYPE;
    V_CD_ELO_VBAK_PROTOCOLO VND.ELO_VBAK_PROTOCOLO.CD_ELO_VBAK_PROTOCOLO%TYPE;
    V_CD_AUTORIZACAO_ENTREGA CPT.ENTREGA.CD_AUTORIZACAO_ENTREGA%TYPE;
    V_TOTAL_PROTOCOLO  VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE;
    V_QT_AGENDADA_CONFIRMADA VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE;
    

   BEGIN
   
 
    BEGIN 
        SELECT ENT.CD_ENTREGA, ENT.CD_AUTORIZACAO_ENTREGA INTO V_CD_ENTREGA, V_CD_AUTORIZACAO_ENTREGA
        FROM CPT.ENTREGA ENT 
        WHERE ENT.NU_PROTOCOLO_ENTREGA = P_NU_PROTOCOLO 
        AND ENT.SG_STATUS NOT IN ('P', 'C')
        AND ROWNUM = 1;
     EXCEPTION
                    WHEN NO_DATA_FOUND THEN 
            V_TRAVA:='S';
        WHEN OTHERS THEN 
                               
        BEGIN
                        RAISE_APPLICATION_ERROR(
                -20001,
                'ERRO ENCONTRADOCP - '
                 || SQLCODE
                 || ' -ERROR- '
                 || SQLERRM
            );
        
            V_TRAVA:='S';
            END;

    END;

    IF V_TRAVA = 'N' THEN 
    BEGIN

        BEGIN  

            MERGE INTO VND.ELO_VBAK VBAK_DEST
            USING 
            (
            SELECT DISTINCT

                                               VBAK.CD_ELO_VBAK ,
                                               E_CT.NU_CONTRATO_SAP,
                                               E_CT.CD_ITEM_CONTRATO ,
                                               E_CT.NU_CONTRATO,
                                               E_CT.QT_PROGRAMADA 

            FROM VND.ELO_CARTEIRA E_CT
                                               LEFT JOIN VND.ELO_VBAK VBAK 
                                               ON 
                                               E_CT.NU_CONTRATO_SAP = VBAK.NU_CONTRATO_SAP
                                               AND E_CT.CD_ITEM_CONTRATO = VBAK.CD_ITEM_CONTRATO                                             

            WHERE 
                                               E_CT.IC_ATIVO = 'S'
                                               AND E_CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA


            ) BASE_EXIST

            ON
            ( BASE_EXIST.CD_ELO_VBAK = VBAK_DEST.CD_ELO_VBAK )
            WHEN MATCHED THEN 
                UPDATE SET 
                VBAK_DEST.DH_MODIFICACAO_CONTRATO_SAP = CURRENT_DATE,
                VBAK_DEST.IC_ATIVO = 'S' 
             WHEN NOT MATCHED THEN
             INSERT 
             ( 
                                CD_ELO_VBAK,
                                                               NU_CONTRATO_SAP, 
                                                               CD_ITEM_CONTRATO,
                                                               NU_CONTRATO,
                                                               QT_PROGRAMADA, 
                                                               QT_PROGRAMADA_CONSUMIDA,
                                                               IC_ATIVO,
                                                               CD_USUARIO_CONTRATO_SAP, 
                                                               DH_MODIFICACAO_CONTRATO_SAP

               )
                VALUES ( 
                VND.SEQ_ELO_VBAK.NEXTVAL, --CD_ELO_VBAK,
                                                               BASE_EXIST.NU_CONTRATO_SAP, 
                                                               BASE_EXIST.CD_ITEM_CONTRATO,
                                                               BASE_EXIST.NU_CONTRATO,
                                                               BASE_EXIST.QT_PROGRAMADA, 
                                                               0, --QT_PROGRAMADA_CONSUMIDA,
                                                               'S' , --IC_ATIVO,
                                                               4198 , --CD_USUARIO_CONTRATO_SAP, 
                                                               CURRENT_DATE --DH_MODIFICACAO_CONTRATO_SAP

                );

            COMMIT;


        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
            V_TRAVA:='N';
            
            WHEN OTHERS THEN
            
            
                BEGIN
                                                                              V_TRAVA:='S';
  
                            RAISE_APPLICATION_ERROR(
                    -20001,
                    'ERRO ENCONTRADO - '
                     || SQLCODE
                     || ' -ERROR- '
                     || SQLERRM
                );
                    
                END;
        END;
        
        END;
        
    END IF;
        
    
    IF V_TRAVA = 'N' THEN 

    BEGIN
    
    SELECT VB.CD_ELO_VBAK INTO V_CD_ELO_VBAK
    FROM VND.ELO_VBAK VB 
    INNER JOIN VND.ELO_CARTEIRA CT 
    ON 
    CT.NU_CONTRATO_SAP = VB.NU_CONTRATO_SAP 
    AND VB.CD_ITEM_CONTRATO = CT.CD_ITEM_CONTRATO
    WHERE CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA AND ROWNUM = 1;       
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
        V_TRAVA:='S';
        
        WHEN OTHERS THEN
        
            BEGIN
                V_TRAVA:='S';

                        RAISE_APPLICATION_ERROR(
                -20001,
                'ERRO ENCONTRADOELO - '
                 || SQLCODE
                 || ' -ERROR- '
                 || SQLERRM
            );
                
            END;
    END;
    
    END IF;
    
    IF V_TRAVA = 'N' THEN 

        BEGIN  
        
        
        SELECT 
        VBPROT.CD_ELO_VBAK_PROTOCOLO  INTO V_CD_ELO_VBAK_PROTOCOLO

        FROM VND.ELO_VBAK VBAK 
        INNER JOIN VND.ELO_VBAK_PROTOCOLO VBPROT
        ON
        VBAK.CD_ELO_VBAK = VBPROT.CD_ELO_VBAK
        AND VBPROT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND VBPROT.NU_PROTOCOLO = P_NU_PROTOCOLO
        WHERE 
        VBAK.IC_ATIVO = 'S';
        --AND VBPROT.IC_ATIVO = 'S' ;   
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
            V_TRAVA:='N';
            
            WHEN OTHERS THEN
            
                BEGIN
                                                                              V_TRAVA:='S';
  
                            RAISE_APPLICATION_ERROR(
                    -20001,
                    'ERRO ENCONTRADOPTT - '
                     || SQLCODE
                     || ' -ERROR- '
                     || SQLERRM
                );
                    
                END;
        END;
        
    END IF;
    
    IF V_TRAVA = 'N' THEN          
    
    IF NVL(V_CD_ELO_VBAK_PROTOCOLO, 0) = 0 THEN 
    BEGIN
    
       INSERT INTO VND.ELO_VBAK_PROTOCOLO
         ( 
            CD_ELO_VBAK_PROTOCOLO,
            CD_ELO_VBAK,
            CD_ELO_CARTEIRA,
            CD_ENTREGA,
            NU_PROTOCOLO,
            QT_AGENDADA_PROTOCOLO,
            IC_ATIVO,
            CD_USUARIO_PROTOCOLO, 
            DH_MODIFICACAO_PROTOCOLO
           )
            VALUES ( 
            VND.SEQ_ELO_VBAK_PROTOCOLO.NEXTVAL, --CD_ELO_VBAK_PROTOCOLO,
            V_CD_ELO_VBAK,
            P_CD_ELO_CARTEIRA, -- CD_ELO_CARTEIRA,
            V_CD_AUTORIZACAO_ENTREGA,
            P_NU_PROTOCOLO, -- NU_PROTOCOLO,
            P_QT_PROTOCOLO, -- QT_AGENDADA_PROTOCOLO,
            'S', -- IC_ATIVO, 
            4198, -- CD_USUARIO_PROTOCOLO,
            CURRENT_DATE -- DH_MODIFICACAO_PROTOCOLO
            );
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
            V_TRAVA:='S';
            RAISE_APPLICATION_ERROR(
                -20001,
                'ERRO ENCONTRADOINSPROT - '
                 || SQLCODE
                 || ' -ERROR- '
                 || SQLERRM
            );
    
           END;
    END;
    
    
    ELSE
    BEGIN
    
        BEGIN
        SELECT SUM( PROT.QT_AGENDADA_PROTOCOLO) TT, MIN(CAT.QT_AGENDADA_CONFIRMADA) QT
        INTO V_TOTAL_PROTOCOLO, V_QT_AGENDADA_CONFIRMADA
        FROM VND.ELO_VBAK_PROTOCOLO PROT
        INNER JOIN VND.ELO_CARTEIRA CAT
        ON PROT.CD_ELO_CARTEIRA = CAT.CD_ELO_CARTEIRA
        WHERE 
        PROT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND (CAT.CD_TIPO_AGENDAMENTO IN (22,23,24) OR (CAT.CD_TIPO_AGENDAMENTO = 25 AND CAT.CD_STATUS_REPLAN = 32))
        ; 
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
        V_TOTAL_PROTOCOLO:=0;
        V_QT_AGENDADA_CONFIRMADA:=0;
        WHEN OTHERS THEN 
        V_TOTAL_PROTOCOLO:=0;
        V_QT_AGENDADA_CONFIRMADA:=0;
        
        END;   
        
        V_TOTAL_PROTOCOLO:=NVL(V_TOTAL_PROTOCOLO,0) + ABS(NVL(P_QT_PROTOCOLO,0));
        
        IF V_TOTAL_PROTOCOLO <= V_QT_AGENDADA_CONFIRMADA THEN     

            BEGIN
            UPDATE VND.ELO_VBAK_PROTOCOLO
            SET 
            QT_AGENDADA_PROTOCOLO = P_QT_PROTOCOLO ,
            DH_MODIFICACAO_PROTOCOLO = CURRENT_DATE,
            IC_ATIVO = 'S' 
            WHERE
            CD_ELO_VBAK_PROTOCOLO = V_CD_ELO_VBAK_PROTOCOLO;
            COMMIT;
            EXCEPTION
            WHEN OTHERS THEN
            BEGIN
            V_TRAVA:='S';
            RAISE_APPLICATION_ERROR(
                -20001,
                'ERRO ENCONTRADOUPDPROT - '
                 || SQLCODE
                 || ' -ERROR- '
                 || SQLERRM
            );

            END;
            END;
        END IF;    
        
        
    END;
    
    END IF;
    
    END IF;
    
    OPEN P_RETORNO FOR
    SELECT CASE WHEN V_TRAVA = 'N' THEN 1 ELSE 0 END  AS P_SUCESSO
    FROM DUAL;       
        


    END PU_CELL_ATTENDANCE_UPROT;

   PROCEDURE PU_CARTEIRA_GROUPING_LAST(
        P_CD_ELO_CARTEIRA            IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        P_RETORNO                    OUT T_CURSOR)

    AS

    V_TRAVA VARCHAR2(1):='N';
    V_CD_STATUS_TORRE_FRETES VND.ELO_CARTEIRA.CD_STATUS_TORRE_FRETES%TYPE;
    V_CD_CARTEIRA_PERTENCE   VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;
    V_CD_CARTEIRA_GROUPING  VND.ELO_CARTEIRA.CD_ELO_CARTEIRA_GROUPING%TYPE;  
    V_CD_CARTEIRA_SECOND   VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;
    
    V_REUSE_CD_CARTEIRA_GROUPING  VND.ELO_CARTEIRA.CD_ELO_CARTEIRA_GROUPING%TYPE;  
    
    V_GROUP_CHANGE         VARCHAR2(1):='N';
    
    CURSOR C_TORRE_FRETES  IS
    
    SELECT DISTINCT 
    CT.CD_ELO_CARTEIRA_GROUPING,
    CT.NU_ORDEM_VENDA, 
    CT.CD_PRODUTO_SAP, 
    CT.CD_GRUPO_EMBALAGEM, 
    CT.CD_CLIENTE,
    CT.CD_INCOTERMS, 
    TTUPDATE.CD_ELO_CARTEIRA,
    CT.CD_ELO_AGENDAMENTO,
    CT.CD_TIPO_AGENDAMENTO,
    CT.CD_CENTRO_EXPEDIDOR
    
    FROM VND.ELO_CARTEIRA_GROUPING CT
    INNER JOIN VND.ELO_CARTEIRA CC
    ON CT.CD_ELO_AGENDAMENTO = CC.CD_ELO_AGENDAMENTO
    AND CT.CD_ELO_CARTEIRA = CC.CD_ELO_CARTEIRA
    INNER JOIN VND.ELO_CARTEIRA TTUPDATE
    ON 
    CT.NU_ORDEM_VENDA= TTUPDATE.NU_ORDEM_VENDA
    AND CT.CD_PRODUTO_SAP= TTUPDATE.CD_PRODUTO_SAP
    AND CT.CD_GRUPO_EMBALAGEM= TTUPDATE.CD_GRUPO_EMBALAGEM
    AND CT.CD_CLIENTE= TTUPDATE.CD_CLIENTE_RECEBEDOR
    AND CT.CD_INCOTERMS= TTUPDATE.CD_INCOTERMS
    AND CT.CD_ELO_AGENDAMENTO= TTUPDATE.CD_ELO_AGENDAMENTO
    --AND CT.CD_TIPO_AGENDAMENTO= TTUPDATE.CD_TIPO_AGENDAMENTO  -- DESTROY GROUPING
    AND CT.CD_TIPO_AGENDAMENTO = TTUPDATE.CD_ELO_CARTEIRA   -- ADD  CARTEIRA
    AND CT.CD_CENTRO_EXPEDIDOR = TTUPDATE.CD_CENTRO_EXPEDIDOR
    
    WHERE 
    CC.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA -- 134125
    AND TTUPDATE.CD_ELO_CARTEIRA_GROUPING IS NULL   ;

    BEGIN
    
    
    BEGIN 
    UPDATE VND.ELO_CARTEIRA 
    SET NU_ORDEM_VENDA = NVL(NU_ORDEM_VENDA, '0'),
    CD_TIPO_AGENDAMENTO = NVL(CD_TIPO_AGENDAMENTO, 22)
    WHERE CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA--134125
    AND QT_AGENDADA_CONFIRMADA > 0
    AND (NU_ORDEM_VENDA IS NULL OR CD_TIPO_AGENDAMENTO IS NULL)
    AND CD_ELO_CARTEIRA_GROUPING IS NULL;
    COMMIT;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        V_TRAVA:='N';
        WHEN OTHERS THEN
            BEGIN
                V_TRAVA:='S';
                
             RAISE_APPLICATION_ERROR(
                    -20001,
                    'ERRO ENCONTRADO - '
                     || SQLCODE
                     || ' -ERROR- '
                     || SQLERRM
                );
                
            END;
    END;   
 

    BEGIN
    SELECT 'N' INTO V_GROUP_CHANGE 
    
    FROM VND.ELO_CARTEIRA_GROUPING GR  
    INNER JOIN VND.ELO_CARTEIRA ICT 
    ON (NVL(ICT.NU_ORDEM_VENDA,0) = GR.NU_ORDEM_VENDA 
    AND ICT.CD_PRODUTO_SAP = GR.CD_PRODUTO_SAP
    AND ICT.CD_GRUPO_EMBALAGEM = GR.CD_GRUPO_EMBALAGEM
    AND ICT.CD_CLIENTE_RECEBEDOR = GR.CD_CLIENTE
    AND ICT.CD_INCOTERMS = GR.CD_INCOTERMS
    --AND ICT.CD_ELO_CARTEIRA = GR.CD_ELO_CARTEIRA
    AND ICT.CD_ELO_AGENDAMENTO = GR.CD_ELO_AGENDAMENTO
    AND ICT.CD_CENTRO_EXPEDIDOR = GR.CD_CENTRO_EXPEDIDOR
    --AND ICT.CD_TIPO_AGENDAMENTO = GR.CD_TIPO_AGENDAMENTO -- DESTROY GROUPING
    AND ICT.CD_ELO_CARTEIRA = GR.CD_TIPO_AGENDAMENTO -- ADD CARTEIRA
    )
    
    WHERE ICT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA --134125  
    AND ROWNUM = 1 ;
    

    EXCEPTION
    WHEN NO_DATA_FOUND THEN 
    V_GROUP_CHANGE:='S';
    WHEN OTHERS THEN 
    V_GROUP_CHANGE:='N';
    END;

    V_GROUP_CHANGE:= NVL(V_GROUP_CHANGE, 'S');
    
    
    IF V_GROUP_CHANGE= 'N'  THEN 
       BEGIN 
       UPDATE VND.ELO_CARTEIRA ICT
       SET ICT.CD_ELO_CARTEIRA_GROUPING = 
           (SELECT GR.CD_ELO_CARTEIRA_GROUPING FROM VND.ELO_CARTEIRA_GROUPING GR
           WHERE
            NVL(ICT.NU_ORDEM_VENDA,0) = NVL(GR.NU_ORDEM_VENDA,0) 
            AND ICT.CD_PRODUTO_SAP = GR.CD_PRODUTO_SAP
            AND ICT.CD_GRUPO_EMBALAGEM = GR.CD_GRUPO_EMBALAGEM
            AND ICT.CD_CLIENTE_RECEBEDOR = GR.CD_CLIENTE
            AND ICT.CD_INCOTERMS = GR.CD_INCOTERMS
            --AND ICT.CD_ELO_CARTEIRA = GR.CD_ELO_CARTEIRA
            AND ICT.CD_ELO_AGENDAMENTO = GR.CD_ELO_AGENDAMENTO
            AND ICT.CD_CENTRO_EXPEDIDOR = GR.CD_CENTRO_EXPEDIDOR
            --AND ICT.CD_TIPO_AGENDAMENTO = GR.CD_TIPO_AGENDAMENTO -- DESTROY GROUPING
            AND ICT.CD_ELO_CARTEIRA = GR.CD_TIPO_AGENDAMENTO  -- ADD CARTEIRA
            AND ROWNUM = 1)
            --, ICT.SG_DESTINO_BACKLOG_CIF = NVL(ICT.SG_DESTINO_BACKLOG_CIF, 'CSHIP')
       
       WHERE 
       ICT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA; 
       --AND ICT.CD_ELO_CARTEIRA_GROUPING IS NULL;
       COMMIT;
       
        EXCEPTION
        WHEN NO_DATA_FOUND THEN 
        V_GROUP_CHANGE:='N';
        WHEN OTHERS THEN 
        V_GROUP_CHANGE:='N';
        END;
       
   END IF;    

    IF V_GROUP_CHANGE= 'S'  THEN 
    BEGIN --- GROUP CHANGE OR NOTHING
    
            BEGIN
            SELECT X.CD_ELO_CARTEIRA, X.CD_ELO_CARTEIRA_GROUPING, 
            NVL((SELECT SE.CD_ELO_CARTEIRA 
            FROM VND.ELO_CARTEIRA SE 
            WHERE SE.CD_ELO_CARTEIRA_GROUPING = X.CD_ELO_CARTEIRA_GROUPING 
            AND SE.CD_ELO_CARTEIRA NOT IN(P_CD_ELO_CARTEIRA) AND ROWNUM=1),0) 
            INTO V_CD_CARTEIRA_PERTENCE, V_CD_CARTEIRA_GROUPING, V_CD_CARTEIRA_SECOND
            FROM VND.ELO_CARTEIRA_GROUPING X 
            WHERE X.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA AND ROWNUM =1; 
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
            BEGIN 
            V_CD_CARTEIRA_PERTENCE:=0;
            V_CD_CARTEIRA_SECOND:=0;
            
            END;
            WHEN OTHERS THEN 
            BEGIN
            V_TRAVA:='S';
            V_CD_CARTEIRA_PERTENCE:=0;
            V_CD_CARTEIRA_SECOND:=0;
            END;
            
            
            END;
            
            
            IF NVL(V_CD_CARTEIRA_SECOND,0) = 0 THEN  
                BEGIN
                DELETE FROM VND.ELO_CARTEIRA_GROUPING GR WHERE GR.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;

                COMMIT;
                EXCEPTION
                WHEN OTHERS THEN
                    V_TRAVA:='N';
                END;
            ELSE
                BEGIN  
                UPDATE VND.ELO_CARTEIRA_GROUPING 
                SET CD_ELO_CARTEIRA = V_CD_CARTEIRA_SECOND
                WHERE 
                CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;
                --AND NU_ORDEM_VENDA = '0';
                COMMIT;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    V_TRAVA:='N';
                WHEN OTHERS THEN
                    BEGIN
                        V_TRAVA:='S';
                    END;
            
                END;
            END IF;
            
            
            BEGIN 
            INSERT INTO VND.ELO_CARTEIRA_GROUPING
            (CD_ELO_CARTEIRA_GROUPING,NU_ORDEM_VENDA, CD_PRODUTO_SAP, CD_GRUPO_EMBALAGEM, CD_CLIENTE, 
            CD_INCOTERMS, CD_ELO_CARTEIRA , CD_ELO_AGENDAMENTO, CD_TIPO_AGENDAMENTO, CD_CENTRO_EXPEDIDOR)
        
            WITH CTE_BEFORE_GROUPING AS (
            SELECT 
            --SEQ_ELO_CARTEIRA_GROUPING.NEXTVAL,
            CT.NU_ORDEM_VENDA, 
            CT.CD_PRODUTO_SAP, 
            CT.CD_GRUPO_EMBALAGEM,  
            CT.CD_CLIENTE_RECEBEDOR,
            CT.CD_INCOTERMS, 
            CT.CD_ELO_CARTEIRA,
            
            CT.CD_ELO_AGENDAMENTO,
            --CT.CD_TIPO_AGENDAMENTO, --DESTROY GROUPING 
            CT.CD_ELO_CARTEIRA  CD_TIPO_AGENDAMENTO, --ADD CARTEIRA 
            CT.CD_CENTRO_EXPEDIDOR
            FROM VND.ELO_CARTEIRA CT
            INNER JOIN (SELECT DISTINCT MIN(X.CD_ELO_CARTEIRA) CD_ELO_CARTEIRA 
            FROM VND.ELO_CARTEIRA X 
            WHERE X.IC_ATIVO = 'S'
            AND X.NU_ORDEM_VENDA IS NOT NULL
            AND X.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA -- 134125
            AND X.CD_INCOTERMS = 'CIF'
            GROUP BY X.NU_ORDEM_VENDA, X.CD_PRODUTO_SAP, X.CD_GRUPO_EMBALAGEM, X.CD_INCOTERMS, 
            --X.CD_CLIENTE_RECEBEDOR, X.CD_ELO_AGENDAMENTO, X.CD_TIPO_AGENDAMENTO, X.CD_CENTRO_EXPEDIDOR  -- DESTROY GROUPING
            X.CD_CLIENTE_RECEBEDOR, X.CD_ELO_AGENDAMENTO, X.CD_ELO_CARTEIRA, X.CD_CENTRO_EXPEDIDOR  -- ADD CARTEIRA
            ) WHOISMIN
            ON
            WHOISMIN.CD_ELO_CARTEIRA = CT.CD_ELO_CARTEIRA
            
            WHERE CT.IC_ATIVO = 'S'
            AND CT.CD_INCOTERMS = 'CIF'
            AND CT.CD_GRUPO_EMBALAGEM IS NOT NULL 
            AND CT.NU_ORDEM_VENDA IS NOT NULL
            AND CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
            )
            
            SELECT 
            VND.SEQ_ELO_CARTEIRA_GROUPING.NEXTVAL CD_ELO_CARTEIRA_GROUPING,
            NEWENT.NU_ORDEM_VENDA, NEWENT.CD_PRODUTO_SAP, 
            NEWENT.CD_GRUPO_EMBALAGEM, NEWENT.CD_CLIENTE_RECEBEDOR, NEWENT.CD_INCOTERMS, 
            NEWENT.CD_ELO_CARTEIRA , NEWENT.CD_ELO_AGENDAMENTO, NEWENT.CD_TIPO_AGENDAMENTO, NEWENT.CD_CENTRO_EXPEDIDOR
        
            FROM CTE_BEFORE_GROUPING NEWENT
            LEFT JOIN VND.ELO_CARTEIRA_GROUPING ct
            ON
            NEWENT.CD_ELO_AGENDAMENTO = ct.CD_ELO_AGENDAMENTO
            AND NEWENT.NU_ORDEM_VENDA = ct.NU_ORDEM_VENDA
            AND NEWENT.CD_PRODUTO_SAP = ct.CD_PRODUTO_SAP 
            AND NEWENT.CD_GRUPO_EMBALAGEM = ct.CD_GRUPO_EMBALAGEM 
            AND NEWENT.CD_INCOTERMS = CT.CD_INCOTERMS
            AND NEWENT.CD_CLIENTE_RECEBEDOR = CT.CD_CLIENTE
            AND NEWENT.CD_TIPO_AGENDAMENTO = ct.CD_TIPO_AGENDAMENTO
            AND NEWENT.CD_CENTRO_EXPEDIDOR = ct.CD_CENTRO_EXPEDIDOR
            WHERE ct.CD_ELO_CARTEIRA_GROUPING is null;
            COMMIT;
        
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                V_TRAVA:='N';
            WHEN OTHERS THEN
                BEGIN
                    V_TRAVA:='S';
                END;
            END;    
                
            IF V_TRAVA = 'N' THEN 
            BEGIN
        
                BEGIN  
                    
                  BEGIN
                    
                    FOR CA IN C_TORRE_FRETES
                    LOOP
                    
                   
                        BEGIN
                        
                        SELECT MAX(CAT.CD_STATUS_TORRE_FRETES ) CD_STATUS_TORRE_FRETES INTO V_CD_STATUS_TORRE_FRETES
                        FROM VND.ELO_CARTEIRA_GROUPING WOIS
                        INNER JOIN VND.ELO_CARTEIRA CAT 
                        ON --CAT.CD_ELO_CARTEIRA = WOIS.CD_ELO_CARTEIRA 
                        CAT.CD_ELO_CARTEIRA_GROUPING = WOIS.CD_ELO_CARTEIRA_GROUPING
                        WHERE WOIS.CD_ELO_CARTEIRA_GROUPING = CA.CD_ELO_CARTEIRA_GROUPING;
                        EXCEPTION
                        WHEN OTHERS THEN 
                            BEGIN
                             V_TRAVA:='S';
                             V_CD_STATUS_TORRE_FRETES:=NULL;
                             END;
                        END;
                    
                        BEGIN 
                    
                        UPDATE VND.ELO_CARTEIRA CT
                        SET CT.CD_ELO_CARTEIRA_GROUPING = CA.CD_ELO_CARTEIRA_GROUPING,
                        CT.CD_STATUS_TORRE_FRETES = V_CD_STATUS_TORRE_FRETES--,
                        
                        --CT.SG_DESTINO_BACKLOG_CIF = NVL(CT.SG_DESTINO_BACKLOG_CIF, 'CSHIP')
                        
                        WHERE 
                        CT.CD_ELO_CARTEIRA = CA.CD_ELO_CARTEIRA;
                        --AND CT.CD_ELO_CARTEIRA_GROUPING is null;
                        COMMIT;
                        
                        EXCEPTION
                        WHEN OTHERS THEN 
                            BEGIN
                             V_TRAVA:='S';
                             
                            END;
                        END;
                        
                    
                    END LOOP;
                    
                    IF C_TORRE_FRETES%ISOPEN THEN
                      CLOSE C_TORRE_FRETES;
                    END IF;
                
                  END;
        
            
                EXCEPTION
                    WHEN OTHERS THEN
                        BEGIN
                            V_TRAVA:='S';
                        END;
                END;
            END;
           
            END IF;
            
    END;  -- GROUP CHANGE OR NOTHING
    END IF;
    
    OPEN P_RETORNO FOR
    SELECT CASE WHEN V_TRAVA = 'N' THEN 1 ELSE 0 END  AS P_SUCESSO
    FROM DUAL; 
 

    END PU_CARTEIRA_GROUPING_LAST;

   PROCEDURE PU_CARTEIRA_GROUPING(
        P_CD_ELO_CARTEIRA            IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        P_RETORNO                    OUT T_CURSOR)

    AS

    V_TRAVA VARCHAR2(1):='N';
    V_CD_STATUS_TORRE_FRETES VND.ELO_CARTEIRA.CD_STATUS_TORRE_FRETES%TYPE;
    V_CD_CARTEIRA_PERTENCE   VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;
    V_CD_CARTEIRA_GROUPING  VND.ELO_CARTEIRA.CD_ELO_CARTEIRA_GROUPING%TYPE;  
    V_CD_CARTEIRA_SECOND   VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;
    
    V_REUSE_CD_CARTEIRA_GROUPING  VND.ELO_CARTEIRA.CD_ELO_CARTEIRA_GROUPING%TYPE;  
    
    V_GROUP_CHANGE         VARCHAR2(1):='N';
    V_TEM_GROUP NUMBER:=0;
    
    
    
    
    CURSOR C_TORRE_FRETES  IS
    
    SELECT DISTINCT 
    CT.CD_ELO_CARTEIRA_GROUPING,
    CT.NU_ORDEM_VENDA, 
    CT.CD_PRODUTO_SAP, 
    CT.CD_GRUPO_EMBALAGEM, 
    CT.CD_CLIENTE,
    CT.CD_INCOTERMS, 
    TTUPDATE.CD_ELO_CARTEIRA,
    CT.CD_ELO_AGENDAMENTO,
    CT.CD_TIPO_AGENDAMENTO,
    CT.CD_CENTRO_EXPEDIDOR
    
    FROM VND.ELO_CARTEIRA_GROUPING CT
    INNER JOIN VND.ELO_CARTEIRA CC
    ON CT.CD_ELO_AGENDAMENTO = CC.CD_ELO_AGENDAMENTO
    AND CT.CD_ELO_CARTEIRA = CC.CD_ELO_CARTEIRA
    INNER JOIN VND.ELO_CARTEIRA TTUPDATE
    ON 
    CT.NU_ORDEM_VENDA= TTUPDATE.NU_ORDEM_VENDA
    AND CT.CD_PRODUTO_SAP= TTUPDATE.CD_PRODUTO_SAP
    AND CT.CD_GRUPO_EMBALAGEM= TTUPDATE.CD_GRUPO_EMBALAGEM
    AND CT.CD_CLIENTE= TTUPDATE.CD_CLIENTE_RECEBEDOR
    AND CT.CD_INCOTERMS= TTUPDATE.CD_INCOTERMS
    AND CT.CD_ELO_AGENDAMENTO= TTUPDATE.CD_ELO_AGENDAMENTO
    --AND CT.CD_TIPO_AGENDAMENTO= TTUPDATE.CD_TIPO_AGENDAMENTO  -- DESTROY GROUPING
    AND CT.CD_TIPO_AGENDAMENTO = TTUPDATE.CD_ELO_CARTEIRA   -- ADD  CARTEIRA
    AND CT.CD_CENTRO_EXPEDIDOR = TTUPDATE.CD_CENTRO_EXPEDIDOR
    
    WHERE 
    CC.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA -- 134125
    AND TTUPDATE.CD_ELO_CARTEIRA_GROUPING IS NULL   ;

    BEGIN
    
    
    BEGIN 
    UPDATE VND.ELO_CARTEIRA 
    SET NU_ORDEM_VENDA = NVL(NU_ORDEM_VENDA, '0'),
    CD_TIPO_AGENDAMENTO = NVL(CD_TIPO_AGENDAMENTO, 22)
    WHERE CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA--134125
    AND QT_AGENDADA_CONFIRMADA > 0
    AND (NU_ORDEM_VENDA IS NULL OR CD_TIPO_AGENDAMENTO IS NULL)
    AND CD_ELO_CARTEIRA_GROUPING IS NULL;
    COMMIT;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        V_TRAVA:='N';
        WHEN OTHERS THEN
            BEGIN
                V_TRAVA:='S';
                
             RAISE_APPLICATION_ERROR(
                    -20001,
                    'ERRO ENCONTRADO - '
                     || SQLCODE
                     || ' -ERROR- '
                     || SQLERRM
                );
                
            END;
    END;   
 
    V_TEM_GROUP:=0;

    BEGIN
    --SELECT 'N' INTO V_GROUP_CHANGE
    SELECT COUNT(1) INTO V_TEM_GROUP
    
    FROM VND.ELO_CARTEIRA_GROUPING GR  
    INNER JOIN VND.ELO_CARTEIRA ICT 
    ON (NVL(ICT.NU_ORDEM_VENDA,0) = GR.NU_ORDEM_VENDA 
    AND ICT.CD_PRODUTO_SAP = GR.CD_PRODUTO_SAP
    AND ICT.CD_GRUPO_EMBALAGEM = GR.CD_GRUPO_EMBALAGEM
    AND ICT.CD_CLIENTE_RECEBEDOR = GR.CD_CLIENTE
    AND ICT.CD_INCOTERMS = GR.CD_INCOTERMS
    --AND ICT.CD_ELO_CARTEIRA = GR.CD_ELO_CARTEIRA
    AND ICT.CD_ELO_AGENDAMENTO = GR.CD_ELO_AGENDAMENTO
    AND ICT.CD_CENTRO_EXPEDIDOR = GR.CD_CENTRO_EXPEDIDOR
    --AND ICT.CD_TIPO_AGENDAMENTO = GR.CD_TIPO_AGENDAMENTO -- DESTROY GROUPING
    AND ICT.CD_ELO_CARTEIRA = GR.CD_TIPO_AGENDAMENTO -- ADD CARTEIRA
    )
    
    WHERE ICT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA --134125  
    ;--AND ROWNUM = 1 ;
    

    EXCEPTION
    WHEN NO_DATA_FOUND THEN 
    V_GROUP_CHANGE:='S';
    WHEN OTHERS THEN 
    V_GROUP_CHANGE:='N';
    END;
    
    V_TEM_GROUP:=NVL(V_TEM_GROUP, 0);
    IF V_TEM_GROUP = 0 THEN
        V_GROUP_CHANGE:='S';
    END IF;

    V_GROUP_CHANGE:= NVL(V_GROUP_CHANGE, 'S');
    
    
    IF V_GROUP_CHANGE= 'N'  THEN 
       BEGIN 
       UPDATE VND.ELO_CARTEIRA ICT
       SET ICT.CD_ELO_CARTEIRA_GROUPING = 
           (SELECT GR.CD_ELO_CARTEIRA_GROUPING FROM VND.ELO_CARTEIRA_GROUPING GR
           WHERE
            NVL(ICT.NU_ORDEM_VENDA,0) = NVL(GR.NU_ORDEM_VENDA,0) 
            AND ICT.CD_PRODUTO_SAP = GR.CD_PRODUTO_SAP
            AND ICT.CD_GRUPO_EMBALAGEM = GR.CD_GRUPO_EMBALAGEM
            AND ICT.CD_CLIENTE_RECEBEDOR = GR.CD_CLIENTE
            AND ICT.CD_INCOTERMS = GR.CD_INCOTERMS
            --AND ICT.CD_ELO_CARTEIRA = GR.CD_ELO_CARTEIRA
            AND ICT.CD_ELO_AGENDAMENTO = GR.CD_ELO_AGENDAMENTO
            AND ICT.CD_CENTRO_EXPEDIDOR = GR.CD_CENTRO_EXPEDIDOR
            --AND ICT.CD_TIPO_AGENDAMENTO = GR.CD_TIPO_AGENDAMENTO -- DESTROY GROUPING
            AND ICT.CD_ELO_CARTEIRA = GR.CD_TIPO_AGENDAMENTO  -- ADD CARTEIRA
            AND ROWNUM = 1)
            --, ICT.SG_DESTINO_BACKLOG_CIF = NVL(ICT.SG_DESTINO_BACKLOG_CIF, 'CSHIP')
       
       WHERE 
       ICT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA; 
       --AND ICT.CD_ELO_CARTEIRA_GROUPING IS NULL;
       COMMIT;
       
        EXCEPTION
        WHEN NO_DATA_FOUND THEN 
        V_GROUP_CHANGE:='N';
        WHEN OTHERS THEN 
        V_GROUP_CHANGE:='N';
        END;
       
   END IF;    

    IF V_GROUP_CHANGE= 'S'  THEN 
    BEGIN --- GROUP CHANGE OR NOTHING
    
            V_TEM_GROUP:=0;

            BEGIN
            SELECT COUNT(1) INTO V_TEM_GROUP  

            FROM VND.ELO_CARTEIRA_GROUPING X 
            WHERE X.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA; 
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
            BEGIN 
                V_TEM_GROUP:=0;
            END;
            WHEN OTHERS THEN 
            BEGIN
                V_TEM_GROUP:=0;
            END;
            END;

            
           IF V_TEM_GROUP >0 THEN 
           BEGIN
    
                BEGIN
                SELECT X.CD_ELO_CARTEIRA, X.CD_ELO_CARTEIRA_GROUPING, 
                NVL((SELECT SE.CD_ELO_CARTEIRA 
                FROM VND.ELO_CARTEIRA SE 
                WHERE SE.CD_ELO_CARTEIRA_GROUPING = X.CD_ELO_CARTEIRA_GROUPING 
                AND SE.CD_ELO_CARTEIRA NOT IN(P_CD_ELO_CARTEIRA) AND ROWNUM=1),0) 
                INTO V_CD_CARTEIRA_PERTENCE, V_CD_CARTEIRA_GROUPING, V_CD_CARTEIRA_SECOND
                FROM VND.ELO_CARTEIRA_GROUPING X 
                WHERE X.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA AND ROWNUM =1; 
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                BEGIN 
                V_CD_CARTEIRA_PERTENCE:=0;
                V_CD_CARTEIRA_SECOND:=0;
                
                END;
                WHEN OTHERS THEN 
                BEGIN
                V_TRAVA:='S';
                V_CD_CARTEIRA_PERTENCE:=0;
                V_CD_CARTEIRA_SECOND:=0;
                END;
                END;
            
            END;
            END IF;
            
            
            
            IF NVL(V_CD_CARTEIRA_SECOND,0) = 0 THEN  
                BEGIN
                DELETE FROM VND.ELO_CARTEIRA_GROUPING GR WHERE GR.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;

                COMMIT;
                EXCEPTION
                WHEN OTHERS THEN
                    V_TRAVA:='N';
                END;
            ELSE
                BEGIN  
                UPDATE VND.ELO_CARTEIRA_GROUPING 
                SET CD_ELO_CARTEIRA = V_CD_CARTEIRA_SECOND
                WHERE 
                CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;
                --AND NU_ORDEM_VENDA = '0';
                COMMIT;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    V_TRAVA:='N';
                WHEN OTHERS THEN
                    BEGIN
                        V_TRAVA:='S';
                    END;
            
                END;
            END IF;
            
            
            BEGIN 
            INSERT INTO VND.ELO_CARTEIRA_GROUPING
            (CD_ELO_CARTEIRA_GROUPING,NU_ORDEM_VENDA, CD_PRODUTO_SAP, CD_GRUPO_EMBALAGEM, CD_CLIENTE, 
            CD_INCOTERMS, CD_ELO_CARTEIRA , CD_ELO_AGENDAMENTO, CD_TIPO_AGENDAMENTO, CD_CENTRO_EXPEDIDOR)
        
            WITH CTE_BEFORE_GROUPING AS (
            SELECT 
            --SEQ_ELO_CARTEIRA_GROUPING.NEXTVAL,
            CT.NU_ORDEM_VENDA, 
            CT.CD_PRODUTO_SAP, 
            CT.CD_GRUPO_EMBALAGEM,  
            CT.CD_CLIENTE_RECEBEDOR,
            CT.CD_INCOTERMS, 
            CT.CD_ELO_CARTEIRA,
            
            CT.CD_ELO_AGENDAMENTO,
            --CT.CD_TIPO_AGENDAMENTO, --DESTROY GROUPING 
            CT.CD_ELO_CARTEIRA  CD_TIPO_AGENDAMENTO, --ADD CARTEIRA 
            CT.CD_CENTRO_EXPEDIDOR
            FROM VND.ELO_CARTEIRA CT
            INNER JOIN (SELECT DISTINCT MIN(X.CD_ELO_CARTEIRA) CD_ELO_CARTEIRA 
            FROM VND.ELO_CARTEIRA X 
            WHERE X.IC_ATIVO = 'S'
            AND X.NU_ORDEM_VENDA IS NOT NULL
            AND X.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA -- 134125
            AND X.CD_INCOTERMS = 'CIF'
            GROUP BY X.NU_ORDEM_VENDA, X.CD_PRODUTO_SAP, X.CD_GRUPO_EMBALAGEM, X.CD_INCOTERMS, 
            --X.CD_CLIENTE_RECEBEDOR, X.CD_ELO_AGENDAMENTO, X.CD_TIPO_AGENDAMENTO, X.CD_CENTRO_EXPEDIDOR  -- DESTROY GROUPING
            X.CD_CLIENTE_RECEBEDOR, X.CD_ELO_AGENDAMENTO, X.CD_ELO_CARTEIRA, X.CD_CENTRO_EXPEDIDOR  -- ADD CARTEIRA
            ) WHOISMIN
            ON
            WHOISMIN.CD_ELO_CARTEIRA = CT.CD_ELO_CARTEIRA
            
            WHERE CT.IC_ATIVO = 'S'
            AND CT.CD_INCOTERMS = 'CIF'
            AND CT.CD_GRUPO_EMBALAGEM IS NOT NULL 
            AND CT.NU_ORDEM_VENDA IS NOT NULL
            AND CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
            )
            
            SELECT 
            VND.SEQ_ELO_CARTEIRA_GROUPING.NEXTVAL CD_ELO_CARTEIRA_GROUPING,
            NEWENT.NU_ORDEM_VENDA, NEWENT.CD_PRODUTO_SAP, 
            NEWENT.CD_GRUPO_EMBALAGEM, NEWENT.CD_CLIENTE_RECEBEDOR, NEWENT.CD_INCOTERMS, 
            NEWENT.CD_ELO_CARTEIRA , NEWENT.CD_ELO_AGENDAMENTO, NEWENT.CD_TIPO_AGENDAMENTO, NEWENT.CD_CENTRO_EXPEDIDOR
        
            FROM CTE_BEFORE_GROUPING NEWENT
            LEFT JOIN VND.ELO_CARTEIRA_GROUPING ct
            ON
            NEWENT.CD_ELO_AGENDAMENTO = ct.CD_ELO_AGENDAMENTO
            AND NEWENT.NU_ORDEM_VENDA = ct.NU_ORDEM_VENDA
            AND NEWENT.CD_PRODUTO_SAP = ct.CD_PRODUTO_SAP 
            AND NEWENT.CD_GRUPO_EMBALAGEM = ct.CD_GRUPO_EMBALAGEM 
            AND NEWENT.CD_INCOTERMS = CT.CD_INCOTERMS
            AND NEWENT.CD_CLIENTE_RECEBEDOR = CT.CD_CLIENTE
            AND NEWENT.CD_TIPO_AGENDAMENTO = ct.CD_TIPO_AGENDAMENTO
            AND NEWENT.CD_CENTRO_EXPEDIDOR = ct.CD_CENTRO_EXPEDIDOR
            WHERE ct.CD_ELO_CARTEIRA_GROUPING is null;
            COMMIT;
        
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                V_TRAVA:='N';
            WHEN OTHERS THEN
                BEGIN
                    V_TRAVA:='S';
                END;
            END;    
                
            IF V_TRAVA = 'N' THEN 
            BEGIN
        
                BEGIN  
                    
                  BEGIN
                    
                    FOR CA IN C_TORRE_FRETES
                    LOOP
                    
                   
                        BEGIN
                        
                        SELECT MAX(CAT.CD_STATUS_TORRE_FRETES ) CD_STATUS_TORRE_FRETES INTO V_CD_STATUS_TORRE_FRETES
                        FROM VND.ELO_CARTEIRA_GROUPING WOIS
                        INNER JOIN VND.ELO_CARTEIRA CAT 
                        ON --CAT.CD_ELO_CARTEIRA = WOIS.CD_ELO_CARTEIRA 
                        CAT.CD_ELO_CARTEIRA_GROUPING = WOIS.CD_ELO_CARTEIRA_GROUPING
                        WHERE WOIS.CD_ELO_CARTEIRA_GROUPING = CA.CD_ELO_CARTEIRA_GROUPING;
                        EXCEPTION
                        WHEN OTHERS THEN 
                            BEGIN
                             V_TRAVA:='S';
                             V_CD_STATUS_TORRE_FRETES:=NULL;
                             END;
                        END;
                    
                        BEGIN 
                    
                        UPDATE VND.ELO_CARTEIRA CT
                        SET CT.CD_ELO_CARTEIRA_GROUPING = CA.CD_ELO_CARTEIRA_GROUPING,
                        CT.CD_STATUS_TORRE_FRETES = V_CD_STATUS_TORRE_FRETES--,
                        
                        --CT.SG_DESTINO_BACKLOG_CIF = NVL(CT.SG_DESTINO_BACKLOG_CIF, 'CSHIP')
                        
                        WHERE 
                        CT.CD_ELO_CARTEIRA = CA.CD_ELO_CARTEIRA;
                        --AND CT.CD_ELO_CARTEIRA_GROUPING is null;
                        COMMIT;
                        
                        EXCEPTION
                        WHEN OTHERS THEN 
                            BEGIN
                             V_TRAVA:='S';
                             
                            END;
                        END;
                        
                    
                    END LOOP;
                    
                    IF C_TORRE_FRETES%ISOPEN THEN
                      CLOSE C_TORRE_FRETES;
                    END IF;
                
                  END;
        
            
                EXCEPTION
                    WHEN OTHERS THEN
                        BEGIN
                            V_TRAVA:='S';
                        END;
                END;
            END;
           
            END IF;
            
    END;  -- GROUP CHANGE OR NOTHING
    END IF;
    
    OPEN P_RETORNO FOR
    SELECT CASE WHEN V_TRAVA = 'N' THEN 1 ELSE 0 END  AS P_SUCESSO
    FROM DUAL; 
 

    END PU_CARTEIRA_GROUPING;


    PROCEDURE PU_CELL_ATTENDANCE_GERARPROT(
        P_CD_WEEK             IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE,
        P_CD_PROCESSAR        IN VARCHAR2,
        P_RETORNO                       OUT T_CURSOR
    ) 

    AS
    EC_CD_ELO_CARTEIRA   VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;  
    VERIFICAR T_CURSOR;
    V_CONFIRM                               T_CURSOR;
    
    CURSOR C_CURSOR_PROT IS
    
    SELECT CT.CD_ELO_CARTEIRA, ST_AG.SG_STATUS ,
    CT.IC_COOPERATIVE, CT.CD_TIPO_AGENDAMENTO,CT.CD_STATUS_REPLAN
    FROM VND.ELO_CARTEIRA CT
    INNER JOIN VND.ELO_AGENDAMENTO AG 
    ON 
    AG.CD_ELO_AGENDAMENTO = CT.CD_ELO_AGENDAMENTO
    INNER JOIN VND.ELO_STATUS ST_AG
    ON ST_AG.CD_ELO_STATUS = AG.CD_ELO_STATUS
    
    WHERE
    (P_CD_WEEK IS NULL OR AG.CD_WEEK = P_CD_WEEK)
    AND ST_AG.SG_STATUS NOT IN ('AGNEW', 'AGOPN', 'AGFIN' , 'AGENC');
    
    BEGIN
  
    FOR CA IN C_CURSOR_PROT
    LOOP  
    --ADD REPLAN --ADD REPLAN 2018/04/16
        IF (CA.SG_STATUS IN ('AGLOG', 'AGPRE') OR (CA.CD_TIPO_AGENDAMENTO = 25 and CA.CD_STATUS_REPLAN = 32) AND  CA.IC_COOPERATIVE = 'S') THEN 
        PU_CELL_ATTENDANCE_GERARPROT(CA.CD_ELO_CARTEIRA, VERIFICAR);
        END IF;
        
                ---HERE ADDING THE GROUPING 
        PU_CARTEIRA_GROUPING(
        CA.CD_ELO_CARTEIRA,
        V_CONFIRM
        );
        
    
    END LOOP;
    
    IF C_CURSOR_PROT%ISOPEN THEN
      CLOSE C_CURSOR_PROT;
    END IF;
    
    OPEN P_RETORNO FOR
    SELECT 1 AS P_SUCESSO
    FROM DUAL; 

  END PU_CELL_ATTENDANCE_GERARPROT;

    PROCEDURE PU_CELL_ATTENDANCE_GERARPROT(
        P_CD_ELO_CARTEIRA             IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        P_RETORNO                       OUT T_CURSOR
    ) 

    AS

	P_CURSOR_PROT                       T_CURSOR;
    V_TRAVA VARCHAR2(1):='N';
    V_NU_TRAVA NUMBER;
    
    EC_NU_CONTRATO   VND.ELO_CARTEIRA.NU_CONTRATO%TYPE;                         --01    
    EC_CD_WEEK       VND.ELO_AGENDAMENTO.CD_WEEK%TYPE;                          --02    
    EC_NU_ORDEM      VND.ELO_CARTEIRA.NU_ORDEM%TYPE;                            --03
    EC_NU_ORDEM_VENDA VND.ELO_CARTEIRA.NU_ORDEM_VENDA%TYPE;                     --04
    EC_CD_ITEM_PEDIDO VND.ELO_CARTEIRA.CD_ITEM_PEDIDO%TYPE;                     --05
    EC_QT_AGENDADA_CONFIRMADA VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE;     --06
    EC_NU_CONTRATO_SAP    VND.ELO_CARTEIRA.NU_CONTRATO_SAP%TYPE;                --07 
    EC_CD_ITEM_CONTRATO    VND.ELO_CARTEIRA.CD_ITEM_CONTRATO%TYPE;                --07 
    EC_CD_ELO_AGENDAMENTO  VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO%TYPE;            --08
    EC_CD_ELO_AGENDAMENTO_ITEM VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO_ITEM%TYPE;   --09   
    EC_CD_ELO_CARTEIRA   VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;                 --10
    EC_CD_CLIENTE        VND.ELO_CARTEIRA.CD_CLIENTE%TYPE;                      --11            
    EC_NO_CLIENTE         VND.ELO_CARTEIRA.NO_CLIENTE%TYPE;                     --12             
    EC_CD_CLIENTE_RECEBEDOR   VND.ELO_CARTEIRA.CD_CLIENTE_RECEBEDOR%TYPE;       --13          
    EC_NO_CLIENTE_RECEBEDOR  VND.ELO_CARTEIRA.NO_CLIENTE_RECEBEDOR%TYPE;        --14         
    EC_CD_CLIENTE_PAGADOR    VND.ELO_CARTEIRA.CD_CLIENTE_PAGADOR%TYPE;          --15
    EC_NO_CLIENTE_PAGADOR  VND.ELO_CARTEIRA.NO_CLIENTE_PAGADOR%TYPE;            --16
    EC_CD_ELO_STATUS        VND.ELO_AGENDAMENTO.CD_ELO_STATUS%TYPE;             --17
    EC_ST_AGDS_STATUS       VND.ELO_STATUS.DS_STATUS%TYPE;                      --18
    EC_ST_AGSG_STATUS       VND.ELO_STATUS.SG_STATUS%TYPE;                      --19
    
    EC_SALDO_ORDEM_VENDA_PROTOCOLO  VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE;--20
    
    EC_QT_AGENDADA  VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE;              --21
    EC_DT_SUGESTAO_ENTREGA  CPT.ENTREGA.DT_SUGESTAO_ENTREGA%TYPE;               --22
    EC_NU_DOCUMENTO  VND.ELO_AGENDAMENTO_GROUPING.NU_DOCUMENTO%TYPE;            --23
    EC_QT_PROTOCOLO VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE;          --24
    EC_QT_AGENDADA_ENTREGA  VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE;      --25
    EC_NU_PROTOCOLO  VND.ELO_VBAK_PROTOCOLO.NU_PROTOCOLO%TYPE;                  --26
    

    V_SOMA_QT_AGENDADA_ENTREGA  VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE;      --25
    V_LIMITAR_EM_QT_AGENDADA  VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE;      --25
    V_SOMA_QT_AGENDADA_ANTERIOR  VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE; 
    
    V_ESCOLHER_O_MELHOR_PROT VND.ELO_VBAK_PROTOCOLO.NU_PROTOCOLO%TYPE; 
    V_ESCOLHA_CENARIO NUMBER:=0;
    V_QT_PROT_ENTREGA VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE;
    
    
        
    
    BEGIN
    
    BEGIN 
   
    VND.GX_CELL_ATTENDANCE.PX_CELL_ATTENDANCE_PROTOCOLO (P_CD_ELO_CARTEIRA=> P_CD_ELO_CARTEIRA, P_RETORNO => P_CURSOR_PROT);
   
    EXCEPTION 
    WHEN OTHERS THEN 
        RAISE_APPLICATION_ERROR(
        -20001,
        'ERRO ENCONTRADOUPDPROT - '
         || SQLCODE
         || ' -ERROR- '
         || SQLERRM
        );
     
    END; 
    
    V_SOMA_QT_AGENDADA_ENTREGA:=0;
    V_SOMA_QT_AGENDADA_ANTERIOR:=0;
  
    LOOP
    
    FETCH P_CURSOR_PROT 
    INTO     
        EC_NU_CONTRATO ,
        EC_CD_WEEK ,
        EC_NU_ORDEM   ,
        EC_NU_ORDEM_VENDA,
        EC_CD_ITEM_PEDIDO ,
        EC_QT_AGENDADA_CONFIRMADA ,
        EC_NU_CONTRATO_SAP   ,
        EC_CD_ITEM_CONTRATO,
        EC_CD_ELO_AGENDAMENTO ,
        EC_CD_ELO_AGENDAMENTO_ITEM ,
        EC_CD_ELO_CARTEIRA  ,
        EC_CD_CLIENTE     ,
        EC_NO_CLIENTE      ,
        EC_CD_CLIENTE_RECEBEDOR  ,
        EC_NO_CLIENTE_RECEBEDOR  ,
        EC_CD_CLIENTE_PAGADOR    ,
        EC_NO_CLIENTE_PAGADOR ,
        EC_CD_ELO_STATUS    ,
        EC_ST_AGDS_STATUS    ,
        EC_ST_AGSG_STATUS   ,
        EC_SALDO_ORDEM_VENDA_PROTOCOLO  ,
        
        EC_QT_AGENDADA  ,
        EC_DT_SUGESTAO_ENTREGA ,
        EC_NU_DOCUMENTO ,
        EC_QT_PROTOCOLO ,
        EC_QT_AGENDADA_ENTREGA  ,
        EC_NU_PROTOCOLO ;
        
        --ESCOLHER O MELHOR PROTOCOLO PARA ATENDER A QUANTIDADE CONFIRMADA
        
        EXIT WHEN P_CURSOR_PROT%NOTFOUND;
        
        BEGIN
        WITH 
        CTE_CARTEIRA_THIS_WEEK AS 
       (
       
       SELECT 
       CTA.CD_ELO_AGENDAMENTO, CTA.CD_ELO_CARTEIRA
       FROM VND.ELO_CARTEIRA CTA
       WHERE 
       CTA.IC_ATIVO  = 'S'        
       AND CTA.CD_ELO_AGENDAMENTO = EC_CD_ELO_AGENDAMENTO
       AND CTA.NU_CONTRATO_SAP = EC_NU_CONTRATO_SAP
       AND CTA.CD_ITEM_CONTRATO = EC_CD_ITEM_CONTRATO
       AND (CTA.CD_TIPO_AGENDAMENTO IN (22,23,24) OR (CTA.CD_TIPO_AGENDAMENTO = 25 AND CTA.CD_STATUS_REPLAN = 32))
       
       ),
        
        
        CTE_WHO_HAVE AS (
        SELECT  CPT_ENT.NU_PROTOCOLO_ENTREGA , NVL(CPT_ENT.QT_QUANTIDADE,0) - NVL(CPT_ENT.QT_FORNECIDO,0) -
        NVL((SELECT SUM(VPR.QT_AGENDADA_PROTOCOLO) PROT_ALOCACADO 
        FROM VND.ELO_VBAK_PROTOCOLO VPR
        INNER JOIN VND.ELO_VBAK VB
        ON VPR.CD_ELO_VBAK = VB.CD_ELO_VBAK
        WHERE 
        VPR.NU_PROTOCOLO = EC_NU_DOCUMENTO
        AND VB.NU_CONTRATO_SAP = EC_NU_CONTRATO_SAP
        AND VB.CD_ITEM_CONTRATO = EC_CD_ITEM_CONTRATO
        and EXISTS (SELECT 1 FROM CTE_CARTEIRA_THIS_WEEK CATWEE WHERE CATWEE.CD_ELO_CARTEIRA = VPR.CD_ELO_CARTEIRA)
        AND VPR.IC_ATIVO = 'S'
        AND VB.IC_ATIVO = 'S'),0)  QT_PROT_ENTREGA
        FROM CPT.AUTORIZACAO_ENTREGA CPT_AUT_ENT 
        INNER JOIN CPT.ENTREGA CPT_ENT
        ON CPT_AUT_ENT.CD_AUTORIZACAO_ENTREGA = CPT_ENT.CD_AUTORIZACAO_ENTREGA
        WHERE 
        CPT_AUT_ENT.NU_CONTRATO_SAP = EC_NU_CONTRATO_SAP
        AND CPT_AUT_ENT.CD_ITEM_CONTRATO = EC_CD_ITEM_CONTRATO

        AND CPT_ENT.SG_STATUS NOT IN ('C', 'P')
        )
        
        SELECT ORDEMESCOLHA, NU_PROTOCOLO_ENTREGA, QT_PROT_ENTREGA INTO V_ESCOLHA_CENARIO,  V_ESCOLHER_O_MELHOR_PROT , V_QT_PROT_ENTREGA
        
        FROM 
        (
        SELECT 1 ORDEMESCOLHA , WHAVE.NU_PROTOCOLO_ENTREGA, WHAVE.QT_PROT_ENTREGA 
        FROM CTE_WHO_HAVE WHAVE
        WHERE WHAVE.QT_PROT_ENTREGA = EC_QT_AGENDADA_CONFIRMADA
        AND WHAVE.QT_PROT_ENTREGA > 0
        AND ROWNUM = 1
        UNION 
        SELECT 2 ORDEMESCOLHA, WHAVE.NU_PROTOCOLO_ENTREGA, WHAVE.QT_PROT_ENTREGA 
        FROM CTE_WHO_HAVE WHAVE
        WHERE NOT(WHAVE.QT_PROT_ENTREGA = EC_QT_AGENDADA_CONFIRMADA)
        AND WHAVE.QT_PROT_ENTREGA > 0 
        AND WHAVE.QT_PROT_ENTREGA = EC_QT_AGENDADA_ENTREGA
        AND ROWNUM = 1
        UNION
        SELECT 3 ORDEMESCOLHA , WHAVE.NU_PROTOCOLO_ENTREGA, WHAVE.QT_PROT_ENTREGA 
        FROM CTE_WHO_HAVE WHAVE
        WHERE NOT(WHAVE.QT_PROT_ENTREGA = EC_QT_AGENDADA_CONFIRMADA)
        AND WHAVE.QT_PROT_ENTREGA > 0 
        AND WHAVE.QT_PROT_ENTREGA < EC_QT_AGENDADA_ENTREGA
        AND ROWNUM = 1
        UNION
        SELECT 4 ORDEMESCOLHA , WHAVE.NU_PROTOCOLO_ENTREGA, WHAVE.QT_PROT_ENTREGA 
        FROM CTE_WHO_HAVE WHAVE
        WHERE NOT(WHAVE.QT_PROT_ENTREGA = EC_QT_AGENDADA_CONFIRMADA)
        AND WHAVE.QT_PROT_ENTREGA > 0
        AND WHAVE.QT_PROT_ENTREGA > EC_QT_AGENDADA_ENTREGA
        AND ROWNUM = 1  
        ORDER BY ORDEMESCOLHA ASC
        ) 
        WHERE ROWNUM = 1  ;       
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
        V_ESCOLHER_O_MELHOR_PROT:= EC_NU_DOCUMENTO;
        V_ESCOLHA_CENARIO:=4;
        V_QT_PROT_ENTREGA:=0;
        WHEN OTHERS THEN 
        V_ESCOLHER_O_MELHOR_PROT:=EC_NU_DOCUMENTO;
        V_ESCOLHA_CENARIO:=4;
        V_QT_PROT_ENTREGA:=0;
        END;

        BEGIN 
        INSERT INTO VND.ELO_CARTEIRA_PROT_HIST
        (
        
        NU_CONTRATO ,        CD_WEEK ,        NU_ORDEM ,        NU_ORDEM_VENDA,
        CD_ITEM_PEDIDO ,        QT_AGENDADA_CONFIRMADA ,        NU_CONTRATO_SAP ,
        CD_ITEM_CONTRATO  ,        CD_ELO_AGENDAMENTO ,        CD_ELO_AGENDAMENTO_ITEM ,
        CD_ELO_CARTEIRA  ,               
        CD_CLIENTE	,        NO_CLIENTE	,        CD_CLIENTE_PAGADOR,
        NO_CLIENTE_PAGADOR	,        CD_CLIENTE_RECEBEDOR,	        NO_CLIENTE_RECEBEDOR,	
        CD_ELO_STATUS,        DS_STATUS,        SG_STATUS,        SALDO_ORDEM_VENDA_PROTOCOLO 	,
        QT_AGENDADA ,        DT_SUGESTAO_ENTREGA ,        NU_DOCUMENTO ,        QT_PROTOCOLO ,
        QT_AGENDADA_ENTREGA	,        NU_PROTOCOLO,        DH_MODIFICACAO_PROTOCOLO          
        
        )
        SELECT 
        EC_NU_CONTRATO NU_CONTRATO ,
        EC_CD_WEEK CD_WEEK ,
        EC_NU_ORDEM NU_ORDEM ,
        EC_NU_ORDEM_VENDA NU_ORDEM_VENDA,
        EC_CD_ITEM_PEDIDO CD_ITEM_PEDIDO ,
        EC_QT_AGENDADA_CONFIRMADA QT_AGENDADA_CONFIRMADA ,
        EC_NU_CONTRATO_SAP NU_CONTRATO_SAP ,
        EC_CD_ITEM_CONTRATO CD_ITEM_CONTRATO  ,
        EC_CD_ELO_AGENDAMENTO CD_ELO_AGENDAMENTO ,
        EC_CD_ELO_AGENDAMENTO_ITEM CD_ELO_AGENDAMENTO_ITEM ,
        EC_CD_ELO_CARTEIRA CD_ELO_CARTEIRA  ,
        
        
        EC_CD_CLIENTE CD_CLIENTE	,
        EC_NO_CLIENTE NO_CLIENTE	,
        EC_CD_CLIENTE_PAGADOR CD_CLIENTE_PAGADOR,
        EC_NO_CLIENTE_PAGADOR NO_CLIENTE_PAGADOR	,
        EC_CD_CLIENTE_RECEBEDOR CD_CLIENTE_RECEBEDOR,	
        EC_NO_CLIENTE_RECEBEDOR NO_CLIENTE_RECEBEDOR,	
        EC_CD_ELO_STATUS CD_ELO_STATUS,
        EC_ST_AGDS_STATUS DS_STATUS,
        EC_ST_AGSG_STATUS SG_STATUS,
        EC_SALDO_ORDEM_VENDA_PROTOCOLO SALDO_ORDEM_VENDA_PROTOCOLO 	,
        EC_QT_AGENDADA QT_AGENDADA ,
        EC_DT_SUGESTAO_ENTREGA DT_SUGESTAO_ENTREGA ,
        EC_NU_DOCUMENTO NU_DOCUMENTO ,
        EC_QT_PROTOCOLO QT_PROTOCOLO ,
        EC_QT_AGENDADA_ENTREGA QT_AGENDADA_ENTREGA	,
        EC_NU_PROTOCOLO NU_PROTOCOLO,
        CURRENT_DATE DH_MODIFICACAO_PROTOCOLO          
        FROM DUAL;
        COMMIT;
        EXCEPTION 
        WHEN OTHERS THEN
        NULL;
        END;


        
        IF V_SOMA_QT_AGENDADA_ENTREGA <= EC_QT_AGENDADA_CONFIRMADA AND V_ESCOLHER_O_MELHOR_PROT =  EC_NU_DOCUMENTO THEN 
        BEGIN
        
            V_SOMA_QT_AGENDADA_ENTREGA:=V_SOMA_QT_AGENDADA_ENTREGA + V_QT_PROT_ENTREGA;
        
            IF V_SOMA_QT_AGENDADA_ENTREGA <= EC_QT_AGENDADA_CONFIRMADA THEN 
                V_LIMITAR_EM_QT_AGENDADA:=V_QT_PROT_ENTREGA;
            ELSE
                V_LIMITAR_EM_QT_AGENDADA:=EC_QT_AGENDADA_CONFIRMADA - V_SOMA_QT_AGENDADA_ANTERIOR;
            
            END IF;
            
            V_SOMA_QT_AGENDADA_ANTERIOR:= V_SOMA_QT_AGENDADA_ANTERIOR + V_LIMITAR_EM_QT_AGENDADA;
            
        
            IF EC_QT_AGENDADA > 0 AND 
                EC_NU_DOCUMENTO IS NOT NULL AND 
                EC_QT_AGENDADA_ENTREGA > 0 AND 
                NVL(EC_QT_PROTOCOLO, 0) = 0 AND 
                EC_SALDO_ORDEM_VENDA_PROTOCOLO > 0 
                THEN 
 
                    IF EC_QT_AGENDADA_ENTREGA <= EC_SALDO_ORDEM_VENDA_PROTOCOLO THEN 
            
                        VND.GX_CELL_ATTENDANCE.PU_CELL_ATTENDANCE_UPROT(EC_CD_ELO_CARTEIRA,
                        V_LIMITAR_EM_QT_AGENDADA ,
                        EC_NU_DOCUMENTO , P_RETORNO);
                    
                    ELSE
                    BEGIN
                    
                        VND.GX_CELL_ATTENDANCE.PU_CELL_ATTENDANCE_UPROT(EC_CD_ELO_CARTEIRA,
                        --EC_SALDO_ORDEM_VENDA_PROTOCOLO ,
                        V_LIMITAR_EM_QT_AGENDADA,
                        EC_NU_DOCUMENTO , P_RETORNO);
                    END;
                    END IF;
    
            END IF;
        END;    
        END IF;
    

    
    END LOOP;
    
    CLOSE P_CURSOR_PROT;
    


  END PU_CELL_ATTENDANCE_GERARPROT;



  FUNCTION FX_GET_NR_PROTOCOLO(
        P_NU_CONTRATO_SAP   IN CPT.AUTORIZACAO_ENTREGA.NU_CONTRATO_SAP%TYPE) 
    RETURN VARCHAR2  AS
  BEGIN
    -- TODO: implementação exigida para FUNCTION GX_CELL_ATTENDANCE.FX_GET_NR_PROTOCOLO
    RETURN NULL;
  END FX_GET_NR_PROTOCOLO;
  

    PROCEDURE PU_CHECK_STATUS_CELL(
        P_CD_ELO_CARTEIRA               IN VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        P_CD_ELO_STATUS                 OUT VND.ELO_STATUS.CD_ELO_STATUS%TYPE,
        P_SG_STATUS                     OUT VND.ELO_STATUS.SG_STATUS%TYPE,
        P_ERRO                          OUT VARCHAR2,
        P_RETORNO                       OUT T_CURSOR )
   AS
       V_TRAVA VARCHAR2(1):='N';
       V_CD_ELO_CARTEIRA                 VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE;
       V_SG_STATUS                      VND.ELO_STATUS.SG_STATUS%TYPE;
       
        vSG_TIPO_STATUS         VND.ELO_TIPO_STATUS.SG_TIPO_STATUS%TYPE;
        vSG_STATUS              VND.ELO_STATUS.SG_STATUS%TYPE;
        vCD_ELO_STATUS          VND.ELO_STATUS.CD_ELO_STATUS%TYPE;
       
    BEGIN
       
       BEGIN 
       
       SELECT BLOQUEANDO.CD_ELO_CARTEIRA, BLOQUEANDO.STATUS INTO V_CD_ELO_CARTEIRA, V_SG_STATUS
       FROM (
       
          WITH BLCK AS (SELECT DISTINCT CD_BLOCKING_TYPE_COLUMN, EB.CD_BLOCKING_REASON, CD_BLOCKING_LEVEL
           FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB       
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            )  
        SELECT 
        EC.CD_ELO_CARTEIRA ,
      
        
        CASE
                WHEN EC.CD_MOTIVO_RECUSA IS NOT NULL THEN 'CLCNC'                                -- ordem 1 
                WHEN EC.QT_SALDO_REFRESH =  0  AND EC.CD_TIPO_AGENDAMENTO IN (22,23,24)   THEN 'CLCRG'  --ordem 2

                
                WHEN (SELECT SUM(nu_quantidade_saldo) FROM vnd.pedido PE
                WHERE  
                PE.NU_CONTRATO_SAP = EC.NU_CONTRATO_SAP 
                AND PE.CD_PRODUTO_SAP = EC.CD_PRODUTO_SAP 
                AND PE.NU_ORDEM_VENDA = EC.NU_ORDEM_VENDA
                ) = 0 AND EC.CD_TIPO_AGENDAMENTO IN (22,23,24)
                
                THEN 'CLCRG'                                                                      --ordem 2             
                
                WHEN EC.QT_AGENDADA_CONFIRMADA = 0 THEN 'CLCQC'
                -- ###
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'CLLWF' -- ordem 3
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'CLLWF'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'CLLWF'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BR.CD_BLOCKING_REASON THEN 'CLLWF'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'CLLWF'               
               
                -- ###
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO <= CURRENT_DATE THEN 'CLSPG' --ordem 4
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO <= CURRENT_DATE THEN 'CLSPG'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO <= CURRENT_DATE THEN 'CLSPG'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO <= CURRENT_DATE THEN 'CLSPG'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO <= CURRENT_DATE THEN 'CLSPG'  
                
                -- ###
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO > CURRENT_DATE THEN 'CLPGV'  --ordem 5
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO > CURRENT_DATE THEN 'CLPGV'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO > CURRENT_DATE THEN 'CLPGV'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO > CURRENT_DATE THEN 'CLPGV'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON AND EC.DH_VENCIMENTO_PEDIDO > CURRENT_DATE THEN 'CLPGV'
                            
                -- ###
                
                --INCLUIR A ORDEM 6 PARA BLOQUEIO DE CREDITO EM PORTUGUES

                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '3' 
                    AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON 
                    AND '1' = (SELECT DISTINCT '1'
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1) 
                    THEN (SELECT DISTINCT STB.SG_STATUS 
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '3' 
                    AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON 
                    AND '1' = (SELECT DISTINCT '1'
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                    THEN (SELECT DISTINCT STB.SG_STATUS 
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '3' 
                    AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON 
                    AND '1' = (SELECT DISTINCT '1'
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                    THEN  (SELECT DISTINCT STB.SG_STATUS 
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '3' 
                    AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON 
                    AND '1' = (SELECT DISTINCT '1'
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                    THEN (SELECT DISTINCT STB.SG_STATUS 
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '3' 
                    AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON 
                    AND '1' = (SELECT DISTINCT '1'
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1) 
                    THEN  (SELECT DISTINCT STB.SG_STATUS 
                                                    FROM VND.ELO_STATUS STB 
                                                    WHERE 
                                                    STB.CD_ELO_TIPO_STATUS = 10 
                                                    AND SUBSTR(EC.DS_CREDIT_BLOCK_REASON, 1,2) = SUBSTR(STB.DS_STATUS, 1,2) AND ROWNUM=1)                 
                
                
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON AND TRIM(NVL(EC.DS_CREDIT_BLOCK_REASON, '')) IS NULL THEN 'CLCRD'  --ORDEM 7
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON AND TRIM(NVL(EC.DS_CREDIT_BLOCK_REASON, '')) IS NULL THEN 'CLCRD'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON AND TRIM(NVL(EC.DS_CREDIT_BLOCK_REASON, '')) IS NULL THEN 'CLCRD'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON AND TRIM(NVL(EC.DS_CREDIT_BLOCK_REASON, '')) IS NULL THEN 'CLCRD'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON AND TRIM(NVL(EC.DS_CREDIT_BLOCK_REASON, '')) IS NULL THEN 'CLCRD'
                
                -- ###
                
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON AND EC.DS_CREDIT_BLOCK_REASON IS NOT NULL THEN 'CLREA'
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON AND EC.DS_CREDIT_BLOCK_REASON IS NOT NULL THEN 'CLREA'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON AND EC.DS_CREDIT_BLOCK_REASON IS NOT NULL THEN 'CLREA'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON AND EC.DS_CREDIT_BLOCK_REASON IS NOT NULL THEN 'CLREA'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON AND EC.DS_CREDIT_BLOCK_REASON IS NOT NULL THEN 'CLREA'   

                -- ###
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'CLCTM'
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'CLCTM'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'CLCTM'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'CLCTM'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'CLCTM'
                
                -- ###
                WHEN BR.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'CLBLO'
                WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'CLBLO'
                WHEN BF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'CLBLO'
                WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'CLBLO'
                WHEN BC.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'CLBLO'             
          
                WHEN TRIM(NVL(EC.NU_ORDEM_VENDA, '0')) = '0' AND EC.IC_FA = 'S' THEN 'CLFFA'
                WHEN TRIM(NVL(EC.NU_ORDEM_VENDA, '0')) = '0' AND EC.IC_EXPORT = 'S' THEN 'CLEXP'
                WHEN TRIM(NVL(EC.NU_ORDEM_VENDA, '0')) = '0' THEN 'CLINC'
                
                WHEN EC.QT_SALDO_REFRESH IS NULL AND 
                (SELECT SUM(nu_quantidade_saldo) FROM vnd.pedido PE
                WHERE  
                PE.NU_CONTRATO_SAP = EC.NU_CONTRATO_SAP 
                AND PE.CD_PRODUTO_SAP = EC.CD_PRODUTO_SAP 
                AND PE.NU_ORDEM_VENDA = EC.NU_ORDEM_VENDA
                ) IS NULL   THEN 'CLINC'
          
                WHEN EC.IC_COOPERATIVE = 'S'                    
                    AND (
                    NOT(NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0) 
                    
                    = EC.QT_AGENDADA_CONFIRMADA)) THEN 'CLPRT'
                WHEN EC.CD_INCOTERMS = 'CIF' AND 
                        EC.IC_COOPERATIVE IN('S', 'N') AND 
                        (TRIM(EC.DS_ROTEIRO_ENTREGA)  IS NULL OR LENGTH(EC.DS_ROTEIRO_ENTREGA) < 3) THEN 'CLROT'
                        
                WHEN NVL(EC.QT_AGENDADA_CONFIRMADA,0) >= 0 AND EC.CD_TIPO_AGENDAMENTO = 25 AND NVL(EC.CD_STATUS_REPLAN, 33) IN (33)
                THEN 'CLCNV'        
                        
          
                ELSE 'CLOOK' END STATUS
            
        
        FROM VND.ELO_CARTEIRA EC 
        LEFT JOIN BLCK BR ON BR.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA 
        LEFT JOIN BLCK BRI ON BRI.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA_ITEM
        LEFT JOIN BLCK BF ON BF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO
        LEFT JOIN BLCK BFI ON BFI.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO_ITEM       
        LEFT JOIN BLCK BC ON BC.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_CREDITO 
         
        WHERE EC.IC_ATIVO = 'S'
        AND EC.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        ORDER BY  
        BR.CD_BLOCKING_TYPE_COLUMN , 
        BRI.CD_BLOCKING_TYPE_COLUMN , 
        BF.CD_BLOCKING_TYPE_COLUMN , 
        BFI.CD_BLOCKING_TYPE_COLUMN, 
        BC.CD_BLOCKING_TYPE_COLUMN  
        ) BLOQUEANDO
        WHERE 
        ROWNUM =1;
        
        EXCEPTION
        WHEN NO_DATA_FOUND THEN 
        BEGIN
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 001'
        || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            V_SG_STATUS:=NULL;
        END;
        WHEN OTHERS THEN 
        
        BEGIN
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 002'
        || SQLCODE || ' -ERROR- ' || SQLERRM );
            V_TRAVA:='S';
            V_SG_STATUS:=NULL;
        END;
        END;


        IF V_TRAVA = 'N' THEN 
        
            BEGIN    
            -- ### UPDATE ELO_CARTEIRA BASED ON RULES ABOVE
            SELECT TS.SG_TIPO_STATUS, ES.SG_STATUS, ES.CD_ELO_STATUS
            INTO   vSG_TIPO_STATUS, vSG_STATUS, vCD_ELO_STATUS
            FROM   VND.ELO_STATUS ES 
            INNER JOIN VND.ELO_TIPO_STATUS TS ON ES.CD_ELO_TIPO_STATUS = TS.CD_ELO_TIPO_STATUS
            WHERE SG_STATUS = NVL(TRIM(V_SG_STATUS), 'CLREA');    
            EXCEPTION 
            WHEN NO_DATA_FOUND THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 003'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    vSG_TIPO_STATUS:= 0;
                END;
            WHEN OTHERS THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 004'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    vSG_TIPO_STATUS:= 0;
                END;
            
            END;
       END IF;     
            
            
                
        IF V_TRAVA = 'N' THEN 
            BEGIN
            -- SOLICITADO POR PAULO KALIL EM 23/01/2017
            -- SE STATUS FOR DIFERENTE DE 'CLROT' Falta Roteiro OU 'CLOOK' OK, GRAVA (0) ZERO NA QUANTIDADE 

            IF V_SG_STATUS = 'CLOOK' THEN 
        
                BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET CD_STATUS_CEL_FINAL = vCD_ELO_STATUS,
                CD_STATUS_CEL_INITIAL = NVL(CD_STATUS_CEL_INITIAL, vCD_ELO_STATUS)
                
                WHERE CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
                AND QT_AGENDADA_CONFIRMADA > 0 ;
                COMMIT;
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 005'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';

                END;
                WHEN OTHERS THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 006'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';

                END;
                
                END;	
                
            ELSE
                 
                BEGIN
                UPDATE VND.ELO_CARTEIRA
                SET CD_STATUS_CEL_FINAL = vCD_ELO_STATUS,
                CD_STATUS_CEL_INITIAL = NVL(CD_STATUS_CEL_INITIAL, vCD_ELO_STATUS)--,
                --QT_AGENDADA_CONFIRMADA = 0,
                --QT_AGENDADA_CELULA = 0
                WHERE CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA;
                COMMIT;
                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 007'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';

                END;
                WHEN OTHERS THEN 
                BEGIN
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO STATUS - 008'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                    V_TRAVA:='S';
                    vSG_TIPO_STATUS:= 0;
                END;
                
                END;
              
            END IF;
            
            P_CD_ELO_STATUS:= vCD_ELO_STATUS ;
            P_SG_STATUS:=V_SG_STATUS;
            P_ERRO:='N';
            
            OPEN P_RETORNO FOR  
            SELECT P_CD_ELO_CARTEIRA CD_ELO_CARTEIRA, P_CD_ELO_STATUS CD_ELO_STATUS, P_SG_STATUS SG_STATUS, P_ERRO HAS_ERRO FROM DUAL;
            END;
        
        ELSE
        
            BEGIN
                
                P_CD_ELO_STATUS:= vCD_ELO_STATUS ;
                P_SG_STATUS:=V_SG_STATUS;
                P_ERRO:='Y';
                
                OPEN P_RETORNO FOR  
                SELECT P_CD_ELO_CARTEIRA CD_ELO_CARTEIRA, P_CD_ELO_STATUS CD_ELO_STATUS, P_SG_STATUS SG_STATUS, P_ERRO HAS_ERRO FROM DUAL;
            
            END;
           
        END IF;
        
     
            
        
   END PU_CHECK_STATUS_CELL;     
  
  
  
  PROCEDURE PD_CELL_ATT_UNDO_UPROT(
        P_CD_ELO_CARTEIRA            IN VND.ELO_VBAK_PROTOCOLO.CD_ELO_CARTEIRA%TYPE,
         P_NU_PROTOCOLO              IN VND.ELO_VBAK_PROTOCOLO.NU_PROTOCOLO%TYPE,
        P_RETORNO                    OUT T_CURSOR)

    AS

    V_TRAVA VARCHAR2(1):='N';

    V_CD_ELO_VBAK_PROTOCOLO ELO_VBAK_PROTOCOLO.CD_ELO_VBAK_PROTOCOLO%TYPE;
    V_DESCONSIDERAR VARCHAR2(1):='N';

   BEGIN
   



        BEGIN  
        
        
        SELECT 
        VBPROT.CD_ELO_VBAK_PROTOCOLO, 
        CASE 
        WHEN CT.CD_TIPO_AGENDAMENTO < 25 AND CT.CD_TIPO_REPLAN IS NULL AND ENTR.SG_STATUS = 'P' THEN 'N'
        WHEN CT.CD_TIPO_AGENDAMENTO = 25 AND ENTR.SG_STATUS = 'P' THEN 'S'
        WHEN CT.CD_TIPO_REPLAN IS NOT NULL AND ENTR.SG_STATUS = 'P' THEN 'S'
        WHEN ENTR.SG_STATUS = 'C' THEN 'N'
        WHEN CT.CD_TIPO_AGENDAMENTO < 25 AND ENTR.SG_STATUS NOT IN( 'P', 'C') THEN 'N'
        ELSE 'N' END DESCON
        INTO V_CD_ELO_VBAK_PROTOCOLO, V_DESCONSIDERAR
        FROM VND.ELO_CARTEIRA CT 
        INNER JOIN VND.ELO_VBAK VBAK 
        ON
        CT.NU_CONTRATO_SAP = VBAK.NU_CONTRATO_SAP 
        AND VBAK.CD_ITEM_CONTRATO = CT.CD_ITEM_CONTRATO
        
        INNER JOIN VND.ELO_VBAK_PROTOCOLO VBPROT
        ON
        VBAK.CD_ELO_VBAK = VBPROT.CD_ELO_VBAK
        AND VBPROT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND VBPROT.NU_PROTOCOLO = P_NU_PROTOCOLO
        
        INNER JOIN CPT.ENTREGA ENTR 
        ON ENTR.NU_PROTOCOLO_ENTREGA = VBPROT.NU_PROTOCOLO
        
        WHERE 
        VBAK.IC_ATIVO = 'S'
        AND CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND EXISTS 
        (
                SELECT 1 --ENT.CD_ENTREGA, ENT.CD_AUTORIZACAO_ENTREGA INTO V_CD_ENTREGA, V_CD_AUTORIZACAO_ENTREGA
        FROM CPT.ENTREGA ENT 
        WHERE ENT.NU_PROTOCOLO_ENTREGA = P_NU_PROTOCOLO 
        AND VBPROT.NU_PROTOCOLO = ENT.NU_PROTOCOLO_ENTREGA
        --AND ENT.SG_STATUS IN ('P', 'C')
        )        
         AND ROWNUM = 1;
    
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
            BEGIN
            V_CD_ELO_VBAK_PROTOCOLO:=0;
            V_DESCONSIDERAR:='N';
            END;
            
            WHEN OTHERS THEN
            
                BEGIN
                   V_CD_ELO_VBAK_PROTOCOLO:=0;
                    V_DESCONSIDERAR:='N';
                     RAISE_APPLICATION_ERROR(
                    -20001,
                    'ERRO ENCONTRADOPTT - '
                     || SQLCODE
                     || ' -ERROR- '
                     || SQLERRM
                );
                    
                END;
        END;
        

        
    
    IF NVL(V_CD_ELO_VBAK_PROTOCOLO, 0) > 0 AND V_DESCONSIDERAR = 'N' THEN 

   BEGIN
    UPDATE VND.ELO_VBAK_PROTOCOLO
    SET 
    QT_AGENDADA_PROTOCOLO = 0 ,
    DH_MODIFICACAO_PROTOCOLO = CURRENT_DATE,
    IC_ATIVO = 'N' 
    WHERE
    CD_ELO_VBAK_PROTOCOLO = V_CD_ELO_VBAK_PROTOCOLO;
    COMMIT;
            EXCEPTION
        WHEN OTHERS THEN
            BEGIN
            V_TRAVA:='S';
            RAISE_APPLICATION_ERROR(
                -20001,
                'ERRO ENCONTRADOUPDPROT - '
                 || SQLCODE
                 || ' -ERROR- '
                 || SQLERRM
            );
    
           END;
    END;
    
    
    
    END IF;
    
    OPEN P_RETORNO FOR
    SELECT CASE WHEN V_TRAVA = 'N' THEN 1 ELSE 0 END  AS P_SUCESSO
    FROM DUAL;       
        


    END PD_CELL_ATT_UNDO_UPROT;
 
  
  PROCEDURE PD_CELL_ATT_UNDO_UPROT(
        P_CD_ELO_CARTEIRA            IN VND.ELO_VBAK_PROTOCOLO.CD_ELO_CARTEIRA%TYPE)
        --P_RETORNO                    OUT T_CURSOR)

    AS
        
        P_RETORNO  T_CURSOR;

       CURSOR C_PROTOCOLO IS 
 
      
        SELECT DISTINCT
        CT.CD_ELO_CARTEIRA, VBPROT.CD_ELO_VBAK_PROTOCOLO , VBPROT.NU_PROTOCOLO 
        FROM VND.ELO_CARTEIRA CT 
        INNER JOIN VND.ELO_VBAK VBAK 
        ON
        CT.NU_CONTRATO_SAP = VBAK.NU_CONTRATO_SAP 
        AND VBAK.CD_ITEM_CONTRATO = CT.CD_ITEM_CONTRATO
        
        INNER JOIN VND.ELO_VBAK_PROTOCOLO VBPROT
        ON
        VBAK.CD_ELO_VBAK = VBPROT.CD_ELO_VBAK
        AND VBPROT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA

        WHERE 
        VBAK.IC_ATIVO = 'S'
        AND CT.CD_ELO_CARTEIRA = P_CD_ELO_CARTEIRA
        AND EXISTS 
        (
        SELECT 1 --ENT.CD_ENTREGA, ENT.CD_AUTORIZACAO_ENTREGA INTO V_CD_ENTREGA, V_CD_AUTORIZACAO_ENTREGA
        FROM CPT.ENTREGA ENT 
        WHERE 
        VBPROT.NU_PROTOCOLO = ENT.NU_PROTOCOLO_ENTREGA
        AND (ENT.SG_STATUS IN ('C') OR NVL(ENT.SG_STATUS, '+') <> '+'  )
        )    ;    

       BEGIN

            FOR CA IN C_PROTOCOLO
            LOOP

            BEGIN
                PD_CELL_ATT_UNDO_UPROT(CA.CD_ELO_CARTEIRA, CA.NU_PROTOCOLO, P_RETORNO );
            COMMIT;
            EXCEPTION 
            
            WHEN OTHERS THEN 
                BEGIN
                
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO NAO UNDO PROTO - 228'
                || SQLCODE || ' -ERROR- ' || SQLERRM );

                END;
            END;   
            
            END LOOP;
            
            IF C_PROTOCOLO%ISOPEN THEN
              CLOSE C_PROTOCOLO;
            END IF;
    

    END PD_CELL_ATT_UNDO_UPROT;
 


  PROCEDURE PX_CELL_ATTENDANCE_EXPORTAR(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_CD_SALES_DISTRICT             IN VND.ELO_CARTEIRA.CD_SALES_DISTRICT%TYPE DEFAULT NULL,
        P_CD_SALES_OFFICE               IN VND.ELO_CARTEIRA.CD_SALES_OFFICE%TYPE DEFAULT NULL,
        P_CD_SALES_GROUP                IN VND.ELO_CARTEIRA.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR
    ) 

    
    AS
    
  BEGIN
        OPEN P_RETORNO FOR
        
        SELECT 
            RETORNO.TIPO_AGENDAMENTO CD_TIPO_AGENDAMENTO,
            RETORNO.NUM_CLIENTE, 
            RETORNO.CONTRATO,
            RETORNO.OV,
            RETORNO.NU_CONTRATO,
            RETORNO.PRODUTO, 
            RETORNO.DESCRICAO, 
            RETORNO.DATA, 
            RETORNO.PROGRAMADO, 
            RETORNO.CENTRO, 
            RETORNO.MODALIDADE, 
            RETORNO.GERENTE, 
            RETORNO.SUPERVISOR, 
            RETORNO.CLIENTE,
            RETORNO.CONTA_ORDEM,
            RETORNO.PROTOCOLO,
            RETORNO.QTD_PROTOCOLO,
            RETORNO.FA,
            RETORNO.EXPORTACAO,
            RETORNO.ROTEIRO,
            RETORNO.COMERCIAL,
            RETORNO.COBRANCA,
            RETORNO.CREDITO,
            RETORNO.CONTRATO_MAE,
            RETORNO.ORDEM_VENDAS,
            RETORNO.STATUS,
            RETORNO.OBSERVACAO,
            RETORNO.RECEBEDOR,
            RETORNO.PAGADOR,
            RETORNO.CD_SALES_GROUP,
            RETORNO.CD_CLIENTE,
            RETORNO.CD_PRODUTO_SAP,
            RETORNO.CD_INCOTERMS,
            RETORNO.CD_CENTRO_EXPEDIDOR,
            RETORNO.CD_CLIENTE_RECEBEDOR,
            RETORNO.CD_CLIENTE_PAGADOR,
            RETORNO.CD_ITEM_PEDIDO,
            RETORNO.CD_ELO_CARTEIRA,
            RETORNO.CD_WEEK,
            RETORNO.COMERCIAL_REFRESH,
            RETORNO.COBRANCA_REFRESH,
            RETORNO.CREDITO_REFRESH,
            RETORNO.CONTRATO_MAE_REFRESH,
            RETORNO.ORDEM_VENDAS_REFRESH

            FROM (       
        
          WITH BLCK AS (SELECT DISTINCT CD_BLOCKING_TYPE_COLUMN, EB.CD_BLOCKING_REASON, CD_BLOCKING_LEVEL
           FROM VND.ELO_BLOCKING_TYPES_COLUMNS EB       
            WHERE EB.CD_BLOCKING_LEVEL IN (1, 2, 3, 4, 5)
            )  
             SELECT DISTINCT
            NVL(ST2.DS_STATUS, 0) "TIPO_AGENDAMENTO",
            EC.CD_CLIENTE "NUM_CLIENTE", 
            EC.NU_CONTRATO_SAP "CONTRATO",
            NVL(EC.NU_ORDEM_VENDA,'-') "OV",
            EC.NU_CONTRATO,
            EC.CD_PRODUTO_SAP "PRODUTO", 
            EC.NO_PRODUTO_SAP "DESCRICAO", 
            EC.DH_CARTEIRA "DATA", 
            NVL(EC.QT_AGENDADA_CONFIRMADA,0) "PROGRAMADO", 
            EC.DS_CENTRO_EXPEDIDOR "CENTRO", 
            EC.CD_INCOTERMS "MODALIDADE", 
            EC.NO_SALES_OFFICE "GERENTE", 
            EC.CD_SALES_GROUP || ' - ' || EC.NO_SALES_GROUP "SUPERVISOR", 
            EC.NO_CLIENTE "CLIENTE",
            CASE
                WHEN EC.IC_COOPERATIVE = 'S' THEN 'SIM'
                WHEN EC.IC_COOPERATIVE = 'N' THEN 'NÃO'
                ELSE 'NÃO'
            END "CONTA_ORDEM",
           -- GX_CELL_ATTENDANCE.FX_GET_NR_PROTOCOLO(EC.NU_CONTRATO_SAP) "PROTOCOLO",
           -- GX_CELL_ATTENDANCE.FX_GET_QT_PROTOCOLO(EC.NU_CONTRATO_SAP) "QTD_PROTOCOLO",
           --EC.NU_PROTOCOLO "PROTOCOLO",
           VND.GX_CELL_ATTENDANCE.FX_GET_NR_PROTOCOLO_VB(EC.CD_ELO_CARTEIRA )"PROTOCOLO",
           
           (SELECT SUM(VBPROT.QT_AGENDADA_PROTOCOLO ) SOMM
           FROM VND.ELO_VBAK_PROTOCOLO VBPROT
           WHERE VBPROT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA AND VBPROT.IC_ATIVO='S') "QTD_PROTOCOLO",
           
            CASE
                WHEN EC.IC_FA = 'S' THEN 'SIM'
                WHEN EC.IC_FA = 'N' THEN 'NÃO'
                ELSE 'NÃO'
            END "FA",
            CASE
                WHEN EC.IC_EXPORT = 'S' THEN 'SIM'
                WHEN EC.IC_EXPORT = 'N' THEN 'NÃO'
                ELSE 'NÃO'
            END "EXPORTACAO",
            CASE
                WHEN EC.CD_INCOTERMS = 'FOB' THEN 'FOB'
                WHEN EC.CD_INCOTERMS = 'CIF' THEN EC.DS_ROTEIRO_ENTREGA
                
            END "ROTEIRO",
  
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'
       ELSE '-' END COMERCIAL,
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END COBRANCA,
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END CREDITO, 
       CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
            WHEN BF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END CONTRATO_MAE,
          CASE WHEN BR.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA = BR.CD_BLOCKING_REASON THEN 'X'
               WHEN BRI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA_ITEM = BRI.CD_BLOCKING_REASON THEN 'X'
               WHEN BF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO = BF.CD_BLOCKING_REASON THEN 'X'
               WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM = BFI.CD_BLOCKING_REASON THEN 'X'
               WHEN BC.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_CREDITO = BC.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END ORDEM_VENDAS,
       
              CASE WHEN BR_REF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA_R = BR_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI_REF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_REMESSA_ITEM_R = BRI_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BF_REF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO_R = BF_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM_R = BR_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BC_REF.CD_BLOCKING_TYPE_COLUMN = '1' AND EC.CD_BLOQUEIO_CREDITO_R = BC_REF.CD_BLOCKING_REASON THEN 'X'
       ELSE '-' END COMERCIAL_REFRESH,
       CASE WHEN BR_REF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA_R = BR_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI_REF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_REMESSA_ITEM_R = BRI_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BF_REF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO_R = BF_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM_R = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC_REF.CD_BLOCKING_TYPE_COLUMN = '2' AND EC.CD_BLOQUEIO_CREDITO_R = BC_REF.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END COBRANCA_REFRESH,
       CASE WHEN BR_REF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA_R = BR_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI_REF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_REMESSA_ITEM_R = BRI_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BF_REF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO_R = BF_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM_R = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC_REF.CD_BLOCKING_TYPE_COLUMN = '3' AND EC.CD_BLOQUEIO_CREDITO_R = BC_REF.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END CREDITO_REFRESH, 
       CASE WHEN BR_REF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA_R = BR_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BRI_REF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_REMESSA_ITEM_R = BRI_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BF_REF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO_R = BF_REF.CD_BLOCKING_REASON THEN 'X'
            WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM_R = BFI.CD_BLOCKING_REASON THEN 'X'
            WHEN BC_REF.CD_BLOCKING_TYPE_COLUMN = '4' AND EC.CD_BLOQUEIO_CREDITO_R = BC_REF.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END CONTRATO_MAE_REFRESH,
          CASE WHEN BR_REF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA_R = BR_REF.CD_BLOCKING_REASON THEN 'X'
               WHEN BRI_REF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_REMESSA_ITEM_R = BRI_REF.CD_BLOCKING_REASON THEN 'X'
               WHEN BF_REF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO_R = BF_REF.CD_BLOCKING_REASON THEN 'X'
               WHEN BFI.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_FATURAMENTO_ITEM_R = BFI.CD_BLOCKING_REASON THEN 'X'
               WHEN BC_REF.CD_BLOCKING_TYPE_COLUMN = '5' AND EC.CD_BLOQUEIO_CREDITO_R = BC_REF.CD_BLOCKING_REASON THEN 'X'       
       ELSE '-' END ORDEM_VENDAS_REFRESH,
       
            COALESCE 
            ((SELECT EC.DS_CREDIT_BLOCK_REASON  
            FROM VND.ELO_STATUS ST_CELL 
            WHERE ST_CELL.CD_ELO_STATUS = EC.CD_STATUS_CEL_FINAL AND ST_CELL.SG_STATUS = 'CLREA' ),
            (SELECT ST_CELL.DS_STATUS 
            FROM VND.ELO_STATUS ST_CELL 
            WHERE ST_CELL.CD_ELO_STATUS = NVL( EC.CD_STATUS_CEL_FINAL, EC.CD_STATUS_CEL_INITIAL)
            )) "STATUS",
           
            
             EC.DS_OBSERVACAO_ADVEN "OBSERVACAO"
            , EC.NO_CLIENTE_RECEBEDOR "RECEBEDOR"
            , EC.NO_CLIENTE_PAGADOR "PAGADOR"
            , EC.CD_SALES_GROUP
            , EC.CD_CLIENTE
            , EC.CD_PRODUTO_SAP
            , EC.CD_INCOTERMS
            , EC.CD_CENTRO_EXPEDIDOR
            , EC.CD_CLIENTE_RECEBEDOR
            , EC.CD_CLIENTE_PAGADOR
            , EC.CD_ITEM_PEDIDO
            , EC.CD_ELO_CARTEIRA
            , EA.CD_WEEK
         
       FROM VND.ELO_CARTEIRA EC INNER JOIN vnd.elo_agendamento EA ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
                                INNER JOIN VND.ELO_STATUS E_AG_ST ON EA.CD_ELO_STATUS = E_AG_ST.CD_ELO_STATUS
                                LEFT JOIN VND.ELO_STATUS ST2 ON EC.CD_TIPO_AGENDAMENTO = ST2.CD_ELO_STATUS
                                INNER JOIN VND.ELO_TIPO_STATUS E_AG_TP ON E_AG_ST.CD_ELO_TIPO_STATUS = E_AG_TP.CD_ELO_TIPO_STATUS
        AND  E_AG_TP.SG_TIPO_STATUS = 'AGEND'
       LEFT JOIN BLCK BR ON BR.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA 
                                LEFT JOIN BLCK BRI ON BRI.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA_ITEM
                                LEFT JOIN BLCK BF ON BF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO
                                LEFT JOIN BLCK BFI ON BFI.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO_ITEM       
                                LEFT JOIN BLCK BC ON BC.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_CREDITO 
       LEFT JOIN BLCK BR_REF ON BR_REF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA_R
                                LEFT JOIN BLCK BRI_REF ON BRI_REF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_REMESSA_ITEM_R
                                LEFT JOIN BLCK BF_REF ON BF_REF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO_R
                                LEFT JOIN BLCK BFI_REF ON BFI_REF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_FATURAMENTO_ITEM_R       
                                LEFT JOIN BLCK BC_REF ON BC_REF.CD_BLOCKING_REASON = EC.CD_BLOQUEIO_CREDITO_R                           
                                
                                
       WHERE EA.CD_WEEK = P_CD_WEEK
        AND EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL
        AND (P_CD_POLO IS NULL OR EA.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EA.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR EA.CD_MACHINE = P_CD_MACHINE)
        AND (P_CD_SALES_DISTRICT IS NULL OR EC.CD_SALES_DISTRICT = P_CD_SALES_DISTRICT)
        AND (P_CD_SALES_OFFICE IS NULL OR EC.CD_SALES_OFFICE = P_CD_SALES_OFFICE)
        AND (P_CD_SALES_GROUP IS NULL OR EC.CD_SALES_GROUP = P_CD_SALES_GROUP)
        
        ) RETORNO
        ORDER BY 
        
        RETORNO.CD_CENTRO_EXPEDIDOR ASC,
        RETORNO.GERENTE ASC,
        RETORNO.CD_SALES_GROUP ASC,
        RETORNO.CONTRATO ASC,
        RETORNO.OV ASC,
        RETORNO.CD_ELO_CARTEIRA ASC

        ;

  END PX_CELL_ATTENDANCE_EXPORTAR;
  

    PROCEDURE PX_CELL_ALLOW_CLOSE(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)

     IS


        V_TRAVA VARCHAR2(13) :='NAO_ENCERRE';


        BEGIN

        BEGIN
        SELECT  'PODE_ENCERRAR' INTO V_TRAVA

        FROM VND.ELO_CARTEIRA EC
        INNER JOIN VND.ELO_AGENDAMENTO EA ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        WHERE 
        EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL AND EC.QT_AGENDADA_CONFIRMADA > 0 
        AND (EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGLOG') FROM DUAL) OR
                EA.CD_ELO_STATUS = (SELECT VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGPRE') FROM DUAL))
        AND (P_CD_WEEK IS NULL OR EA.CD_WEEK = P_CD_WEEK)
        AND (P_CD_POLO IS NULL OR EA.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EA.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR EA.CD_MACHINE = P_CD_MACHINE)
		AND ((EC.CD_STATUS_CEL_FINAL IS NOT NULL) OR 
		 (EC.NU_PROTOCOLO_ENTREGA IS NOT NULL) OR 
		 (EC.NU_PROTOCOLO IS NOT NULL))	
	    AND ROWNUM =1;
		
            
            EXCEPTION 
			
			WHEN NO_DATA_FOUND THEN
				V_TRAVA:='NAO_ENCERRE';
            
            WHEN OTHERS THEN 
                BEGIN
 
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CLOSE CHECK STATUS - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='NAO_ENCERRE';
                END;
            END;



        OPEN P_RETORNO FOR
        SELECT V_TRAVA AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
                OPEN P_RETORNO FOR
                SELECT 'NAO_ENCERRE' AS P_SUCESSO
                FROM DUAL;
                
            END;

    END PX_CELL_ALLOW_CLOSE; 


    PROCEDURE PU_CELL_ATT_UPDATE_BEF_SEP(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_CD_SALES_DISTRICT             IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_DISTRICT%TYPE DEFAULT NULL,
        P_CD_SALES_OFFICE               IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_OFFICE%TYPE DEFAULT NULL,
        P_CD_SALES_GROUP                IN VND.ELO_AGENDAMENTO_SUPERVISOR.CD_SALES_GROUP%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)
    IS
    BEGIN

    NULL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
            
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;

    END PU_CELL_ATT_UPDATE_BEF_SEP;

    PROCEDURE PU_CELL_CLOSE_REPLAN(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)

     IS

        v_count number;
        --v_status                VARCHAR2(10);
        --vSG_TIPO_STATUS         VND.ELO_TIPO_STATUS.SG_TIPO_STATUS%TYPE;
        --vSG_STATUS              VND.ELO_STATUS.SG_STATUS%TYPE;
        V_TRAVA VARCHAR2(1) :='N';
        V_INI_QT_AGENDADA_PROTOCOLO   VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE;
        V_CUR_QT_AGENDADA_PROTOCOLO   VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE;
        V_ABATIMENTO_QT_AGENDADA   VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE;

        --V_RET_CD_ELO_STATUS                 VND.ELO_STATUS.CD_ELO_STATUS%TYPE;
        --V_RET_SG_STATUS                      VND.ELO_STATUS.SG_STATUS%TYPE;
        --V_RET_ERRO                           VARCHAR2(1);
        --V_RET_RETORNO                        T_CURSOR;
        TYPE carteira_r IS RECORD
        (
            CD_ELO_CARTEIRA                VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
            QT_AGENDADA_CONFIRMADA         VND.ELO_CARTEIRA.QT_AGENDADA_CONFIRMADA%TYPE,
            CD_ELO_AGENDAMENTO             VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO%TYPE,
            CD_STATUS_CEL_FINAL            VND.ELO_CARTEIRA.CD_STATUS_CEL_FINAL%TYPE,
            QT_AGENDADA_PROTOCOLO           VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE,
            SG_STATUS_OF_CEL_ATT           VND.ELO_STATUS.SG_STATUS%TYPE, 
            CD_ELO_AGENDAMENTO_ITEM         VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO_ITEM%TYPE
        );

        TYPE carteira_t IS TABLE OF carteira_r;
        
        tof_carteira carteira_t;
        

        TYPE carteira_notgood_r IS RECORD
        (
            CD_ELO_CARTEIRA                VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE
        );        
        
        TYPE carteira_notgood_t IS TABLE OF carteira_notgood_r
        INDEX BY PLS_INTEGER
        ;
       
        TYPE protocolo_notgood_r IS RECORD
        (
            CD_ELO_AGENDAMENTO_ITEM                VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO_ITEM%TYPE
        );        
        
        TYPE protocolo_notgood_t IS TABLE OF protocolo_notgood_r
        INDEX BY PLS_INTEGER
        ;
       
        TYPE grouping_r IS RECORD
        (
            CD_ELO_AGENDAMENTO_GROUPING     VND.ELO_AGENDAMENTO_GROUPING.CD_ELO_AGENDAMENTO_GROUPING%TYPE,
            CD_ELO_CARTEIRA                VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
            CD_ELO_AGENDAMENTO_ITEM         VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO_ITEM%TYPE,
            CD_ELO_VBAK_PROTOCOLO          VND.ELO_VBAK_PROTOCOLO.CD_ELO_VBAK_PROTOCOLO%TYPE, 
            NU_DOCUMENTO                  VND.ELO_AGENDAMENTO_GROUPING.NU_DOCUMENTO%TYPE,
            QT_AGENDADA_PROTOCOLO         VND.ELO_CARTEIRA.QT_AGENDADA_PROTOCOLO%TYPE,
            QT_AGENDADA                     VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE
            
        );
        

        TYPE grouping_t IS TABLE OF grouping_r;
        tableof_grouping grouping_t;
        

        TYPE grouping_abatimento_r IS RECORD
        (
            CD_ELO_AGENDAMENTO_GROUPING   VND.ELO_AGENDAMENTO_GROUPING.CD_ELO_AGENDAMENTO_GROUPING%TYPE,
            QT_AGENDADA_ABATIMENTO        VND.ELO_AGENDAMENTO_GROUPING.QT_AGENDADA%TYPE
        );        
        
        TYPE grouping_abatimento_t IS TABLE OF grouping_abatimento_r
        INDEX BY PLS_INTEGER
        ;
        
        TYPE vbakprotocolo_r IS RECORD
        (
            CD_ELO_VBAK_PROTOCOLO   VND.ELO_VBAK_PROTOCOLO.CD_ELO_VBAK_PROTOCOLO%TYPE
            
        );        
        
        TYPE vbakprotocolo_t IS TABLE OF vbakprotocolo_r
        INDEX BY PLS_INTEGER
        ;        
        
        
        
        tof_not_ok_protocolo protocolo_notgood_t;
        tof_not_ok_carteira carteira_notgood_t;
        
        tof_grouping_abatimento grouping_abatimento_t;
        
        tof_vbakprotocolo vbakprotocolo_t;
        
        


        CURSOR C_CARTEIRA IS
        SELECT DISTINCT
            EC.CD_ELO_CARTEIRA
            ,EC.QT_AGENDADA_CONFIRMADA
            ,EA.CD_ELO_AGENDAMENTO
            ,EC.CD_STATUS_CEL_FINAL
            ,NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                        FROM VND.ELO_VBAK_PROTOCOLO POT 
                        WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                        AND POT.IC_ATIVO='S'), 0)   QT_AGENDADA_PROTOCOLO
            ,NVL(ESCF.SG_STATUS, 'BRANCO') SG_STATUS
            ,EC.CD_ELO_AGENDAMENTO_ITEM
        FROM VND.ELO_CARTEIRA EC
        INNER JOIN VND.ELO_AGENDAMENTO EA ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
        LEFT JOIN VND.ELO_STATUS ESCF
        ON ESCF.CD_ELO_STATUS = EC.CD_STATUS_CEL_FINAL
        WHERE (NVL(EC.QT_AGENDADA_CONFIRMADA,0) >= 0)  
        AND EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL
        AND NOT(NVL(ESCF.SG_STATUS, 'BRANCO') = 'CLOOK') AND EC.NU_PROTOCOLO IS NOT NULL
        
        AND ((EC.CD_TIPO_AGENDAMENTO = 25 AND EC.CD_STATUS_REPLAN = 32 AND NOT(VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGENC') = EA.CD_ELO_STATUS)))
        --    OR (EA.CD_ELO_STATUS IN ( VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGCTR'), 
        --          VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'PLAN'))))
        AND (P_CD_WEEK IS NULL OR EA.CD_WEEK = P_CD_WEEK)
        AND (P_CD_POLO IS NULL OR EA.CD_POLO = P_CD_POLO)
        AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR EA.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
        AND (P_CD_MACHINE IS NULL OR EA.CD_MACHINE = P_CD_MACHINE);
        
        
        CURSOR C_GROUPING 
        ( V_CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
          V_CD_ELO_AGENDAMENTO_ITEM VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO_ITEM%TYPE--, 
          --V_NU_DOCUMENTO VND.ELO_AGENDAMENTO_GROUPING.NU_DOCUMENTO%TYPE
        )
        IS 
                
        WITH CTE_CARTEIRA AS 
        (
        SELECT 
        CT.CD_ELO_CARTEIRA, CT.CD_ELO_AGENDAMENTO_ITEM, CT.CD_STATUS_CEL_FINAL,
        CT.QT_AGENDADA_CONFIRMADA, CT.CD_ELO_AGENDAMENTO
        FROM VND.ELO_CARTEIRA CT
        INNER JOIN VND.ELO_AGENDAMENTO AGE
        ON CT.CD_ELO_AGENDAMENTO = AGE.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_STATUS AGESTAT
        ON AGESTAT.CD_ELO_STATUS = AGE.CD_ELO_STATUS
        LEFT JOIN VND.ELO_STATUS STCELL 
        ON STCELL.CD_ELO_STATUS = CT.CD_STATUS_CEL_FINAL 
        WHERE 
        CT.IC_ATIVO = 'S'
        AND AGE.IC_ATIVO = 'S'
        AND NOT(STCELL.SG_STATUS = 'AGENC')
        AND CT.CD_ELO_CARTEIRA = V_CD_ELO_CARTEIRA
        AND CT.CD_ELO_AGENDAMENTO_ITEM = V_CD_ELO_AGENDAMENTO_ITEM
        AND CT.CD_TIPO_AGENDAMENTO = 25 AND CT.CD_STATUS_REPLAN = 32
        AND NOT(NVL(STCELL.SG_STATUS, 'BRANCO') = 'CLOOK')
        AND NVL(CT.QT_AGENDADA_CONFIRMADA ,0) >= 0 
        )

        SELECT 
        IGROUP.CD_ELO_AGENDAMENTO_GROUPING, 
        CT.CD_ELO_CARTEIRA, 
        CT.CD_ELO_AGENDAMENTO_ITEM, 
        PROTO.CD_ELO_VBAK_PROTOCOLO,
        PROTO.NU_PROTOCOLO, 
        PROTO.QT_AGENDADA_PROTOCOLO, 
        IGROUP.QT_AGENDADA 
        --CT.QT_AGENDADA_CONFIRMADA, --CENT.QT_QUANTIDADE, --CENT.QT_FORNECIDO, --CENT.CD_AUTORIZACAO_ENTREGA
        --CT.CD_STATUS_CEL_FINAL, --IGROUP.CD_ELO_AGENDAMENTO_WEEK,

        FROM CTE_CARTEIRA CT
        INNER JOIN VND.ELO_VBAK_PROTOCOLO PROTO
        ON CT.CD_ELO_CARTEIRA = PROTO.CD_ELO_CARTEIRA
        INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR AGSUP
        ON AGSUP.CD_ELO_AGENDAMENTO = CT.CD_ELO_AGENDAMENTO
        INNER JOIN VND.ELO_AGENDAMENTO_ITEM AGITEM
        ON AGSUP.CD_ELO_AGENDAMENTO_SUPERVISOR = AGITEM.CD_ELO_AGENDAMENTO_SUPERVISOR
        INNER JOIN VND.ELO_AGENDAMENTO_WEEK WEESK
        ON AGITEM.CD_ELO_AGENDAMENTO_ITEM = WEESK.CD_ELO_AGENDAMENTO_ITEM
        AND WEESK.CD_ELO_AGENDAMENTO_ITEM = CT.CD_ELO_AGENDAMENTO_ITEM
        INNER JOIN VND.ELO_AGENDAMENTO_GROUPING  IGROUP
        ON WEESK.CD_ELO_AGENDAMENTO_WEEK = IGROUP.CD_ELO_AGENDAMENTO_WEEK
        --INNER JOIN CPT.ENTREGA CENT
        --ON PROTO.NU_PROTOCOLO = CENT.NU_PROTOCOLO_ENTREGA
        --AND PROTO.CD_ENTREGA = CENT.CD_AUTORIZACAO_ENTREGA

        WHERE 
        PROTO.QT_AGENDADA_PROTOCOLO > 0 
        AND PROTO.IC_ATIVO = 'S'
        --AND CENT.SG_STATUS NOT IN ('C')
        AND IGROUP.SG_TIPO_DOCUMENTO = 'P'
        AND IGROUP.NU_DOCUMENTO IS NOT NULL --= V_NU_DOCUMENTO
        AND AGSUP.IC_ATIVO = 'S'
        AND AGITEM.IC_ATIVO = 'S'
        ORDER BY IGROUP.CD_ELO_AGENDAMENTO_GROUPING DESC;



        -- LINHA DO CURSOR DA CARTEIRA
        --C_LINHA C_CARTEIRA%ROWTYPE;

        BEGIN


        OPEN C_CARTEIRA;
        FETCH C_CARTEIRA BULK COLLECT INTO tof_carteira LIMIT 10000;
        CLOSE C_CARTEIRA;
        
        IF tof_carteira.COUNT >0 THEN 
            V_TRAVA:='N';
        ELSE
            V_TRAVA:='S';
        END IF;

        
        
        
        FOR C_LINHA IN 1 .. tof_carteira.COUNT
        LOOP
            
        IF NOT (tof_carteira(C_LINHA).SG_STATUS_OF_CEL_ATT = 'CLOOK') THEN
            --tof_not_ok_carteira.EXTEND;
            BEGIN
                tof_not_ok_carteira(tof_not_ok_carteira.COUNT +1 ).CD_ELO_CARTEIRA:= tof_carteira(C_LINHA).CD_ELO_CARTEIRA;
                    
                IF tof_carteira(C_LINHA).QT_AGENDADA_PROTOCOLO > 0 THEN 
                BEGIN
                    tof_not_ok_protocolo(tof_not_ok_protocolo.COUNT + 1).CD_ELO_AGENDAMENTO_ITEM:=tof_carteira(C_LINHA).CD_ELO_AGENDAMENTO_ITEM;
                    
                    OPEN C_GROUPING ( tof_carteira(C_LINHA).CD_ELO_CARTEIRA, tof_carteira(C_LINHA).CD_ELO_AGENDAMENTO_ITEM  );
                    FETCH C_GROUPING BULK COLLECT INTO tableof_grouping LIMIT 300;
                    CLOSE C_GROUPING;    
                    
                    IF tableof_grouping.COUNT > 0 THEN 
                        V_INI_QT_AGENDADA_PROTOCOLO:=tableof_grouping(1).QT_AGENDADA_PROTOCOLO;
                        V_ABATIMENTO_QT_AGENDADA:=V_INI_QT_AGENDADA_PROTOCOLO;
                        V_CUR_QT_AGENDADA_PROTOCOLO:=V_INI_QT_AGENDADA_PROTOCOLO;
                    ELSE 
                        V_INI_QT_AGENDADA_PROTOCOLO:=0;
                        V_ABATIMENTO_QT_AGENDADA:=0;
                        V_CUR_QT_AGENDADA_PROTOCOLO:=0;
                    END IF; 
                    
                    FOR C_LINHA_GROUPING IN 1 ..   tableof_grouping.COUNT
                    LOOP
                        
                        IF tableof_grouping(C_LINHA_GROUPING).QT_AGENDADA > 0 AND V_CUR_QT_AGENDADA_PROTOCOLO > 0 THEN 
                        BEGIN
                            IF tableof_grouping(C_LINHA_GROUPING).QT_AGENDADA < V_CUR_QT_AGENDADA_PROTOCOLO THEN 
                                V_CUR_QT_AGENDADA_PROTOCOLO:= V_CUR_QT_AGENDADA_PROTOCOLO - tableof_grouping(C_LINHA_GROUPING).QT_AGENDADA;
                                V_ABATIMENTO_QT_AGENDADA:=0;
                            ELSE 
                                
                                V_ABATIMENTO_QT_AGENDADA:= tableof_grouping(C_LINHA_GROUPING).QT_AGENDADA - V_CUR_QT_AGENDADA_PROTOCOLO; 
                                V_CUR_QT_AGENDADA_PROTOCOLO:=0;
                            
                            END IF;  
                        
                            tof_grouping_abatimento(tof_grouping_abatimento.COUNT +1).CD_ELO_AGENDAMENTO_GROUPING:= tableof_grouping(C_LINHA_GROUPING).CD_ELO_AGENDAMENTO_GROUPING;
                            tof_grouping_abatimento(tof_grouping_abatimento.COUNT).QT_AGENDADA_ABATIMENTO:= V_ABATIMENTO_QT_AGENDADA;
                            
                            tof_vbakprotocolo(tof_vbakprotocolo.COUNT+1).CD_ELO_VBAK_PROTOCOLO:= tableof_grouping(C_LINHA_GROUPING).CD_ELO_VBAK_PROTOCOLO;
                            
                            
                        END;
                        END IF; 
                        
                        EXIT WHEN V_CUR_QT_AGENDADA_PROTOCOLO <=0;

                    END LOOP;              
                    
                    
                END;    
                END IF;
            
            END;
            
        END IF; 

        END LOOP;

        
        IF V_TRAVA ='N' THEN
        BEGIN
         


        BEGIN

            FORALL C_LINHA IN INDICES OF tof_not_ok_carteira SAVE EXCEPTIONS 
            
            UPDATE VND.ELO_CARTEIRA
            SET 
                QT_AGENDADA_CONFIRMADA = 0,
                QT_AGENDADA_CELULA = 0 
                    , DS_VERSAO = SUBSTR(NVL(DS_VERSAO, ' '), 1,3500 ) || SUBSTR(  '[{"ID": 0022, "APP": "GX_ELO_CELL_ATTENDANCE.PU_CELL_ATTENDANCE_CLOSE",' || 
                    '"PROPERTIE": [{"NAME": "QT_AGENDADA_CONFIRMADA", "VAL":' || NVL(TO_CHAR(QT_AGENDADA_CONFIRMADA), 'NULL') || '},' ||
                    '{"NAME": "QT_AGENDADA_CONFIRMADA_CLOSE", "VAL":' || TO_CHAR(0) ||  '},' ||
                    '{"NAME": "QT_AGENDADA_CELULA_CLOSE", "VAL":' || TO_CHAR(0) ||  '},' ||
                    '{"NAME": "QT_AGENDADA_CELULA", "VAL":' || TO_CHAR(QT_AGENDADA_CELULA) || '},' ||
                            '], "DH_ULT_MOD": ' || TO_CHAR(CURRENT_DATE, 'DD/MM/RRRR HH24:MI:SS') || ' }],' ,1, 500)                            
                
            WHERE CD_ELO_CARTEIRA = tof_not_ok_carteira(C_LINHA).CD_ELO_CARTEIRA;
            COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
        IF SQLCODE = -24381  THEN
        FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
        LOOP
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO: GX_CELL_ATTENDANCE.058 - ' ||
        SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
        || ': '
        || SQL%BULK_EXCEPTIONS (indx).ERROR_CODE);
        END LOOP;
        ELSE
        RAISE;
        END IF;


        END;
        
        
        BEGIN

            FORALL C_LINHA IN INDICES OF tof_grouping_abatimento SAVE EXCEPTIONS 
            
            UPDATE VND.ELO_AGENDAMENTO_GROUPING 
            SET 
                QT_AGENDADA = tof_grouping_abatimento(C_LINHA).QT_AGENDADA_ABATIMENTO
                
            WHERE CD_ELO_AGENDAMENTO_GROUPING = tof_grouping_abatimento(C_LINHA).CD_ELO_AGENDAMENTO_GROUPING;
            COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
        IF SQLCODE = -24381  THEN
        FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
        LOOP
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO: GX_CELL_ATTENDANCE.059 - ' ||
        SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
        || ': '
        || SQL%BULK_EXCEPTIONS (indx).ERROR_CODE);
        END LOOP;
        ELSE
        RAISE;
        END IF;


        END;        
        
        --tof_vbakprotocolo
        
        BEGIN

            FORALL C_LINHA IN INDICES OF tof_vbakprotocolo SAVE EXCEPTIONS 
            
            UPDATE VND.ELO_VBAK_PROTOCOLO 
            SET 
                QT_AGENDADA_PROTOCOLO = 0
                
            WHERE CD_ELO_VBAK_PROTOCOLO = tof_vbakprotocolo(C_LINHA).CD_ELO_VBAK_PROTOCOLO ;
            COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
        IF SQLCODE = -24381  THEN
        FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
        LOOP
        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO: GX_CELL_ATTENDANCE.060 - ' ||
        SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
        || ': '
        || SQL%BULK_EXCEPTIONS (indx).ERROR_CODE);
        END LOOP;
        ELSE
        RAISE;
        END IF;


        END;

        END;
        END IF;

        OPEN P_RETORNO FOR
        SELECT '1' AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;

    END PU_CELL_CLOSE_REPLAN; 

PROCEDURE PU_ULTIMA_PARA_CEL_STATUS(
        P_CD_POLO                       IN VND.ELO_AGENDAMENTO.CD_POLO%TYPE DEFAULT NULL,
        P_CD_CENTRO_EXPEDIDOR           IN VND.ELO_AGENDAMENTO.CD_CENTRO_EXPEDIDOR%TYPE DEFAULT NULL,
        P_CD_MACHINE                    IN VND.ELO_AGENDAMENTO.CD_MACHINE%TYPE DEFAULT NULL,
        P_CD_WEEK                       IN VND.ELO_AGENDAMENTO.CD_WEEK%TYPE DEFAULT NULL,
        P_RETORNO                       OUT T_CURSOR)
    IS

    V_CD_MOTIVO_RECUSA                      VND.ITEM_CONTRATO.CD_MOTIVO_RECUSA%TYPE;
    V_CD_BLOQUEIO_REMESSA                   VND.PEDIDO.CD_BLOQUEIO_REMESSA%TYPE;
    V_CD_BLOQUEIO_REMESSA_ITEM              VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE;
    V_CD_BLOQUEIO_FATURAMENTO               VND.PEDIDO.CD_BLOQUEIO_FATURAMENTO%TYPE;
    V_CD_BLOQUEIO_FATURAMENTO_ITEM          VND.ITEM_CONTRATO.CD_BLOQUEIO_FATURAMENTO_ITEM%TYPE;
    V_CD_BLOQUEIO_CREDITO                   VND.PEDIDO.CD_BLOQUEIO_CREDITO%TYPE;
    V_DS_CREDIT_BLOCK_REASON                VND.PEDIDO.DS_CREDIT_BLOCK_REASON%TYPE;
    V_NU_ORDEM_VENDA                        VND.PEDIDO.NU_ORDEM_VENDA%TYPE;
    V_CD_CONTRATO                           VND.CONTRATO.CD_CONTRATO%TYPE;
    V_CD_BLOQUEIO_ENTREGA                   VND.CONTRATO.CD_BLOQUEIO_ENTREGA%TYPE;
    
    V_CD_MOTIVO_BLOQUEIO_CREDITO            VND.PEDIDO.CD_MOTIVO_BLOQUEIO_CREDITO%TYPE;
    V_NU_CONTRATO_SAP                       VND.CONTRATO.NU_CONTRATO_SAP%TYPE;
    V_CD_ITEM_CONTRATO                      VND.ITEM_CONTRATO.CD_ITEM_CONTRATO%TYPE;
    
    V_CD_PEDIDO                             VND.PEDIDO.CD_PEDIDO%TYPE;
    V_CD_ITEM_PEDIDO                        VND.PEDIDO.CD_ITEM_PEDIDO%TYPE;  
    V_CD_PRODUTO_SAP                        VND.PEDIDO.CD_PRODUTO_SAP%TYPE; 
 
      
        

    v_count                 NUMBER;
    iContaItem              NUMBER;
    v_status                VARCHAR2(10);
    V_TRAVA                 VARCHAR2(1):='N';
        
    V_RET_CD_ELO_STATUS                 VND.ELO_STATUS.CD_ELO_STATUS%TYPE;
    V_RET_SG_STATUS                      VND.ELO_STATUS.SG_STATUS%TYPE;
    V_RET_ERRO                           VARCHAR2(1);
        
    TYPE T_CURSOR IS REF CURSOR;
    V_RET_RETORNO                        T_CURSOR;
    
    V_ST_CS_CAFIN  VND.ELO_CARTEIRA.CD_STATUS_CUSTOMER_SERVICE%TYPE; 
    V_ST_TF_CANEW  VND.ELO_CARTEIRA.CD_STATUS_TORRE_FRETES%TYPE;
    V_ST_CS_CAPRO  VND.ELO_CARTEIRA.CD_STATUS_CUSTOMER_SERVICE%TYPE; 

    CURSOR C_CARTEIRA IS
    
    WITH CTE_AGENDAMENTO AS 
    (
    SELECT AGE.CD_ELO_AGENDAMENTO , AGE.CD_ELO_STATUS
    FROM VND.ELO_AGENDAMENTO AGE
    WHERE 
    AGE.CD_ELO_STATUS NOT IN (VND.GX_ELO_COMMON.fx_elo_status('AGEND', 'AGENC'), 1,2,3,4,5)
    AND (P_CD_WEEK IS NULL OR AGE.CD_WEEK = P_CD_WEEK)
    AND (P_CD_POLO IS NULL OR AGE.CD_POLO = P_CD_POLO)
    AND (P_CD_CENTRO_EXPEDIDOR IS NULL OR AGE.CD_CENTRO_EXPEDIDOR = P_CD_CENTRO_EXPEDIDOR)
    AND (P_CD_MACHINE IS NULL OR AGE.CD_MACHINE = P_CD_MACHINE)
    
    )
        
        
    SELECT DISTINCT
    EC.CD_ELO_AGENDAMENTO
    ,EC.CD_ELO_CARTEIRA
    ,EC.NU_ORDEM_VENDA
    ,EC.CD_ITEM_PEDIDO
    ,EC.CD_INCOTERMS 
    ,EC.IC_COOPERATIVE
    ,EC.NU_CONTRATO_SAP
    ,EC.CD_ITEM_CONTRATO
    ,NVL((SELECT SUM(NVL(POT.QT_AGENDADA_PROTOCOLO,0 )) QT 
                FROM VND.ELO_VBAK_PROTOCOLO POT 
                WHERE POT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA 
                AND POT.IC_ATIVO='S'), 0)  QT_AGENDADA_PROTOCOLO
    ,EC.CD_PRODUTO_SAP
    ,EC.CD_TIPO_AGENDAMENTO
    FROM VND.ELO_CARTEIRA EC
    INNER JOIN CTE_AGENDAMENTO EA 
    ON EC.CD_ELO_AGENDAMENTO = EA.CD_ELO_AGENDAMENTO
    INNER JOIN VND.ELO_AGENDAMENTO_SUPERVISOR EAS ON EA.CD_ELO_AGENDAMENTO = EAS.CD_ELO_AGENDAMENTO
    WHERE
    ((EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL AND NVL(EC.QT_AGENDADA_CONFIRMADA,0) >= 0
    AND EC.CD_TIPO_AGENDAMENTO IN (22,23,24)
    AND NOT(NVL(EC.CD_STATUS_CEL_FINAL, 58) = 59)
    )
    OR (
    EC.CD_STATUS_CUSTOMER_SERVICE IS NOT NULL AND EC.QT_AGENDADA_CONFIRMADA = 0 
    AND EC.CD_TIPO_AGENDAMENTO IN (22,23,24)
    AND EC.CD_STATUS_CEL_FINAL = 59 
    )
    OR EXISTS (SELECT 1 FROM CPT.ENTREGA PE 
    INNER JOIN VND.ELO_VBAK_PROTOCOLO PROT
    ON PE.NU_PROTOCOLO_ENTREGA = PROT.NU_PROTOCOLO
    WHERE PROT.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA AND
    PROT.QT_AGENDADA_PROTOCOLO > 0 
    AND PROT.IC_ATIVO = 'S' 
    AND PE.SG_STATUS = 'C' ) 
    
    )
    
    
     
    AND 
    EXISTS (SELECT 1 FROM VND.ELO_VBAK_PROTOCOLO PROTI 
    WHERE PROTI.CD_ELO_CARTEIRA = EC.CD_ELO_CARTEIRA
    AND PROTI.QT_AGENDADA_PROTOCOLO > 0
    AND PROTI.IC_ATIVO = 'S') 
    ;
        
    TYPE carteira_r IS RECORD
    (
        CD_ELO_AGENDAMENTO      VND.ELO_CARTEIRA.CD_ELO_AGENDAMENTO%TYPE,
        CD_ELO_CARTEIRA         VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        NU_ORDEM_VENDA             VND.ELO_CARTEIRA.NU_ORDEM_VENDA%TYPE,
        CD_ITEM_PEDIDO            VND.ELO_CARTEIRA.CD_ITEM_PEDIDO%TYPE,
        CD_INCOTERMS            VND.ELO_CARTEIRA.CD_INCOTERMS%TYPE,
        IC_COOPERATIVE           VND.ELO_CARTEIRA.IC_COOPERATIVE%TYPE, 
        NU_CONTRATO_SAP         VND.ELO_CARTEIRA.NU_CONTRATO_SAP%TYPE,
        CD_ITEM_CONTRATO        VND.ELO_CARTEIRA.NU_CONTRATO_SAP%TYPE,
        QT_AGENDADA_PROTOCOLO   VND.ELO_VBAK_PROTOCOLO.QT_AGENDADA_PROTOCOLO%TYPE, 
        CD_PRODUTO_SAP          VND.ELO_CARTEIRA.CD_PRODUTO_SAP%TYPE,
        CD_TIPO_AGENDAMENTO     VND.ELO_CARTEIRA.CD_TIPO_AGENDAMENTO%TYPE
    );

    TYPE carteira_t IS TABLE OF carteira_r;
    tof_carteira carteira_t;
    

    CURSOR C_CONTRATO 
    (
    L_CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
    L_NU_CONTRATO_SAP VND.CONTRATO.NU_CONTRATO_SAP%TYPE, 
    L_CD_ITEM_CONTRATO VND.ITEM_CONTRATO.CD_ITEM_CONTRATO%TYPE)
    IS 
        SELECT 
        L_CD_ELO_CARTEIRA CD_ELO_CARTEIRA
        , PE.CD_CONTRATO
        , PE.NU_CONTRATO_SAP
        , PE.CD_BLOQUEIO_REMESSA
        , PE.CD_BLOQUEIO_FATURAMENTO
        , PE.CD_BLOQUEIO_CREDITO
        , PE.DS_CREDIT_BLOCK_REASON
        , PE.CD_BLOQUEIO_ENTREGA
      
        
        FROM VND.CONTRATO PE
        WHERE 
        PE.NU_CONTRATO_SAP = L_NU_CONTRATO_SAP 
        AND EXISTS (SELECT 1 
        FROM VND.ITEM_CONTRATO IC 
        WHERE IC.CD_CONTRATO = PE.CD_CONTRATO 
        AND IC.CD_ITEM_CONTRATO = L_CD_ITEM_CONTRATO)
        ;
                
    TYPE contrato_r IS RECORD
    (
        CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        CD_CONTRATO      VND.CONTRATO.CD_CONTRATO%TYPE,
        NU_CONTRATO_SAP         VND.CONTRATO.NU_CONTRATO_SAP%TYPE,
        CD_BLOQUEIO_REMESSA             VND.CONTRATO.CD_BLOQUEIO_REMESSA%TYPE,
        CD_BLOQUEIO_FATURAMENTO            VND.CONTRATO.CD_BLOQUEIO_FATURAMENTO%TYPE,
        CD_BLOQUEIO_CREDITO            VND.CONTRATO.CD_BLOQUEIO_CREDITO%TYPE,
        DS_CREDIT_BLOCK_REASON           VND.CONTRATO.DS_CREDIT_BLOCK_REASON%TYPE, 
        CD_BLOQUEIO_ENTREGA         VND.CONTRATO.CD_BLOQUEIO_ENTREGA%TYPE

    );

            TYPE contrato_t IS TABLE OF contrato_r;
            tof_contrato contrato_t;                

    CURSOR C_ITEM_CONTRATO 
   (
   L_CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
   L_CD_CONTRATO VND.CONTRATO.CD_CONTRATO%TYPE, 
    L_CD_ITEM_CONTRATO VND.ITEM_CONTRATO.CD_ITEM_CONTRATO%TYPE)

    IS 

    SELECT 
    L_CD_ELO_CARTEIRA CD_ELO_CARTEIRA,
    PE.CD_CONTRATO, IC.CD_ITEM_CONTRATO, IC.CD_BLOQUEIO_FATURAMENTO_ITEM, IC.CD_MOTIVO_RECUSA, IC.CD_PRODUTO_SAP
    FROM VND.ITEM_CONTRATO IC
    INNER JOIN VND.CONTRATO PE
    ON IC.CD_CONTRATO = PE.CD_CONTRATO
    WHERE PE.CD_CONTRATO = L_CD_CONTRATO
    AND IC.CD_ITEM_CONTRATO = L_CD_ITEM_CONTRATO;
    
    TYPE item_contrato_r IS RECORD
    (
        CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
        CD_CONTRATO      VND.CONTRATO.CD_CONTRATO%TYPE,
        CD_ITEM_CONTRATO         VND.ITEM_CONTRATO.CD_ITEM_CONTRATO%TYPE,
        CD_BLOQUEIO_FATURAMENTO_ITEM             VND.ITEM_CONTRATO.CD_BLOQUEIO_FATURAMENTO_ITEM%TYPE,
        CD_MOTIVO_RECUSA            VND.ITEM_CONTRATO.CD_MOTIVO_RECUSA%TYPE, 
        CD_PRODUTO_SAP VND.ITEM_CONTRATO.CD_PRODUTO_SAP%TYPE

    );

            TYPE item_contrato_t IS TABLE OF item_contrato_r;
            tof_item_contrato item_contrato_t;   
            
            
    CURSOR C_PEDIDUM 
    
    (
    L_CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
    L_NU_ORDEM_VENDA VND.PEDIDO.NU_ORDEM_VENDA%TYPE, 
        L_CD_PRODUTO_SAP VND.PEDIDO.CD_PRODUTO_SAP%TYPE
    )
    IS 
    SELECT 
    L_CD_ELO_CARTEIRA CD_ELO_CARTEIRA 
    , PED.NU_CONTRATO_SAP 
    , PED.CD_ITEM_CONTRATO
    , PED.CD_PEDIDO 
    , PED.CD_ITEM_PEDIDO
    , PED.NU_ORDEM_VENDA  
    , PED.CD_PRODUTO_SAP       
    
    , PED.CD_MOTIVO_RECUSA
    , PED.CD_BLOQUEIO_REMESSA 
    , PED.CD_BLOQUEIO_REMESSA_ITEM
    , PED.CD_BLOQUEIO_FATURAMENTO
    , PED.CD_BLOQUEIO_FATURAMENTO_ITEM
    , PED.CD_BLOQUEIO_CREDITO
    , PED.DS_CREDIT_BLOCK_REASON
    , PED.CD_MOTIVO_BLOQUEIO_CREDITO 
    , PED.CD_BLOQUEIO_ENTREGA    

    FROM VND.PEDIDO PED
    WHERE 
    PED.NU_ORDEM_VENDA = L_NU_ORDEM_VENDA
    AND PED.CD_PRODUTO_SAP = L_CD_PRODUTO_SAP
    AND (PED.DH_ENTREGA = (SELECT MAX(DH_ENTREGA) DH 
    FROM VND.PEDIDO PIT 
    WHERE PED.CD_PEDIDO = PIT.CD_PEDIDO
    AND PIT.NU_ORDEM_VENDA = L_NU_ORDEM_VENDA ) OR PED.DH_ENTREGA IS NULL)
    ;

    TYPE pedidum_r IS RECORD
    (

    CD_ELO_CARTEIRA VND.ELO_CARTEIRA.CD_ELO_CARTEIRA%TYPE,
    NU_CONTRATO_SAP     VND.PEDIDO.NU_CONTRATO_SAP%TYPE, 
    CD_ITEM_CONTRATO    VND.PEDIDO.CD_ITEM_CONTRATO%TYPE, 
    CD_PEDIDO           VND.PEDIDO.CD_PEDIDO%TYPE, 
    CD_ITEM_PEDIDO      VND.PEDIDO.CD_ITEM_PEDIDO%TYPE, 
    NU_ORDEM_VENDA      VND.PEDIDO.NU_ORDEM_VENDA%TYPE, 
    CD_PRODUTO_SAP      VND.PEDIDO.CD_PRODUTO_SAP%TYPE,  
    
    CD_MOTIVO_RECUSA    VND.PEDIDO.CD_MOTIVO_RECUSA%TYPE, 
    CD_BLOQUEIO_REMESSA VND.PEDIDO.CD_BLOQUEIO_REMESSA%TYPE, 
    CD_BLOQUEIO_REMESSA_ITEM VND.PEDIDO.CD_BLOQUEIO_REMESSA_ITEM%TYPE, 
    CD_BLOQUEIO_FATURAMENTO VND.PEDIDO.CD_BLOQUEIO_FATURAMENTO%TYPE, 
    CD_BLOQUEIO_FATURAMENTO_ITEM    VND.PEDIDO.CD_BLOQUEIO_FATURAMENTO_ITEM%TYPE, 
    CD_BLOQUEIO_CREDITO VND.PEDIDO.CD_BLOQUEIO_CREDITO%TYPE, 
    DS_CREDIT_BLOCK_REASON  VND.PEDIDO.DS_CREDIT_BLOCK_REASON%TYPE, 
    CD_MOTIVO_BLOQUEIO_CREDITO VND.PEDIDO.CD_MOTIVO_BLOQUEIO_CREDITO%TYPE, 
    CD_BLOQUEIO_ENTREGA VND.PEDIDO.CD_BLOQUEIO_ENTREGA%TYPE


    );

    TYPE pedidum_t IS TABLE OF pedidum_r;
    tof_pedidum pedidum_t; 
 
    TYPE to_atual_pedidum_t IS TABLE OF pedidum_r
    INDEX BY PLS_INTEGER;
    
    tof_atual_pedidum_t to_atual_pedidum_t;
    
    
    V_DS_VERSAO VARCHAR2(4000);
    
      


    BEGIN
        
        V_ST_CS_CAFIN:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAFIN');
        V_ST_TF_CANEW:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CANEW');
        V_ST_CS_CAPRO:=  VND.GX_ELO_COMMON.fx_elo_status('CARTE', 'CAPRO'); 
        
        
        OPEN C_CARTEIRA;
        FETCH C_CARTEIRA BULK COLLECT INTO tof_carteira LIMIT 10000;
        CLOSE C_CARTEIRA;   

        FOR C_LINHA IN 1 .. tof_carteira.COUNT
        LOOP
        BEGIN


            IF  tof_carteira(C_LINHA).NU_ORDEM_VENDA IS NULL THEN  
             
            -- SE 'NAO' EXISTIR A ORDEM DE VENDA NA PEDIDO, ATUALIZA A CARTEIRA COM OS DADOS DE BLOQUEIO DA CONTRATO
            -- ATUALIZA NA CARTEIRA A ORDEM SE ESTIVER EM BRANCO E OS VALORES DE BLOQUEIO, VINDOS DO CONTRATO
            BEGIN 
                BEGIN
                
                OPEN C_CONTRATO(tof_carteira(C_LINHA).CD_ELO_CARTEIRA, 
                    tof_carteira(C_LINHA).NU_CONTRATO_SAP, tof_carteira(C_LINHA).CD_ITEM_CONTRATO );
                FETCH C_CONTRATO BULK COLLECT INTO tof_contrato LIMIT 100;
                CLOSE C_CONTRATO; 

                EXCEPTION 
                WHEN NO_DATA_FOUND THEN 
                        V_TRAVA:='S';
                WHEN OTHERS THEN 
                    BEGIN
                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CONTRATO - 007 B'
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                    END;

                END;	                        


                IF tof_contrato.COUNT > 0 THEN
                    
                    
                    FOR C_L_CONTRATO IN 1 .. tof_contrato.COUNT
                    LOOP

                    BEGIN
                    OPEN C_ITEM_CONTRATO(tof_carteira(C_LINHA).CD_ELO_CARTEIRA, 
                        tof_contrato(C_L_CONTRATO).CD_CONTRATO, tof_carteira(C_LINHA).CD_ITEM_CONTRATO );
                        
                    FETCH C_ITEM_CONTRATO BULK COLLECT INTO tof_item_contrato LIMIT 100;
                    CLOSE C_ITEM_CONTRATO;
                    
                        FOR C_L_ITEM_CONTRATO IN 1.. tof_item_contrato.COUNT
                        LOOP
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT + 1 ).CD_ELO_CARTEIRA:= tof_item_contrato(C_L_ITEM_CONTRATO).CD_ELO_CARTEIRA;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).NU_CONTRATO_SAP:= tof_contrato(C_L_CONTRATO).NU_CONTRATO_SAP;  
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_ITEM_CONTRATO:= tof_item_contrato(C_L_ITEM_CONTRATO).CD_ITEM_CONTRATO;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_PEDIDO        := NULL;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_ITEM_PEDIDO   := NULL;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).NU_ORDEM_VENDA   := NULL;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_PRODUTO_SAP    := tof_item_contrato(C_L_ITEM_CONTRATO).CD_PRODUTO_SAP;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_MOTIVO_RECUSA :=  tof_item_contrato(C_L_ITEM_CONTRATO).CD_MOTIVO_RECUSA;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_REMESSA:=  tof_contrato(C_L_CONTRATO).CD_BLOQUEIO_REMESSA;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_REMESSA_ITEM:= NULL ;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_FATURAMENTO  := tof_contrato(C_L_CONTRATO).CD_BLOQUEIO_FATURAMENTO;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_FATURAMENTO_ITEM:= tof_item_contrato(C_L_ITEM_CONTRATO).CD_BLOQUEIO_FATURAMENTO_ITEM;  
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_CREDITO  := tof_contrato(C_L_CONTRATO).CD_BLOQUEIO_CREDITO;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).DS_CREDIT_BLOCK_REASON :=  tof_contrato(C_L_CONTRATO).DS_CREDIT_BLOCK_REASON;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_MOTIVO_BLOQUEIO_CREDITO:=  NULL ; --tof_contrato(C_L_CONTRATO).CD_MOTIVO_BLOQUEIO_CREDITO;
                            tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_ENTREGA := tof_contrato(C_L_CONTRATO).CD_BLOQUEIO_ENTREGA;
                            
                            
                        END LOOP;
                    

                    EXCEPTION 
                    WHEN NO_DATA_FOUND THEN 
                        BEGIN

                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 012 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;
                    WHEN OTHERS THEN 
                        BEGIN

                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 013 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;
                    END;
                    
                    END LOOP;
                    


                END IF;
            END;

            END IF;
            
        END; 
        END LOOP;
        
        FOR C_LINHA IN 1 .. tof_carteira.COUNT
        LOOP
        BEGIN

            -- #############################################################################################

            IF tof_carteira(C_LINHA).NU_ORDEM_VENDA IS NOT NULL THEN 
            BEGIN

                
                BEGIN
                    BEGIN 

                    OPEN C_PEDIDUM(tof_carteira(C_LINHA).CD_ELO_CARTEIRA, 
                        tof_carteira(C_LINHA).NU_ORDEM_VENDA, tof_carteira(C_LINHA).CD_PRODUTO_SAP);
                    FETCH C_PEDIDUM BULK COLLECT INTO tof_pedidum LIMIT 100;
                    CLOSE C_PEDIDUM;
                    
                    FOR C_L_PEDIDUM IN 1.. tof_pedidum.COUNT
                    LOOP
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT + 1 ).CD_ELO_CARTEIRA:= tof_pedidum(C_L_PEDIDUM).CD_ELO_CARTEIRA;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).NU_CONTRATO_SAP:= tof_pedidum(C_L_PEDIDUM).NU_CONTRATO_SAP;  
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_ITEM_CONTRATO:= tof_pedidum(C_L_PEDIDUM).CD_ITEM_CONTRATO;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_PEDIDO        := tof_pedidum(C_L_PEDIDUM).CD_PEDIDO;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_ITEM_PEDIDO   := tof_pedidum(C_L_PEDIDUM).CD_ITEM_PEDIDO;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).NU_ORDEM_VENDA   := tof_pedidum(C_L_PEDIDUM).NU_ORDEM_VENDA;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_PRODUTO_SAP    := tof_pedidum(C_L_PEDIDUM).CD_PRODUTO_SAP;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_MOTIVO_RECUSA :=  tof_pedidum(C_L_PEDIDUM).CD_MOTIVO_RECUSA;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_REMESSA:=  tof_pedidum(C_L_PEDIDUM).CD_BLOQUEIO_REMESSA;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_REMESSA_ITEM:= tof_pedidum(C_L_PEDIDUM).CD_BLOQUEIO_REMESSA_ITEM ;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_FATURAMENTO  := tof_pedidum(C_L_PEDIDUM).CD_BLOQUEIO_FATURAMENTO;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_FATURAMENTO_ITEM:= tof_pedidum(C_L_PEDIDUM).CD_BLOQUEIO_FATURAMENTO_ITEM;  
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_CREDITO  := tof_pedidum(C_L_PEDIDUM).CD_BLOQUEIO_CREDITO;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).DS_CREDIT_BLOCK_REASON :=  tof_pedidum(C_L_PEDIDUM).DS_CREDIT_BLOCK_REASON;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_MOTIVO_BLOQUEIO_CREDITO:=  tof_pedidum(C_L_PEDIDUM).CD_MOTIVO_BLOQUEIO_CREDITO;
                        tof_atual_pedidum_t(tof_atual_pedidum_t.COUNT).CD_BLOQUEIO_ENTREGA := tof_pedidum(C_L_PEDIDUM).CD_BLOQUEIO_ENTREGA;
                        
                    
                    
                    END LOOP;
                    
                    
                    EXCEPTION 
                    WHEN NO_DATA_FOUND THEN 
                        BEGIN
                        
                        --RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 024 - '
                        --|| SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;

                    WHEN OTHERS THEN 
                        BEGIN
                        
                        RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 025 - '
                        || SQLCODE || ' -ERROR- ' || SQLERRM );
                        V_TRAVA:='S';
                        END;
                    
                    END;
 
                END;              

                
                v_status:=null;     

            END;
            END IF;

        END;
        END LOOP;
        
        
--     V_DS_VERSAO:= 
--      '['
--     ||     '{"ID": 0013, "APP": "GX_CELL_ATTENDANCE.PU_ULTIMA_PARA_CEL_STATUS", ' 
--     ||     '"PROPERTIES": ['
--     ||         '{"NAME": "CD_MOTIVO...", "VAL": "REFRESH" },'
--     ||     '], "DH_ULT_MOD": ' || TO_CHAR(CURRENT_DATE, 'DD/MM/RRRR HH24:MI:SS') || ' }'
--     || '],' ;      
        
    BEGIN
    FORALL C_LINHA IN INDICES OF tof_atual_pedidum_t
    
    UPDATE VND.ELO_CARTEIRA CT
    SET
    CT.CD_MOTIVO_RECUSA =  tof_atual_pedidum_t(C_LINHA).CD_MOTIVO_RECUSA,
    CT.CD_BLOQUEIO_REMESSA =  tof_atual_pedidum_t(C_LINHA).CD_BLOQUEIO_REMESSA,
    CT.CD_BLOQUEIO_REMESSA_ITEM = tof_atual_pedidum_t(C_LINHA).CD_BLOQUEIO_REMESSA_ITEM ,
    CT.CD_BLOQUEIO_FATURAMENTO  = tof_atual_pedidum_t(C_LINHA).CD_BLOQUEIO_FATURAMENTO,
    CT.CD_BLOQUEIO_FATURAMENTO_ITEM= tof_atual_pedidum_t(C_LINHA).CD_BLOQUEIO_FATURAMENTO_ITEM,
    CT.CD_BLOQUEIO_CREDITO  = tof_atual_pedidum_t(C_LINHA).CD_BLOQUEIO_CREDITO,
    CT.DS_CREDIT_BLOCK_REASON =  tof_atual_pedidum_t(C_LINHA).DS_CREDIT_BLOCK_REASON,
    --.CD_MOTIVO_BLOQUEIO_CREDITO =  tof_atual_pedidum_t(C_LINHA).CD_MOTIVO_BLOQUEIO_CREDITO,
    CT.CD_BLOQUEIO_ENTREGA = tof_atual_pedidum_t(C_LINHA).CD_BLOQUEIO_ENTREGA,
    CT.DS_VERSAO = SUBSTR(NVL(CT.DS_VERSAO, ' '), 1,3500 ) || SUBSTR(
      '['
     ||     '{"ID": 0013, "APP": "GX_CELL_ATTENDANCE.PU_ULTIMA_PARA_CEL_STATUS", ' 
     ||     '"PROPERTIES": ['
     ||         '{"NAME": "CD_MOTIVO...", "VAL": "REFRESH" },'
     ||     '], "DH_ULT_MOD": ' || TO_CHAR(CURRENT_DATE, 'DD/MM/RRRR HH24:MI:SS') || ' }'
     || '],' ,1 , 500)   
   


    WHERE 
    
    CT.CD_ELO_CARTEIRA = tof_atual_pedidum_t(C_LINHA).CD_ELO_CARTEIRA;
    COMMIT;
    
    END;        
        

    ---------------------------------ATUALIZACOES -------------------------------------

         
        BEGIN            
        FOR C_LINHA IN 1 .. tof_atual_pedidum_t.COUNT
        LOOP
        BEGIN
           
        BEGIN    
                
            BEGIN
                VND.GX_CELL_ATTENDANCE.PD_CELL_ATT_UNDO_UPROT(tof_atual_pedidum_t(C_LINHA).CD_ELO_CARTEIRA);
            COMMIT;
            EXCEPTION 
            
            WHEN OTHERS THEN 
                BEGIN
                --v_status:=NULL;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 028'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END ;           
                    
                    
            BEGIN
            
            VND.GX_CELL_ATTENDANCE.PU_CHECK_STATUS_CELL(
                    tof_atual_pedidum_t(C_LINHA).CD_ELO_CARTEIRA,
                    V_RET_CD_ELO_STATUS,
                    V_RET_SG_STATUS,
                    V_RET_ERRO,
                    V_RET_RETORNO);
            COMMIT;
            v_status:=V_RET_SG_STATUS;
            
            EXCEPTION 
            
            WHEN OTHERS THEN 
                BEGIN
                v_status:=NULL;
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO CHECK STATUS - 028'
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                V_TRAVA:='S';
                END;
            END;
                 
        END;   

        END;
        END LOOP;
        END;

        OPEN P_RETORNO FOR
        SELECT '1' AS P_SUCESSO
        FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            BEGIN
            
                RAISE_APPLICATION_ERROR(-20001, 'ERRO ENCONTRADO 035 - '
                || SQLCODE || ' -ERROR- ' || SQLERRM );
                OPEN P_RETORNO FOR
                SELECT '0' AS P_SUCESSO
                FROM DUAL;
                ROLLBACK;
            END;

    END PU_ULTIMA_PARA_CEL_STATUS;




END GX_CELL_ATTENDANCE;
/